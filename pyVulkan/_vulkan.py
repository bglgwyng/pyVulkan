from cffi import *
from pkg_resources import *
from collections import Iterable
from weakref import *
import sys

ffi = FFI()

ffi.cdef(resource_string(__name__, "_vulkan.h"))

if sys.platform=='win32':
	_lib = ffi.dlopen('vulkan-1.dll')
else:
	_lib = ffi.dlopen('libvulkan.so')

class VkPipelineCacheHeaderVersion:
	VK_PIPELINE_CACHE_HEADER_VERSION_MAX_ENUM = 2147483647
	VK_PIPELINE_CACHE_HEADER_VERSION_RANGE_SIZE = 1
	VK_PIPELINE_CACHE_HEADER_VERSION_END_RANGE = 1
	VK_PIPELINE_CACHE_HEADER_VERSION_BEGIN_RANGE = 1
	VK_PIPELINE_CACHE_HEADER_VERSION_ONE = 1
	
VK_PIPELINE_CACHE_HEADER_VERSION_MAX_ENUM = VkPipelineCacheHeaderVersion.VK_PIPELINE_CACHE_HEADER_VERSION_MAX_ENUM
VK_PIPELINE_CACHE_HEADER_VERSION_RANGE_SIZE = VkPipelineCacheHeaderVersion.VK_PIPELINE_CACHE_HEADER_VERSION_RANGE_SIZE
VK_PIPELINE_CACHE_HEADER_VERSION_END_RANGE = VkPipelineCacheHeaderVersion.VK_PIPELINE_CACHE_HEADER_VERSION_END_RANGE
VK_PIPELINE_CACHE_HEADER_VERSION_BEGIN_RANGE = VkPipelineCacheHeaderVersion.VK_PIPELINE_CACHE_HEADER_VERSION_BEGIN_RANGE
VK_PIPELINE_CACHE_HEADER_VERSION_ONE = VkPipelineCacheHeaderVersion.VK_PIPELINE_CACHE_HEADER_VERSION_ONE

class VkResult:
	VK_RESULT_MAX_ENUM = 2147483647
	VK_RESULT_RANGE_SIZE = 17
	VK_RESULT_END_RANGE = 5
	VK_RESULT_BEGIN_RANGE = -11
	VK_ERROR_INVALID_SHADER_NV = -1000012000
	VK_ERROR_VALIDATION_FAILED_EXT = -1000011001
	VK_ERROR_INCOMPATIBLE_DISPLAY_KHR = -1000003001
	VK_ERROR_OUT_OF_DATE_KHR = -1000001004
	VK_SUBOPTIMAL_KHR = 1000001003
	VK_ERROR_NATIVE_WINDOW_IN_USE_KHR = -1000000001
	VK_ERROR_SURFACE_LOST_KHR = -1000000000
	VK_ERROR_FORMAT_NOT_SUPPORTED = -11
	VK_ERROR_TOO_MANY_OBJECTS = -10
	VK_ERROR_INCOMPATIBLE_DRIVER = -9
	VK_ERROR_FEATURE_NOT_PRESENT = -8
	VK_ERROR_EXTENSION_NOT_PRESENT = -7
	VK_ERROR_LAYER_NOT_PRESENT = -6
	VK_ERROR_MEMORY_MAP_FAILED = -5
	VK_ERROR_DEVICE_LOST = -4
	VK_ERROR_INITIALIZATION_FAILED = -3
	VK_ERROR_OUT_OF_DEVICE_MEMORY = -2
	VK_ERROR_OUT_OF_HOST_MEMORY = -1
	VK_INCOMPLETE = 5
	VK_EVENT_RESET = 4
	VK_EVENT_SET = 3
	VK_TIMEOUT = 2
	VK_NOT_READY = 1
	VK_SUCCESS = 0
	
VK_RESULT_MAX_ENUM = VkResult.VK_RESULT_MAX_ENUM
VK_RESULT_RANGE_SIZE = VkResult.VK_RESULT_RANGE_SIZE
VK_RESULT_END_RANGE = VkResult.VK_RESULT_END_RANGE
VK_RESULT_BEGIN_RANGE = VkResult.VK_RESULT_BEGIN_RANGE
VK_ERROR_INVALID_SHADER_NV = VkResult.VK_ERROR_INVALID_SHADER_NV
VK_ERROR_VALIDATION_FAILED_EXT = VkResult.VK_ERROR_VALIDATION_FAILED_EXT
VK_ERROR_INCOMPATIBLE_DISPLAY_KHR = VkResult.VK_ERROR_INCOMPATIBLE_DISPLAY_KHR
VK_ERROR_OUT_OF_DATE_KHR = VkResult.VK_ERROR_OUT_OF_DATE_KHR
VK_SUBOPTIMAL_KHR = VkResult.VK_SUBOPTIMAL_KHR
VK_ERROR_NATIVE_WINDOW_IN_USE_KHR = VkResult.VK_ERROR_NATIVE_WINDOW_IN_USE_KHR
VK_ERROR_SURFACE_LOST_KHR = VkResult.VK_ERROR_SURFACE_LOST_KHR
VK_ERROR_FORMAT_NOT_SUPPORTED = VkResult.VK_ERROR_FORMAT_NOT_SUPPORTED
VK_ERROR_TOO_MANY_OBJECTS = VkResult.VK_ERROR_TOO_MANY_OBJECTS
VK_ERROR_INCOMPATIBLE_DRIVER = VkResult.VK_ERROR_INCOMPATIBLE_DRIVER
VK_ERROR_FEATURE_NOT_PRESENT = VkResult.VK_ERROR_FEATURE_NOT_PRESENT
VK_ERROR_EXTENSION_NOT_PRESENT = VkResult.VK_ERROR_EXTENSION_NOT_PRESENT
VK_ERROR_LAYER_NOT_PRESENT = VkResult.VK_ERROR_LAYER_NOT_PRESENT
VK_ERROR_MEMORY_MAP_FAILED = VkResult.VK_ERROR_MEMORY_MAP_FAILED
VK_ERROR_DEVICE_LOST = VkResult.VK_ERROR_DEVICE_LOST
VK_ERROR_INITIALIZATION_FAILED = VkResult.VK_ERROR_INITIALIZATION_FAILED
VK_ERROR_OUT_OF_DEVICE_MEMORY = VkResult.VK_ERROR_OUT_OF_DEVICE_MEMORY
VK_ERROR_OUT_OF_HOST_MEMORY = VkResult.VK_ERROR_OUT_OF_HOST_MEMORY
VK_INCOMPLETE = VkResult.VK_INCOMPLETE
VK_EVENT_RESET = VkResult.VK_EVENT_RESET
VK_EVENT_SET = VkResult.VK_EVENT_SET
VK_TIMEOUT = VkResult.VK_TIMEOUT
VK_NOT_READY = VkResult.VK_NOT_READY
VK_SUCCESS = VkResult.VK_SUCCESS

class VkStructureType:
	VK_STRUCTURE_TYPE_MAX_ENUM = 2147483647
	VK_STRUCTURE_TYPE_RANGE_SIZE = 49
	VK_STRUCTURE_TYPE_END_RANGE = 48
	VK_STRUCTURE_TYPE_BEGIN_RANGE = 0
	VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT = 1000011000
	VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR = 1000009000
	VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR = 1000008000
	VK_STRUCTURE_TYPE_MIR_SURFACE_CREATE_INFO_KHR = 1000007000
	VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR = 1000006000
	VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR = 1000005000
	VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR = 1000004000
	VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR = 1000003000
	VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR = 1000002001
	VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR = 1000002000
	VK_STRUCTURE_TYPE_PRESENT_INFO_KHR = 1000001001
	VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR = 1000001000
	VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO = 48
	VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO = 47
	VK_STRUCTURE_TYPE_MEMORY_BARRIER = 46
	VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER = 45
	VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER = 44
	VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO = 43
	VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO = 42
	VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO = 41
	VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO = 40
	VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO = 39
	VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO = 38
	VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO = 37
	VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET = 36
	VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET = 35
	VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO = 34
	VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO = 33
	VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO = 32
	VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO = 31
	VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO = 30
	VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO = 29
	VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO = 28
	VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO = 27
	VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO = 26
	VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO = 25
	VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO = 24
	VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO = 23
	VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO = 22
	VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO = 21
	VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO = 20
	VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO = 19
	VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO = 18
	VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO = 17
	VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO = 16
	VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO = 15
	VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO = 14
	VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO = 13
	VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO = 12
	VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO = 11
	VK_STRUCTURE_TYPE_EVENT_CREATE_INFO = 10
	VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO = 9
	VK_STRUCTURE_TYPE_FENCE_CREATE_INFO = 8
	VK_STRUCTURE_TYPE_BIND_SPARSE_INFO = 7
	VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE = 6
	VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO = 5
	VK_STRUCTURE_TYPE_SUBMIT_INFO = 4
	VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO = 3
	VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO = 2
	VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO = 1
	VK_STRUCTURE_TYPE_APPLICATION_INFO = 0
	
VK_STRUCTURE_TYPE_MAX_ENUM = VkStructureType.VK_STRUCTURE_TYPE_MAX_ENUM
VK_STRUCTURE_TYPE_RANGE_SIZE = VkStructureType.VK_STRUCTURE_TYPE_RANGE_SIZE
VK_STRUCTURE_TYPE_END_RANGE = VkStructureType.VK_STRUCTURE_TYPE_END_RANGE
VK_STRUCTURE_TYPE_BEGIN_RANGE = VkStructureType.VK_STRUCTURE_TYPE_BEGIN_RANGE
VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT
VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR
VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR
VK_STRUCTURE_TYPE_MIR_SURFACE_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_MIR_SURFACE_CREATE_INFO_KHR
VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR
VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR
VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR
VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR
VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR
VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR
VK_STRUCTURE_TYPE_PRESENT_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_PRESENT_INFO_KHR
VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR
VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO
VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO
VK_STRUCTURE_TYPE_MEMORY_BARRIER = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_BARRIER
VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER
VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER = VkStructureType.VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER
VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO = VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO
VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO = VkStructureType.VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO
VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO = VkStructureType.VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO
VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO
VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO
VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO
VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO
VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET = VkStructureType.VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET
VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET = VkStructureType.VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET
VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO
VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO
VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO
VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO
VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO
VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO
VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO
VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO
VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO
VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO
VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO
VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO
VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO
VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO
VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO
VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO
VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO
VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO
VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO
VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO
VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO
VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO
VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO
VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO
VK_STRUCTURE_TYPE_EVENT_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_EVENT_CREATE_INFO
VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO
VK_STRUCTURE_TYPE_FENCE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_FENCE_CREATE_INFO
VK_STRUCTURE_TYPE_BIND_SPARSE_INFO = VkStructureType.VK_STRUCTURE_TYPE_BIND_SPARSE_INFO
VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE = VkStructureType.VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE
VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO
VK_STRUCTURE_TYPE_SUBMIT_INFO = VkStructureType.VK_STRUCTURE_TYPE_SUBMIT_INFO
VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO
VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO
VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO
VK_STRUCTURE_TYPE_APPLICATION_INFO = VkStructureType.VK_STRUCTURE_TYPE_APPLICATION_INFO

class VkSystemAllocationScope:
	VK_SYSTEM_ALLOCATION_SCOPE_MAX_ENUM = 2147483647
	VK_SYSTEM_ALLOCATION_SCOPE_RANGE_SIZE = 5
	VK_SYSTEM_ALLOCATION_SCOPE_END_RANGE = 4
	VK_SYSTEM_ALLOCATION_SCOPE_BEGIN_RANGE = 0
	VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE = 4
	VK_SYSTEM_ALLOCATION_SCOPE_DEVICE = 3
	VK_SYSTEM_ALLOCATION_SCOPE_CACHE = 2
	VK_SYSTEM_ALLOCATION_SCOPE_OBJECT = 1
	VK_SYSTEM_ALLOCATION_SCOPE_COMMAND = 0
	
VK_SYSTEM_ALLOCATION_SCOPE_MAX_ENUM = VkSystemAllocationScope.VK_SYSTEM_ALLOCATION_SCOPE_MAX_ENUM
VK_SYSTEM_ALLOCATION_SCOPE_RANGE_SIZE = VkSystemAllocationScope.VK_SYSTEM_ALLOCATION_SCOPE_RANGE_SIZE
VK_SYSTEM_ALLOCATION_SCOPE_END_RANGE = VkSystemAllocationScope.VK_SYSTEM_ALLOCATION_SCOPE_END_RANGE
VK_SYSTEM_ALLOCATION_SCOPE_BEGIN_RANGE = VkSystemAllocationScope.VK_SYSTEM_ALLOCATION_SCOPE_BEGIN_RANGE
VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE = VkSystemAllocationScope.VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE
VK_SYSTEM_ALLOCATION_SCOPE_DEVICE = VkSystemAllocationScope.VK_SYSTEM_ALLOCATION_SCOPE_DEVICE
VK_SYSTEM_ALLOCATION_SCOPE_CACHE = VkSystemAllocationScope.VK_SYSTEM_ALLOCATION_SCOPE_CACHE
VK_SYSTEM_ALLOCATION_SCOPE_OBJECT = VkSystemAllocationScope.VK_SYSTEM_ALLOCATION_SCOPE_OBJECT
VK_SYSTEM_ALLOCATION_SCOPE_COMMAND = VkSystemAllocationScope.VK_SYSTEM_ALLOCATION_SCOPE_COMMAND

class VkInternalAllocationType:
	VK_INTERNAL_ALLOCATION_TYPE_MAX_ENUM = 2147483647
	VK_INTERNAL_ALLOCATION_TYPE_RANGE_SIZE = 1
	VK_INTERNAL_ALLOCATION_TYPE_END_RANGE = 0
	VK_INTERNAL_ALLOCATION_TYPE_BEGIN_RANGE = 0
	VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE = 0
	
VK_INTERNAL_ALLOCATION_TYPE_MAX_ENUM = VkInternalAllocationType.VK_INTERNAL_ALLOCATION_TYPE_MAX_ENUM
VK_INTERNAL_ALLOCATION_TYPE_RANGE_SIZE = VkInternalAllocationType.VK_INTERNAL_ALLOCATION_TYPE_RANGE_SIZE
VK_INTERNAL_ALLOCATION_TYPE_END_RANGE = VkInternalAllocationType.VK_INTERNAL_ALLOCATION_TYPE_END_RANGE
VK_INTERNAL_ALLOCATION_TYPE_BEGIN_RANGE = VkInternalAllocationType.VK_INTERNAL_ALLOCATION_TYPE_BEGIN_RANGE
VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE = VkInternalAllocationType.VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE

class VkFormat:
	VK_FORMAT_MAX_ENUM = 2147483647
	VK_FORMAT_RANGE_SIZE = 185
	VK_FORMAT_END_RANGE = 184
	VK_FORMAT_BEGIN_RANGE = 0
	VK_FORMAT_ASTC_12x12_SRGB_BLOCK = 184
	VK_FORMAT_ASTC_12x12_UNORM_BLOCK = 183
	VK_FORMAT_ASTC_12x10_SRGB_BLOCK = 182
	VK_FORMAT_ASTC_12x10_UNORM_BLOCK = 181
	VK_FORMAT_ASTC_10x10_SRGB_BLOCK = 180
	VK_FORMAT_ASTC_10x10_UNORM_BLOCK = 179
	VK_FORMAT_ASTC_10x8_SRGB_BLOCK = 178
	VK_FORMAT_ASTC_10x8_UNORM_BLOCK = 177
	VK_FORMAT_ASTC_10x6_SRGB_BLOCK = 176
	VK_FORMAT_ASTC_10x6_UNORM_BLOCK = 175
	VK_FORMAT_ASTC_10x5_SRGB_BLOCK = 174
	VK_FORMAT_ASTC_10x5_UNORM_BLOCK = 173
	VK_FORMAT_ASTC_8x8_SRGB_BLOCK = 172
	VK_FORMAT_ASTC_8x8_UNORM_BLOCK = 171
	VK_FORMAT_ASTC_8x6_SRGB_BLOCK = 170
	VK_FORMAT_ASTC_8x6_UNORM_BLOCK = 169
	VK_FORMAT_ASTC_8x5_SRGB_BLOCK = 168
	VK_FORMAT_ASTC_8x5_UNORM_BLOCK = 167
	VK_FORMAT_ASTC_6x6_SRGB_BLOCK = 166
	VK_FORMAT_ASTC_6x6_UNORM_BLOCK = 165
	VK_FORMAT_ASTC_6x5_SRGB_BLOCK = 164
	VK_FORMAT_ASTC_6x5_UNORM_BLOCK = 163
	VK_FORMAT_ASTC_5x5_SRGB_BLOCK = 162
	VK_FORMAT_ASTC_5x5_UNORM_BLOCK = 161
	VK_FORMAT_ASTC_5x4_SRGB_BLOCK = 160
	VK_FORMAT_ASTC_5x4_UNORM_BLOCK = 159
	VK_FORMAT_ASTC_4x4_SRGB_BLOCK = 158
	VK_FORMAT_ASTC_4x4_UNORM_BLOCK = 157
	VK_FORMAT_EAC_R11G11_SNORM_BLOCK = 156
	VK_FORMAT_EAC_R11G11_UNORM_BLOCK = 155
	VK_FORMAT_EAC_R11_SNORM_BLOCK = 154
	VK_FORMAT_EAC_R11_UNORM_BLOCK = 153
	VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK = 152
	VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK = 151
	VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK = 150
	VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK = 149
	VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK = 148
	VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK = 147
	VK_FORMAT_BC7_SRGB_BLOCK = 146
	VK_FORMAT_BC7_UNORM_BLOCK = 145
	VK_FORMAT_BC6H_SFLOAT_BLOCK = 144
	VK_FORMAT_BC6H_UFLOAT_BLOCK = 143
	VK_FORMAT_BC5_SNORM_BLOCK = 142
	VK_FORMAT_BC5_UNORM_BLOCK = 141
	VK_FORMAT_BC4_SNORM_BLOCK = 140
	VK_FORMAT_BC4_UNORM_BLOCK = 139
	VK_FORMAT_BC3_SRGB_BLOCK = 138
	VK_FORMAT_BC3_UNORM_BLOCK = 137
	VK_FORMAT_BC2_SRGB_BLOCK = 136
	VK_FORMAT_BC2_UNORM_BLOCK = 135
	VK_FORMAT_BC1_RGBA_SRGB_BLOCK = 134
	VK_FORMAT_BC1_RGBA_UNORM_BLOCK = 133
	VK_FORMAT_BC1_RGB_SRGB_BLOCK = 132
	VK_FORMAT_BC1_RGB_UNORM_BLOCK = 131
	VK_FORMAT_D32_SFLOAT_S8_UINT = 130
	VK_FORMAT_D24_UNORM_S8_UINT = 129
	VK_FORMAT_D16_UNORM_S8_UINT = 128
	VK_FORMAT_S8_UINT = 127
	VK_FORMAT_D32_SFLOAT = 126
	VK_FORMAT_X8_D24_UNORM_PACK32 = 125
	VK_FORMAT_D16_UNORM = 124
	VK_FORMAT_E5B9G9R9_UFLOAT_PACK32 = 123
	VK_FORMAT_B10G11R11_UFLOAT_PACK32 = 122
	VK_FORMAT_R64G64B64A64_SFLOAT = 121
	VK_FORMAT_R64G64B64A64_SINT = 120
	VK_FORMAT_R64G64B64A64_UINT = 119
	VK_FORMAT_R64G64B64_SFLOAT = 118
	VK_FORMAT_R64G64B64_SINT = 117
	VK_FORMAT_R64G64B64_UINT = 116
	VK_FORMAT_R64G64_SFLOAT = 115
	VK_FORMAT_R64G64_SINT = 114
	VK_FORMAT_R64G64_UINT = 113
	VK_FORMAT_R64_SFLOAT = 112
	VK_FORMAT_R64_SINT = 111
	VK_FORMAT_R64_UINT = 110
	VK_FORMAT_R32G32B32A32_SFLOAT = 109
	VK_FORMAT_R32G32B32A32_SINT = 108
	VK_FORMAT_R32G32B32A32_UINT = 107
	VK_FORMAT_R32G32B32_SFLOAT = 106
	VK_FORMAT_R32G32B32_SINT = 105
	VK_FORMAT_R32G32B32_UINT = 104
	VK_FORMAT_R32G32_SFLOAT = 103
	VK_FORMAT_R32G32_SINT = 102
	VK_FORMAT_R32G32_UINT = 101
	VK_FORMAT_R32_SFLOAT = 100
	VK_FORMAT_R32_SINT = 99
	VK_FORMAT_R32_UINT = 98
	VK_FORMAT_R16G16B16A16_SFLOAT = 97
	VK_FORMAT_R16G16B16A16_SINT = 96
	VK_FORMAT_R16G16B16A16_UINT = 95
	VK_FORMAT_R16G16B16A16_SSCALED = 94
	VK_FORMAT_R16G16B16A16_USCALED = 93
	VK_FORMAT_R16G16B16A16_SNORM = 92
	VK_FORMAT_R16G16B16A16_UNORM = 91
	VK_FORMAT_R16G16B16_SFLOAT = 90
	VK_FORMAT_R16G16B16_SINT = 89
	VK_FORMAT_R16G16B16_UINT = 88
	VK_FORMAT_R16G16B16_SSCALED = 87
	VK_FORMAT_R16G16B16_USCALED = 86
	VK_FORMAT_R16G16B16_SNORM = 85
	VK_FORMAT_R16G16B16_UNORM = 84
	VK_FORMAT_R16G16_SFLOAT = 83
	VK_FORMAT_R16G16_SINT = 82
	VK_FORMAT_R16G16_UINT = 81
	VK_FORMAT_R16G16_SSCALED = 80
	VK_FORMAT_R16G16_USCALED = 79
	VK_FORMAT_R16G16_SNORM = 78
	VK_FORMAT_R16G16_UNORM = 77
	VK_FORMAT_R16_SFLOAT = 76
	VK_FORMAT_R16_SINT = 75
	VK_FORMAT_R16_UINT = 74
	VK_FORMAT_R16_SSCALED = 73
	VK_FORMAT_R16_USCALED = 72
	VK_FORMAT_R16_SNORM = 71
	VK_FORMAT_R16_UNORM = 70
	VK_FORMAT_A2B10G10R10_SINT_PACK32 = 69
	VK_FORMAT_A2B10G10R10_UINT_PACK32 = 68
	VK_FORMAT_A2B10G10R10_SSCALED_PACK32 = 67
	VK_FORMAT_A2B10G10R10_USCALED_PACK32 = 66
	VK_FORMAT_A2B10G10R10_SNORM_PACK32 = 65
	VK_FORMAT_A2B10G10R10_UNORM_PACK32 = 64
	VK_FORMAT_A2R10G10B10_SINT_PACK32 = 63
	VK_FORMAT_A2R10G10B10_UINT_PACK32 = 62
	VK_FORMAT_A2R10G10B10_SSCALED_PACK32 = 61
	VK_FORMAT_A2R10G10B10_USCALED_PACK32 = 60
	VK_FORMAT_A2R10G10B10_SNORM_PACK32 = 59
	VK_FORMAT_A2R10G10B10_UNORM_PACK32 = 58
	VK_FORMAT_A8B8G8R8_SRGB_PACK32 = 57
	VK_FORMAT_A8B8G8R8_SINT_PACK32 = 56
	VK_FORMAT_A8B8G8R8_UINT_PACK32 = 55
	VK_FORMAT_A8B8G8R8_SSCALED_PACK32 = 54
	VK_FORMAT_A8B8G8R8_USCALED_PACK32 = 53
	VK_FORMAT_A8B8G8R8_SNORM_PACK32 = 52
	VK_FORMAT_A8B8G8R8_UNORM_PACK32 = 51
	VK_FORMAT_B8G8R8A8_SRGB = 50
	VK_FORMAT_B8G8R8A8_SINT = 49
	VK_FORMAT_B8G8R8A8_UINT = 48
	VK_FORMAT_B8G8R8A8_SSCALED = 47
	VK_FORMAT_B8G8R8A8_USCALED = 46
	VK_FORMAT_B8G8R8A8_SNORM = 45
	VK_FORMAT_B8G8R8A8_UNORM = 44
	VK_FORMAT_R8G8B8A8_SRGB = 43
	VK_FORMAT_R8G8B8A8_SINT = 42
	VK_FORMAT_R8G8B8A8_UINT = 41
	VK_FORMAT_R8G8B8A8_SSCALED = 40
	VK_FORMAT_R8G8B8A8_USCALED = 39
	VK_FORMAT_R8G8B8A8_SNORM = 38
	VK_FORMAT_R8G8B8A8_UNORM = 37
	VK_FORMAT_B8G8R8_SRGB = 36
	VK_FORMAT_B8G8R8_SINT = 35
	VK_FORMAT_B8G8R8_UINT = 34
	VK_FORMAT_B8G8R8_SSCALED = 33
	VK_FORMAT_B8G8R8_USCALED = 32
	VK_FORMAT_B8G8R8_SNORM = 31
	VK_FORMAT_B8G8R8_UNORM = 30
	VK_FORMAT_R8G8B8_SRGB = 29
	VK_FORMAT_R8G8B8_SINT = 28
	VK_FORMAT_R8G8B8_UINT = 27
	VK_FORMAT_R8G8B8_SSCALED = 26
	VK_FORMAT_R8G8B8_USCALED = 25
	VK_FORMAT_R8G8B8_SNORM = 24
	VK_FORMAT_R8G8B8_UNORM = 23
	VK_FORMAT_R8G8_SRGB = 22
	VK_FORMAT_R8G8_SINT = 21
	VK_FORMAT_R8G8_UINT = 20
	VK_FORMAT_R8G8_SSCALED = 19
	VK_FORMAT_R8G8_USCALED = 18
	VK_FORMAT_R8G8_SNORM = 17
	VK_FORMAT_R8G8_UNORM = 16
	VK_FORMAT_R8_SRGB = 15
	VK_FORMAT_R8_SINT = 14
	VK_FORMAT_R8_UINT = 13
	VK_FORMAT_R8_SSCALED = 12
	VK_FORMAT_R8_USCALED = 11
	VK_FORMAT_R8_SNORM = 10
	VK_FORMAT_R8_UNORM = 9
	VK_FORMAT_A1R5G5B5_UNORM_PACK16 = 8
	VK_FORMAT_B5G5R5A1_UNORM_PACK16 = 7
	VK_FORMAT_R5G5B5A1_UNORM_PACK16 = 6
	VK_FORMAT_B5G6R5_UNORM_PACK16 = 5
	VK_FORMAT_R5G6B5_UNORM_PACK16 = 4
	VK_FORMAT_B4G4R4A4_UNORM_PACK16 = 3
	VK_FORMAT_R4G4B4A4_UNORM_PACK16 = 2
	VK_FORMAT_R4G4_UNORM_PACK8 = 1
	VK_FORMAT_UNDEFINED = 0
	
VK_FORMAT_MAX_ENUM = VkFormat.VK_FORMAT_MAX_ENUM
VK_FORMAT_RANGE_SIZE = VkFormat.VK_FORMAT_RANGE_SIZE
VK_FORMAT_END_RANGE = VkFormat.VK_FORMAT_END_RANGE
VK_FORMAT_BEGIN_RANGE = VkFormat.VK_FORMAT_BEGIN_RANGE
VK_FORMAT_ASTC_12x12_SRGB_BLOCK = VkFormat.VK_FORMAT_ASTC_12x12_SRGB_BLOCK
VK_FORMAT_ASTC_12x12_UNORM_BLOCK = VkFormat.VK_FORMAT_ASTC_12x12_UNORM_BLOCK
VK_FORMAT_ASTC_12x10_SRGB_BLOCK = VkFormat.VK_FORMAT_ASTC_12x10_SRGB_BLOCK
VK_FORMAT_ASTC_12x10_UNORM_BLOCK = VkFormat.VK_FORMAT_ASTC_12x10_UNORM_BLOCK
VK_FORMAT_ASTC_10x10_SRGB_BLOCK = VkFormat.VK_FORMAT_ASTC_10x10_SRGB_BLOCK
VK_FORMAT_ASTC_10x10_UNORM_BLOCK = VkFormat.VK_FORMAT_ASTC_10x10_UNORM_BLOCK
VK_FORMAT_ASTC_10x8_SRGB_BLOCK = VkFormat.VK_FORMAT_ASTC_10x8_SRGB_BLOCK
VK_FORMAT_ASTC_10x8_UNORM_BLOCK = VkFormat.VK_FORMAT_ASTC_10x8_UNORM_BLOCK
VK_FORMAT_ASTC_10x6_SRGB_BLOCK = VkFormat.VK_FORMAT_ASTC_10x6_SRGB_BLOCK
VK_FORMAT_ASTC_10x6_UNORM_BLOCK = VkFormat.VK_FORMAT_ASTC_10x6_UNORM_BLOCK
VK_FORMAT_ASTC_10x5_SRGB_BLOCK = VkFormat.VK_FORMAT_ASTC_10x5_SRGB_BLOCK
VK_FORMAT_ASTC_10x5_UNORM_BLOCK = VkFormat.VK_FORMAT_ASTC_10x5_UNORM_BLOCK
VK_FORMAT_ASTC_8x8_SRGB_BLOCK = VkFormat.VK_FORMAT_ASTC_8x8_SRGB_BLOCK
VK_FORMAT_ASTC_8x8_UNORM_BLOCK = VkFormat.VK_FORMAT_ASTC_8x8_UNORM_BLOCK
VK_FORMAT_ASTC_8x6_SRGB_BLOCK = VkFormat.VK_FORMAT_ASTC_8x6_SRGB_BLOCK
VK_FORMAT_ASTC_8x6_UNORM_BLOCK = VkFormat.VK_FORMAT_ASTC_8x6_UNORM_BLOCK
VK_FORMAT_ASTC_8x5_SRGB_BLOCK = VkFormat.VK_FORMAT_ASTC_8x5_SRGB_BLOCK
VK_FORMAT_ASTC_8x5_UNORM_BLOCK = VkFormat.VK_FORMAT_ASTC_8x5_UNORM_BLOCK
VK_FORMAT_ASTC_6x6_SRGB_BLOCK = VkFormat.VK_FORMAT_ASTC_6x6_SRGB_BLOCK
VK_FORMAT_ASTC_6x6_UNORM_BLOCK = VkFormat.VK_FORMAT_ASTC_6x6_UNORM_BLOCK
VK_FORMAT_ASTC_6x5_SRGB_BLOCK = VkFormat.VK_FORMAT_ASTC_6x5_SRGB_BLOCK
VK_FORMAT_ASTC_6x5_UNORM_BLOCK = VkFormat.VK_FORMAT_ASTC_6x5_UNORM_BLOCK
VK_FORMAT_ASTC_5x5_SRGB_BLOCK = VkFormat.VK_FORMAT_ASTC_5x5_SRGB_BLOCK
VK_FORMAT_ASTC_5x5_UNORM_BLOCK = VkFormat.VK_FORMAT_ASTC_5x5_UNORM_BLOCK
VK_FORMAT_ASTC_5x4_SRGB_BLOCK = VkFormat.VK_FORMAT_ASTC_5x4_SRGB_BLOCK
VK_FORMAT_ASTC_5x4_UNORM_BLOCK = VkFormat.VK_FORMAT_ASTC_5x4_UNORM_BLOCK
VK_FORMAT_ASTC_4x4_SRGB_BLOCK = VkFormat.VK_FORMAT_ASTC_4x4_SRGB_BLOCK
VK_FORMAT_ASTC_4x4_UNORM_BLOCK = VkFormat.VK_FORMAT_ASTC_4x4_UNORM_BLOCK
VK_FORMAT_EAC_R11G11_SNORM_BLOCK = VkFormat.VK_FORMAT_EAC_R11G11_SNORM_BLOCK
VK_FORMAT_EAC_R11G11_UNORM_BLOCK = VkFormat.VK_FORMAT_EAC_R11G11_UNORM_BLOCK
VK_FORMAT_EAC_R11_SNORM_BLOCK = VkFormat.VK_FORMAT_EAC_R11_SNORM_BLOCK
VK_FORMAT_EAC_R11_UNORM_BLOCK = VkFormat.VK_FORMAT_EAC_R11_UNORM_BLOCK
VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK = VkFormat.VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK
VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK = VkFormat.VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK
VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK = VkFormat.VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK
VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK = VkFormat.VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK
VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK = VkFormat.VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK
VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK = VkFormat.VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK
VK_FORMAT_BC7_SRGB_BLOCK = VkFormat.VK_FORMAT_BC7_SRGB_BLOCK
VK_FORMAT_BC7_UNORM_BLOCK = VkFormat.VK_FORMAT_BC7_UNORM_BLOCK
VK_FORMAT_BC6H_SFLOAT_BLOCK = VkFormat.VK_FORMAT_BC6H_SFLOAT_BLOCK
VK_FORMAT_BC6H_UFLOAT_BLOCK = VkFormat.VK_FORMAT_BC6H_UFLOAT_BLOCK
VK_FORMAT_BC5_SNORM_BLOCK = VkFormat.VK_FORMAT_BC5_SNORM_BLOCK
VK_FORMAT_BC5_UNORM_BLOCK = VkFormat.VK_FORMAT_BC5_UNORM_BLOCK
VK_FORMAT_BC4_SNORM_BLOCK = VkFormat.VK_FORMAT_BC4_SNORM_BLOCK
VK_FORMAT_BC4_UNORM_BLOCK = VkFormat.VK_FORMAT_BC4_UNORM_BLOCK
VK_FORMAT_BC3_SRGB_BLOCK = VkFormat.VK_FORMAT_BC3_SRGB_BLOCK
VK_FORMAT_BC3_UNORM_BLOCK = VkFormat.VK_FORMAT_BC3_UNORM_BLOCK
VK_FORMAT_BC2_SRGB_BLOCK = VkFormat.VK_FORMAT_BC2_SRGB_BLOCK
VK_FORMAT_BC2_UNORM_BLOCK = VkFormat.VK_FORMAT_BC2_UNORM_BLOCK
VK_FORMAT_BC1_RGBA_SRGB_BLOCK = VkFormat.VK_FORMAT_BC1_RGBA_SRGB_BLOCK
VK_FORMAT_BC1_RGBA_UNORM_BLOCK = VkFormat.VK_FORMAT_BC1_RGBA_UNORM_BLOCK
VK_FORMAT_BC1_RGB_SRGB_BLOCK = VkFormat.VK_FORMAT_BC1_RGB_SRGB_BLOCK
VK_FORMAT_BC1_RGB_UNORM_BLOCK = VkFormat.VK_FORMAT_BC1_RGB_UNORM_BLOCK
VK_FORMAT_D32_SFLOAT_S8_UINT = VkFormat.VK_FORMAT_D32_SFLOAT_S8_UINT
VK_FORMAT_D24_UNORM_S8_UINT = VkFormat.VK_FORMAT_D24_UNORM_S8_UINT
VK_FORMAT_D16_UNORM_S8_UINT = VkFormat.VK_FORMAT_D16_UNORM_S8_UINT
VK_FORMAT_S8_UINT = VkFormat.VK_FORMAT_S8_UINT
VK_FORMAT_D32_SFLOAT = VkFormat.VK_FORMAT_D32_SFLOAT
VK_FORMAT_X8_D24_UNORM_PACK32 = VkFormat.VK_FORMAT_X8_D24_UNORM_PACK32
VK_FORMAT_D16_UNORM = VkFormat.VK_FORMAT_D16_UNORM
VK_FORMAT_E5B9G9R9_UFLOAT_PACK32 = VkFormat.VK_FORMAT_E5B9G9R9_UFLOAT_PACK32
VK_FORMAT_B10G11R11_UFLOAT_PACK32 = VkFormat.VK_FORMAT_B10G11R11_UFLOAT_PACK32
VK_FORMAT_R64G64B64A64_SFLOAT = VkFormat.VK_FORMAT_R64G64B64A64_SFLOAT
VK_FORMAT_R64G64B64A64_SINT = VkFormat.VK_FORMAT_R64G64B64A64_SINT
VK_FORMAT_R64G64B64A64_UINT = VkFormat.VK_FORMAT_R64G64B64A64_UINT
VK_FORMAT_R64G64B64_SFLOAT = VkFormat.VK_FORMAT_R64G64B64_SFLOAT
VK_FORMAT_R64G64B64_SINT = VkFormat.VK_FORMAT_R64G64B64_SINT
VK_FORMAT_R64G64B64_UINT = VkFormat.VK_FORMAT_R64G64B64_UINT
VK_FORMAT_R64G64_SFLOAT = VkFormat.VK_FORMAT_R64G64_SFLOAT
VK_FORMAT_R64G64_SINT = VkFormat.VK_FORMAT_R64G64_SINT
VK_FORMAT_R64G64_UINT = VkFormat.VK_FORMAT_R64G64_UINT
VK_FORMAT_R64_SFLOAT = VkFormat.VK_FORMAT_R64_SFLOAT
VK_FORMAT_R64_SINT = VkFormat.VK_FORMAT_R64_SINT
VK_FORMAT_R64_UINT = VkFormat.VK_FORMAT_R64_UINT
VK_FORMAT_R32G32B32A32_SFLOAT = VkFormat.VK_FORMAT_R32G32B32A32_SFLOAT
VK_FORMAT_R32G32B32A32_SINT = VkFormat.VK_FORMAT_R32G32B32A32_SINT
VK_FORMAT_R32G32B32A32_UINT = VkFormat.VK_FORMAT_R32G32B32A32_UINT
VK_FORMAT_R32G32B32_SFLOAT = VkFormat.VK_FORMAT_R32G32B32_SFLOAT
VK_FORMAT_R32G32B32_SINT = VkFormat.VK_FORMAT_R32G32B32_SINT
VK_FORMAT_R32G32B32_UINT = VkFormat.VK_FORMAT_R32G32B32_UINT
VK_FORMAT_R32G32_SFLOAT = VkFormat.VK_FORMAT_R32G32_SFLOAT
VK_FORMAT_R32G32_SINT = VkFormat.VK_FORMAT_R32G32_SINT
VK_FORMAT_R32G32_UINT = VkFormat.VK_FORMAT_R32G32_UINT
VK_FORMAT_R32_SFLOAT = VkFormat.VK_FORMAT_R32_SFLOAT
VK_FORMAT_R32_SINT = VkFormat.VK_FORMAT_R32_SINT
VK_FORMAT_R32_UINT = VkFormat.VK_FORMAT_R32_UINT
VK_FORMAT_R16G16B16A16_SFLOAT = VkFormat.VK_FORMAT_R16G16B16A16_SFLOAT
VK_FORMAT_R16G16B16A16_SINT = VkFormat.VK_FORMAT_R16G16B16A16_SINT
VK_FORMAT_R16G16B16A16_UINT = VkFormat.VK_FORMAT_R16G16B16A16_UINT
VK_FORMAT_R16G16B16A16_SSCALED = VkFormat.VK_FORMAT_R16G16B16A16_SSCALED
VK_FORMAT_R16G16B16A16_USCALED = VkFormat.VK_FORMAT_R16G16B16A16_USCALED
VK_FORMAT_R16G16B16A16_SNORM = VkFormat.VK_FORMAT_R16G16B16A16_SNORM
VK_FORMAT_R16G16B16A16_UNORM = VkFormat.VK_FORMAT_R16G16B16A16_UNORM
VK_FORMAT_R16G16B16_SFLOAT = VkFormat.VK_FORMAT_R16G16B16_SFLOAT
VK_FORMAT_R16G16B16_SINT = VkFormat.VK_FORMAT_R16G16B16_SINT
VK_FORMAT_R16G16B16_UINT = VkFormat.VK_FORMAT_R16G16B16_UINT
VK_FORMAT_R16G16B16_SSCALED = VkFormat.VK_FORMAT_R16G16B16_SSCALED
VK_FORMAT_R16G16B16_USCALED = VkFormat.VK_FORMAT_R16G16B16_USCALED
VK_FORMAT_R16G16B16_SNORM = VkFormat.VK_FORMAT_R16G16B16_SNORM
VK_FORMAT_R16G16B16_UNORM = VkFormat.VK_FORMAT_R16G16B16_UNORM
VK_FORMAT_R16G16_SFLOAT = VkFormat.VK_FORMAT_R16G16_SFLOAT
VK_FORMAT_R16G16_SINT = VkFormat.VK_FORMAT_R16G16_SINT
VK_FORMAT_R16G16_UINT = VkFormat.VK_FORMAT_R16G16_UINT
VK_FORMAT_R16G16_SSCALED = VkFormat.VK_FORMAT_R16G16_SSCALED
VK_FORMAT_R16G16_USCALED = VkFormat.VK_FORMAT_R16G16_USCALED
VK_FORMAT_R16G16_SNORM = VkFormat.VK_FORMAT_R16G16_SNORM
VK_FORMAT_R16G16_UNORM = VkFormat.VK_FORMAT_R16G16_UNORM
VK_FORMAT_R16_SFLOAT = VkFormat.VK_FORMAT_R16_SFLOAT
VK_FORMAT_R16_SINT = VkFormat.VK_FORMAT_R16_SINT
VK_FORMAT_R16_UINT = VkFormat.VK_FORMAT_R16_UINT
VK_FORMAT_R16_SSCALED = VkFormat.VK_FORMAT_R16_SSCALED
VK_FORMAT_R16_USCALED = VkFormat.VK_FORMAT_R16_USCALED
VK_FORMAT_R16_SNORM = VkFormat.VK_FORMAT_R16_SNORM
VK_FORMAT_R16_UNORM = VkFormat.VK_FORMAT_R16_UNORM
VK_FORMAT_A2B10G10R10_SINT_PACK32 = VkFormat.VK_FORMAT_A2B10G10R10_SINT_PACK32
VK_FORMAT_A2B10G10R10_UINT_PACK32 = VkFormat.VK_FORMAT_A2B10G10R10_UINT_PACK32
VK_FORMAT_A2B10G10R10_SSCALED_PACK32 = VkFormat.VK_FORMAT_A2B10G10R10_SSCALED_PACK32
VK_FORMAT_A2B10G10R10_USCALED_PACK32 = VkFormat.VK_FORMAT_A2B10G10R10_USCALED_PACK32
VK_FORMAT_A2B10G10R10_SNORM_PACK32 = VkFormat.VK_FORMAT_A2B10G10R10_SNORM_PACK32
VK_FORMAT_A2B10G10R10_UNORM_PACK32 = VkFormat.VK_FORMAT_A2B10G10R10_UNORM_PACK32
VK_FORMAT_A2R10G10B10_SINT_PACK32 = VkFormat.VK_FORMAT_A2R10G10B10_SINT_PACK32
VK_FORMAT_A2R10G10B10_UINT_PACK32 = VkFormat.VK_FORMAT_A2R10G10B10_UINT_PACK32
VK_FORMAT_A2R10G10B10_SSCALED_PACK32 = VkFormat.VK_FORMAT_A2R10G10B10_SSCALED_PACK32
VK_FORMAT_A2R10G10B10_USCALED_PACK32 = VkFormat.VK_FORMAT_A2R10G10B10_USCALED_PACK32
VK_FORMAT_A2R10G10B10_SNORM_PACK32 = VkFormat.VK_FORMAT_A2R10G10B10_SNORM_PACK32
VK_FORMAT_A2R10G10B10_UNORM_PACK32 = VkFormat.VK_FORMAT_A2R10G10B10_UNORM_PACK32
VK_FORMAT_A8B8G8R8_SRGB_PACK32 = VkFormat.VK_FORMAT_A8B8G8R8_SRGB_PACK32
VK_FORMAT_A8B8G8R8_SINT_PACK32 = VkFormat.VK_FORMAT_A8B8G8R8_SINT_PACK32
VK_FORMAT_A8B8G8R8_UINT_PACK32 = VkFormat.VK_FORMAT_A8B8G8R8_UINT_PACK32
VK_FORMAT_A8B8G8R8_SSCALED_PACK32 = VkFormat.VK_FORMAT_A8B8G8R8_SSCALED_PACK32
VK_FORMAT_A8B8G8R8_USCALED_PACK32 = VkFormat.VK_FORMAT_A8B8G8R8_USCALED_PACK32
VK_FORMAT_A8B8G8R8_SNORM_PACK32 = VkFormat.VK_FORMAT_A8B8G8R8_SNORM_PACK32
VK_FORMAT_A8B8G8R8_UNORM_PACK32 = VkFormat.VK_FORMAT_A8B8G8R8_UNORM_PACK32
VK_FORMAT_B8G8R8A8_SRGB = VkFormat.VK_FORMAT_B8G8R8A8_SRGB
VK_FORMAT_B8G8R8A8_SINT = VkFormat.VK_FORMAT_B8G8R8A8_SINT
VK_FORMAT_B8G8R8A8_UINT = VkFormat.VK_FORMAT_B8G8R8A8_UINT
VK_FORMAT_B8G8R8A8_SSCALED = VkFormat.VK_FORMAT_B8G8R8A8_SSCALED
VK_FORMAT_B8G8R8A8_USCALED = VkFormat.VK_FORMAT_B8G8R8A8_USCALED
VK_FORMAT_B8G8R8A8_SNORM = VkFormat.VK_FORMAT_B8G8R8A8_SNORM
VK_FORMAT_B8G8R8A8_UNORM = VkFormat.VK_FORMAT_B8G8R8A8_UNORM
VK_FORMAT_R8G8B8A8_SRGB = VkFormat.VK_FORMAT_R8G8B8A8_SRGB
VK_FORMAT_R8G8B8A8_SINT = VkFormat.VK_FORMAT_R8G8B8A8_SINT
VK_FORMAT_R8G8B8A8_UINT = VkFormat.VK_FORMAT_R8G8B8A8_UINT
VK_FORMAT_R8G8B8A8_SSCALED = VkFormat.VK_FORMAT_R8G8B8A8_SSCALED
VK_FORMAT_R8G8B8A8_USCALED = VkFormat.VK_FORMAT_R8G8B8A8_USCALED
VK_FORMAT_R8G8B8A8_SNORM = VkFormat.VK_FORMAT_R8G8B8A8_SNORM
VK_FORMAT_R8G8B8A8_UNORM = VkFormat.VK_FORMAT_R8G8B8A8_UNORM
VK_FORMAT_B8G8R8_SRGB = VkFormat.VK_FORMAT_B8G8R8_SRGB
VK_FORMAT_B8G8R8_SINT = VkFormat.VK_FORMAT_B8G8R8_SINT
VK_FORMAT_B8G8R8_UINT = VkFormat.VK_FORMAT_B8G8R8_UINT
VK_FORMAT_B8G8R8_SSCALED = VkFormat.VK_FORMAT_B8G8R8_SSCALED
VK_FORMAT_B8G8R8_USCALED = VkFormat.VK_FORMAT_B8G8R8_USCALED
VK_FORMAT_B8G8R8_SNORM = VkFormat.VK_FORMAT_B8G8R8_SNORM
VK_FORMAT_B8G8R8_UNORM = VkFormat.VK_FORMAT_B8G8R8_UNORM
VK_FORMAT_R8G8B8_SRGB = VkFormat.VK_FORMAT_R8G8B8_SRGB
VK_FORMAT_R8G8B8_SINT = VkFormat.VK_FORMAT_R8G8B8_SINT
VK_FORMAT_R8G8B8_UINT = VkFormat.VK_FORMAT_R8G8B8_UINT
VK_FORMAT_R8G8B8_SSCALED = VkFormat.VK_FORMAT_R8G8B8_SSCALED
VK_FORMAT_R8G8B8_USCALED = VkFormat.VK_FORMAT_R8G8B8_USCALED
VK_FORMAT_R8G8B8_SNORM = VkFormat.VK_FORMAT_R8G8B8_SNORM
VK_FORMAT_R8G8B8_UNORM = VkFormat.VK_FORMAT_R8G8B8_UNORM
VK_FORMAT_R8G8_SRGB = VkFormat.VK_FORMAT_R8G8_SRGB
VK_FORMAT_R8G8_SINT = VkFormat.VK_FORMAT_R8G8_SINT
VK_FORMAT_R8G8_UINT = VkFormat.VK_FORMAT_R8G8_UINT
VK_FORMAT_R8G8_SSCALED = VkFormat.VK_FORMAT_R8G8_SSCALED
VK_FORMAT_R8G8_USCALED = VkFormat.VK_FORMAT_R8G8_USCALED
VK_FORMAT_R8G8_SNORM = VkFormat.VK_FORMAT_R8G8_SNORM
VK_FORMAT_R8G8_UNORM = VkFormat.VK_FORMAT_R8G8_UNORM
VK_FORMAT_R8_SRGB = VkFormat.VK_FORMAT_R8_SRGB
VK_FORMAT_R8_SINT = VkFormat.VK_FORMAT_R8_SINT
VK_FORMAT_R8_UINT = VkFormat.VK_FORMAT_R8_UINT
VK_FORMAT_R8_SSCALED = VkFormat.VK_FORMAT_R8_SSCALED
VK_FORMAT_R8_USCALED = VkFormat.VK_FORMAT_R8_USCALED
VK_FORMAT_R8_SNORM = VkFormat.VK_FORMAT_R8_SNORM
VK_FORMAT_R8_UNORM = VkFormat.VK_FORMAT_R8_UNORM
VK_FORMAT_A1R5G5B5_UNORM_PACK16 = VkFormat.VK_FORMAT_A1R5G5B5_UNORM_PACK16
VK_FORMAT_B5G5R5A1_UNORM_PACK16 = VkFormat.VK_FORMAT_B5G5R5A1_UNORM_PACK16
VK_FORMAT_R5G5B5A1_UNORM_PACK16 = VkFormat.VK_FORMAT_R5G5B5A1_UNORM_PACK16
VK_FORMAT_B5G6R5_UNORM_PACK16 = VkFormat.VK_FORMAT_B5G6R5_UNORM_PACK16
VK_FORMAT_R5G6B5_UNORM_PACK16 = VkFormat.VK_FORMAT_R5G6B5_UNORM_PACK16
VK_FORMAT_B4G4R4A4_UNORM_PACK16 = VkFormat.VK_FORMAT_B4G4R4A4_UNORM_PACK16
VK_FORMAT_R4G4B4A4_UNORM_PACK16 = VkFormat.VK_FORMAT_R4G4B4A4_UNORM_PACK16
VK_FORMAT_R4G4_UNORM_PACK8 = VkFormat.VK_FORMAT_R4G4_UNORM_PACK8
VK_FORMAT_UNDEFINED = VkFormat.VK_FORMAT_UNDEFINED

class VkImageType:
	VK_IMAGE_TYPE_MAX_ENUM = 2147483647
	VK_IMAGE_TYPE_RANGE_SIZE = 3
	VK_IMAGE_TYPE_END_RANGE = 2
	VK_IMAGE_TYPE_BEGIN_RANGE = 0
	VK_IMAGE_TYPE_3D = 2
	VK_IMAGE_TYPE_2D = 1
	VK_IMAGE_TYPE_1D = 0
	
VK_IMAGE_TYPE_MAX_ENUM = VkImageType.VK_IMAGE_TYPE_MAX_ENUM
VK_IMAGE_TYPE_RANGE_SIZE = VkImageType.VK_IMAGE_TYPE_RANGE_SIZE
VK_IMAGE_TYPE_END_RANGE = VkImageType.VK_IMAGE_TYPE_END_RANGE
VK_IMAGE_TYPE_BEGIN_RANGE = VkImageType.VK_IMAGE_TYPE_BEGIN_RANGE
VK_IMAGE_TYPE_3D = VkImageType.VK_IMAGE_TYPE_3D
VK_IMAGE_TYPE_2D = VkImageType.VK_IMAGE_TYPE_2D
VK_IMAGE_TYPE_1D = VkImageType.VK_IMAGE_TYPE_1D

class VkImageTiling:
	VK_IMAGE_TILING_MAX_ENUM = 2147483647
	VK_IMAGE_TILING_RANGE_SIZE = 2
	VK_IMAGE_TILING_END_RANGE = 1
	VK_IMAGE_TILING_BEGIN_RANGE = 0
	VK_IMAGE_TILING_LINEAR = 1
	VK_IMAGE_TILING_OPTIMAL = 0
	
VK_IMAGE_TILING_MAX_ENUM = VkImageTiling.VK_IMAGE_TILING_MAX_ENUM
VK_IMAGE_TILING_RANGE_SIZE = VkImageTiling.VK_IMAGE_TILING_RANGE_SIZE
VK_IMAGE_TILING_END_RANGE = VkImageTiling.VK_IMAGE_TILING_END_RANGE
VK_IMAGE_TILING_BEGIN_RANGE = VkImageTiling.VK_IMAGE_TILING_BEGIN_RANGE
VK_IMAGE_TILING_LINEAR = VkImageTiling.VK_IMAGE_TILING_LINEAR
VK_IMAGE_TILING_OPTIMAL = VkImageTiling.VK_IMAGE_TILING_OPTIMAL

class VkPhysicalDeviceType:
	VK_PHYSICAL_DEVICE_TYPE_MAX_ENUM = 2147483647
	VK_PHYSICAL_DEVICE_TYPE_RANGE_SIZE = 5
	VK_PHYSICAL_DEVICE_TYPE_END_RANGE = 4
	VK_PHYSICAL_DEVICE_TYPE_BEGIN_RANGE = 0
	VK_PHYSICAL_DEVICE_TYPE_CPU = 4
	VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU = 3
	VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU = 2
	VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU = 1
	VK_PHYSICAL_DEVICE_TYPE_OTHER = 0
	
VK_PHYSICAL_DEVICE_TYPE_MAX_ENUM = VkPhysicalDeviceType.VK_PHYSICAL_DEVICE_TYPE_MAX_ENUM
VK_PHYSICAL_DEVICE_TYPE_RANGE_SIZE = VkPhysicalDeviceType.VK_PHYSICAL_DEVICE_TYPE_RANGE_SIZE
VK_PHYSICAL_DEVICE_TYPE_END_RANGE = VkPhysicalDeviceType.VK_PHYSICAL_DEVICE_TYPE_END_RANGE
VK_PHYSICAL_DEVICE_TYPE_BEGIN_RANGE = VkPhysicalDeviceType.VK_PHYSICAL_DEVICE_TYPE_BEGIN_RANGE
VK_PHYSICAL_DEVICE_TYPE_CPU = VkPhysicalDeviceType.VK_PHYSICAL_DEVICE_TYPE_CPU
VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU = VkPhysicalDeviceType.VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU
VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU = VkPhysicalDeviceType.VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU
VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU = VkPhysicalDeviceType.VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU
VK_PHYSICAL_DEVICE_TYPE_OTHER = VkPhysicalDeviceType.VK_PHYSICAL_DEVICE_TYPE_OTHER

class VkQueryType:
	VK_QUERY_TYPE_MAX_ENUM = 2147483647
	VK_QUERY_TYPE_RANGE_SIZE = 3
	VK_QUERY_TYPE_END_RANGE = 2
	VK_QUERY_TYPE_BEGIN_RANGE = 0
	VK_QUERY_TYPE_TIMESTAMP = 2
	VK_QUERY_TYPE_PIPELINE_STATISTICS = 1
	VK_QUERY_TYPE_OCCLUSION = 0
	
VK_QUERY_TYPE_MAX_ENUM = VkQueryType.VK_QUERY_TYPE_MAX_ENUM
VK_QUERY_TYPE_RANGE_SIZE = VkQueryType.VK_QUERY_TYPE_RANGE_SIZE
VK_QUERY_TYPE_END_RANGE = VkQueryType.VK_QUERY_TYPE_END_RANGE
VK_QUERY_TYPE_BEGIN_RANGE = VkQueryType.VK_QUERY_TYPE_BEGIN_RANGE
VK_QUERY_TYPE_TIMESTAMP = VkQueryType.VK_QUERY_TYPE_TIMESTAMP
VK_QUERY_TYPE_PIPELINE_STATISTICS = VkQueryType.VK_QUERY_TYPE_PIPELINE_STATISTICS
VK_QUERY_TYPE_OCCLUSION = VkQueryType.VK_QUERY_TYPE_OCCLUSION

class VkSharingMode:
	VK_SHARING_MODE_MAX_ENUM = 2147483647
	VK_SHARING_MODE_RANGE_SIZE = 2
	VK_SHARING_MODE_END_RANGE = 1
	VK_SHARING_MODE_BEGIN_RANGE = 0
	VK_SHARING_MODE_CONCURRENT = 1
	VK_SHARING_MODE_EXCLUSIVE = 0
	
VK_SHARING_MODE_MAX_ENUM = VkSharingMode.VK_SHARING_MODE_MAX_ENUM
VK_SHARING_MODE_RANGE_SIZE = VkSharingMode.VK_SHARING_MODE_RANGE_SIZE
VK_SHARING_MODE_END_RANGE = VkSharingMode.VK_SHARING_MODE_END_RANGE
VK_SHARING_MODE_BEGIN_RANGE = VkSharingMode.VK_SHARING_MODE_BEGIN_RANGE
VK_SHARING_MODE_CONCURRENT = VkSharingMode.VK_SHARING_MODE_CONCURRENT
VK_SHARING_MODE_EXCLUSIVE = VkSharingMode.VK_SHARING_MODE_EXCLUSIVE

class VkImageLayout:
	VK_IMAGE_LAYOUT_MAX_ENUM = 2147483647
	VK_IMAGE_LAYOUT_RANGE_SIZE = 9
	VK_IMAGE_LAYOUT_END_RANGE = 8
	VK_IMAGE_LAYOUT_BEGIN_RANGE = 0
	VK_IMAGE_LAYOUT_PRESENT_SRC_KHR = 1000001002
	VK_IMAGE_LAYOUT_PREINITIALIZED = 8
	VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL = 7
	VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL = 6
	VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL = 5
	VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL = 4
	VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL = 3
	VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL = 2
	VK_IMAGE_LAYOUT_GENERAL = 1
	VK_IMAGE_LAYOUT_UNDEFINED = 0
	
VK_IMAGE_LAYOUT_MAX_ENUM = VkImageLayout.VK_IMAGE_LAYOUT_MAX_ENUM
VK_IMAGE_LAYOUT_RANGE_SIZE = VkImageLayout.VK_IMAGE_LAYOUT_RANGE_SIZE
VK_IMAGE_LAYOUT_END_RANGE = VkImageLayout.VK_IMAGE_LAYOUT_END_RANGE
VK_IMAGE_LAYOUT_BEGIN_RANGE = VkImageLayout.VK_IMAGE_LAYOUT_BEGIN_RANGE
VK_IMAGE_LAYOUT_PRESENT_SRC_KHR = VkImageLayout.VK_IMAGE_LAYOUT_PRESENT_SRC_KHR
VK_IMAGE_LAYOUT_PREINITIALIZED = VkImageLayout.VK_IMAGE_LAYOUT_PREINITIALIZED
VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL = VkImageLayout.VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL
VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL = VkImageLayout.VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL
VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL = VkImageLayout.VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL
VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL = VkImageLayout.VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL
VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL = VkImageLayout.VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL
VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL = VkImageLayout.VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL
VK_IMAGE_LAYOUT_GENERAL = VkImageLayout.VK_IMAGE_LAYOUT_GENERAL
VK_IMAGE_LAYOUT_UNDEFINED = VkImageLayout.VK_IMAGE_LAYOUT_UNDEFINED

class VkImageViewType:
	VK_IMAGE_VIEW_TYPE_MAX_ENUM = 2147483647
	VK_IMAGE_VIEW_TYPE_RANGE_SIZE = 7
	VK_IMAGE_VIEW_TYPE_END_RANGE = 6
	VK_IMAGE_VIEW_TYPE_BEGIN_RANGE = 0
	VK_IMAGE_VIEW_TYPE_CUBE_ARRAY = 6
	VK_IMAGE_VIEW_TYPE_2D_ARRAY = 5
	VK_IMAGE_VIEW_TYPE_1D_ARRAY = 4
	VK_IMAGE_VIEW_TYPE_CUBE = 3
	VK_IMAGE_VIEW_TYPE_3D = 2
	VK_IMAGE_VIEW_TYPE_2D = 1
	VK_IMAGE_VIEW_TYPE_1D = 0
	
VK_IMAGE_VIEW_TYPE_MAX_ENUM = VkImageViewType.VK_IMAGE_VIEW_TYPE_MAX_ENUM
VK_IMAGE_VIEW_TYPE_RANGE_SIZE = VkImageViewType.VK_IMAGE_VIEW_TYPE_RANGE_SIZE
VK_IMAGE_VIEW_TYPE_END_RANGE = VkImageViewType.VK_IMAGE_VIEW_TYPE_END_RANGE
VK_IMAGE_VIEW_TYPE_BEGIN_RANGE = VkImageViewType.VK_IMAGE_VIEW_TYPE_BEGIN_RANGE
VK_IMAGE_VIEW_TYPE_CUBE_ARRAY = VkImageViewType.VK_IMAGE_VIEW_TYPE_CUBE_ARRAY
VK_IMAGE_VIEW_TYPE_2D_ARRAY = VkImageViewType.VK_IMAGE_VIEW_TYPE_2D_ARRAY
VK_IMAGE_VIEW_TYPE_1D_ARRAY = VkImageViewType.VK_IMAGE_VIEW_TYPE_1D_ARRAY
VK_IMAGE_VIEW_TYPE_CUBE = VkImageViewType.VK_IMAGE_VIEW_TYPE_CUBE
VK_IMAGE_VIEW_TYPE_3D = VkImageViewType.VK_IMAGE_VIEW_TYPE_3D
VK_IMAGE_VIEW_TYPE_2D = VkImageViewType.VK_IMAGE_VIEW_TYPE_2D
VK_IMAGE_VIEW_TYPE_1D = VkImageViewType.VK_IMAGE_VIEW_TYPE_1D

class VkComponentSwizzle:
	VK_COMPONENT_SWIZZLE_MAX_ENUM = 2147483647
	VK_COMPONENT_SWIZZLE_RANGE_SIZE = 7
	VK_COMPONENT_SWIZZLE_END_RANGE = 6
	VK_COMPONENT_SWIZZLE_BEGIN_RANGE = 0
	VK_COMPONENT_SWIZZLE_A = 6
	VK_COMPONENT_SWIZZLE_B = 5
	VK_COMPONENT_SWIZZLE_G = 4
	VK_COMPONENT_SWIZZLE_R = 3
	VK_COMPONENT_SWIZZLE_ONE = 2
	VK_COMPONENT_SWIZZLE_ZERO = 1
	VK_COMPONENT_SWIZZLE_IDENTITY = 0
	
VK_COMPONENT_SWIZZLE_MAX_ENUM = VkComponentSwizzle.VK_COMPONENT_SWIZZLE_MAX_ENUM
VK_COMPONENT_SWIZZLE_RANGE_SIZE = VkComponentSwizzle.VK_COMPONENT_SWIZZLE_RANGE_SIZE
VK_COMPONENT_SWIZZLE_END_RANGE = VkComponentSwizzle.VK_COMPONENT_SWIZZLE_END_RANGE
VK_COMPONENT_SWIZZLE_BEGIN_RANGE = VkComponentSwizzle.VK_COMPONENT_SWIZZLE_BEGIN_RANGE
VK_COMPONENT_SWIZZLE_A = VkComponentSwizzle.VK_COMPONENT_SWIZZLE_A
VK_COMPONENT_SWIZZLE_B = VkComponentSwizzle.VK_COMPONENT_SWIZZLE_B
VK_COMPONENT_SWIZZLE_G = VkComponentSwizzle.VK_COMPONENT_SWIZZLE_G
VK_COMPONENT_SWIZZLE_R = VkComponentSwizzle.VK_COMPONENT_SWIZZLE_R
VK_COMPONENT_SWIZZLE_ONE = VkComponentSwizzle.VK_COMPONENT_SWIZZLE_ONE
VK_COMPONENT_SWIZZLE_ZERO = VkComponentSwizzle.VK_COMPONENT_SWIZZLE_ZERO
VK_COMPONENT_SWIZZLE_IDENTITY = VkComponentSwizzle.VK_COMPONENT_SWIZZLE_IDENTITY

class VkVertexInputRate:
	VK_VERTEX_INPUT_RATE_MAX_ENUM = 2147483647
	VK_VERTEX_INPUT_RATE_RANGE_SIZE = 2
	VK_VERTEX_INPUT_RATE_END_RANGE = 1
	VK_VERTEX_INPUT_RATE_BEGIN_RANGE = 0
	VK_VERTEX_INPUT_RATE_INSTANCE = 1
	VK_VERTEX_INPUT_RATE_VERTEX = 0
	
VK_VERTEX_INPUT_RATE_MAX_ENUM = VkVertexInputRate.VK_VERTEX_INPUT_RATE_MAX_ENUM
VK_VERTEX_INPUT_RATE_RANGE_SIZE = VkVertexInputRate.VK_VERTEX_INPUT_RATE_RANGE_SIZE
VK_VERTEX_INPUT_RATE_END_RANGE = VkVertexInputRate.VK_VERTEX_INPUT_RATE_END_RANGE
VK_VERTEX_INPUT_RATE_BEGIN_RANGE = VkVertexInputRate.VK_VERTEX_INPUT_RATE_BEGIN_RANGE
VK_VERTEX_INPUT_RATE_INSTANCE = VkVertexInputRate.VK_VERTEX_INPUT_RATE_INSTANCE
VK_VERTEX_INPUT_RATE_VERTEX = VkVertexInputRate.VK_VERTEX_INPUT_RATE_VERTEX

class VkPrimitiveTopology:
	VK_PRIMITIVE_TOPOLOGY_MAX_ENUM = 2147483647
	VK_PRIMITIVE_TOPOLOGY_RANGE_SIZE = 11
	VK_PRIMITIVE_TOPOLOGY_END_RANGE = 10
	VK_PRIMITIVE_TOPOLOGY_BEGIN_RANGE = 0
	VK_PRIMITIVE_TOPOLOGY_PATCH_LIST = 10
	VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY = 9
	VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY = 8
	VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY = 7
	VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY = 6
	VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN = 5
	VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP = 4
	VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST = 3
	VK_PRIMITIVE_TOPOLOGY_LINE_STRIP = 2
	VK_PRIMITIVE_TOPOLOGY_LINE_LIST = 1
	VK_PRIMITIVE_TOPOLOGY_POINT_LIST = 0
	
VK_PRIMITIVE_TOPOLOGY_MAX_ENUM = VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_MAX_ENUM
VK_PRIMITIVE_TOPOLOGY_RANGE_SIZE = VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_RANGE_SIZE
VK_PRIMITIVE_TOPOLOGY_END_RANGE = VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_END_RANGE
VK_PRIMITIVE_TOPOLOGY_BEGIN_RANGE = VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_BEGIN_RANGE
VK_PRIMITIVE_TOPOLOGY_PATCH_LIST = VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_PATCH_LIST
VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY = VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY
VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY = VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY
VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY = VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY
VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY = VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY
VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN = VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN
VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP = VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP
VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST = VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST
VK_PRIMITIVE_TOPOLOGY_LINE_STRIP = VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_LINE_STRIP
VK_PRIMITIVE_TOPOLOGY_LINE_LIST = VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_LINE_LIST
VK_PRIMITIVE_TOPOLOGY_POINT_LIST = VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_POINT_LIST

class VkPolygonMode:
	VK_POLYGON_MODE_MAX_ENUM = 2147483647
	VK_POLYGON_MODE_RANGE_SIZE = 3
	VK_POLYGON_MODE_END_RANGE = 2
	VK_POLYGON_MODE_BEGIN_RANGE = 0
	VK_POLYGON_MODE_POINT = 2
	VK_POLYGON_MODE_LINE = 1
	VK_POLYGON_MODE_FILL = 0
	
VK_POLYGON_MODE_MAX_ENUM = VkPolygonMode.VK_POLYGON_MODE_MAX_ENUM
VK_POLYGON_MODE_RANGE_SIZE = VkPolygonMode.VK_POLYGON_MODE_RANGE_SIZE
VK_POLYGON_MODE_END_RANGE = VkPolygonMode.VK_POLYGON_MODE_END_RANGE
VK_POLYGON_MODE_BEGIN_RANGE = VkPolygonMode.VK_POLYGON_MODE_BEGIN_RANGE
VK_POLYGON_MODE_POINT = VkPolygonMode.VK_POLYGON_MODE_POINT
VK_POLYGON_MODE_LINE = VkPolygonMode.VK_POLYGON_MODE_LINE
VK_POLYGON_MODE_FILL = VkPolygonMode.VK_POLYGON_MODE_FILL

class VkFrontFace:
	VK_FRONT_FACE_MAX_ENUM = 2147483647
	VK_FRONT_FACE_RANGE_SIZE = 2
	VK_FRONT_FACE_END_RANGE = 1
	VK_FRONT_FACE_BEGIN_RANGE = 0
	VK_FRONT_FACE_CLOCKWISE = 1
	VK_FRONT_FACE_COUNTER_CLOCKWISE = 0
	
VK_FRONT_FACE_MAX_ENUM = VkFrontFace.VK_FRONT_FACE_MAX_ENUM
VK_FRONT_FACE_RANGE_SIZE = VkFrontFace.VK_FRONT_FACE_RANGE_SIZE
VK_FRONT_FACE_END_RANGE = VkFrontFace.VK_FRONT_FACE_END_RANGE
VK_FRONT_FACE_BEGIN_RANGE = VkFrontFace.VK_FRONT_FACE_BEGIN_RANGE
VK_FRONT_FACE_CLOCKWISE = VkFrontFace.VK_FRONT_FACE_CLOCKWISE
VK_FRONT_FACE_COUNTER_CLOCKWISE = VkFrontFace.VK_FRONT_FACE_COUNTER_CLOCKWISE

class VkCompareOp:
	VK_COMPARE_OP_MAX_ENUM = 2147483647
	VK_COMPARE_OP_RANGE_SIZE = 8
	VK_COMPARE_OP_END_RANGE = 7
	VK_COMPARE_OP_BEGIN_RANGE = 0
	VK_COMPARE_OP_ALWAYS = 7
	VK_COMPARE_OP_GREATER_OR_EQUAL = 6
	VK_COMPARE_OP_NOT_EQUAL = 5
	VK_COMPARE_OP_GREATER = 4
	VK_COMPARE_OP_LESS_OR_EQUAL = 3
	VK_COMPARE_OP_EQUAL = 2
	VK_COMPARE_OP_LESS = 1
	VK_COMPARE_OP_NEVER = 0
	
VK_COMPARE_OP_MAX_ENUM = VkCompareOp.VK_COMPARE_OP_MAX_ENUM
VK_COMPARE_OP_RANGE_SIZE = VkCompareOp.VK_COMPARE_OP_RANGE_SIZE
VK_COMPARE_OP_END_RANGE = VkCompareOp.VK_COMPARE_OP_END_RANGE
VK_COMPARE_OP_BEGIN_RANGE = VkCompareOp.VK_COMPARE_OP_BEGIN_RANGE
VK_COMPARE_OP_ALWAYS = VkCompareOp.VK_COMPARE_OP_ALWAYS
VK_COMPARE_OP_GREATER_OR_EQUAL = VkCompareOp.VK_COMPARE_OP_GREATER_OR_EQUAL
VK_COMPARE_OP_NOT_EQUAL = VkCompareOp.VK_COMPARE_OP_NOT_EQUAL
VK_COMPARE_OP_GREATER = VkCompareOp.VK_COMPARE_OP_GREATER
VK_COMPARE_OP_LESS_OR_EQUAL = VkCompareOp.VK_COMPARE_OP_LESS_OR_EQUAL
VK_COMPARE_OP_EQUAL = VkCompareOp.VK_COMPARE_OP_EQUAL
VK_COMPARE_OP_LESS = VkCompareOp.VK_COMPARE_OP_LESS
VK_COMPARE_OP_NEVER = VkCompareOp.VK_COMPARE_OP_NEVER

class VkStencilOp:
	VK_STENCIL_OP_MAX_ENUM = 2147483647
	VK_STENCIL_OP_RANGE_SIZE = 8
	VK_STENCIL_OP_END_RANGE = 7
	VK_STENCIL_OP_BEGIN_RANGE = 0
	VK_STENCIL_OP_DECREMENT_AND_WRAP = 7
	VK_STENCIL_OP_INCREMENT_AND_WRAP = 6
	VK_STENCIL_OP_INVERT = 5
	VK_STENCIL_OP_DECREMENT_AND_CLAMP = 4
	VK_STENCIL_OP_INCREMENT_AND_CLAMP = 3
	VK_STENCIL_OP_REPLACE = 2
	VK_STENCIL_OP_ZERO = 1
	VK_STENCIL_OP_KEEP = 0
	
VK_STENCIL_OP_MAX_ENUM = VkStencilOp.VK_STENCIL_OP_MAX_ENUM
VK_STENCIL_OP_RANGE_SIZE = VkStencilOp.VK_STENCIL_OP_RANGE_SIZE
VK_STENCIL_OP_END_RANGE = VkStencilOp.VK_STENCIL_OP_END_RANGE
VK_STENCIL_OP_BEGIN_RANGE = VkStencilOp.VK_STENCIL_OP_BEGIN_RANGE
VK_STENCIL_OP_DECREMENT_AND_WRAP = VkStencilOp.VK_STENCIL_OP_DECREMENT_AND_WRAP
VK_STENCIL_OP_INCREMENT_AND_WRAP = VkStencilOp.VK_STENCIL_OP_INCREMENT_AND_WRAP
VK_STENCIL_OP_INVERT = VkStencilOp.VK_STENCIL_OP_INVERT
VK_STENCIL_OP_DECREMENT_AND_CLAMP = VkStencilOp.VK_STENCIL_OP_DECREMENT_AND_CLAMP
VK_STENCIL_OP_INCREMENT_AND_CLAMP = VkStencilOp.VK_STENCIL_OP_INCREMENT_AND_CLAMP
VK_STENCIL_OP_REPLACE = VkStencilOp.VK_STENCIL_OP_REPLACE
VK_STENCIL_OP_ZERO = VkStencilOp.VK_STENCIL_OP_ZERO
VK_STENCIL_OP_KEEP = VkStencilOp.VK_STENCIL_OP_KEEP

class VkLogicOp:
	VK_LOGIC_OP_MAX_ENUM = 2147483647
	VK_LOGIC_OP_RANGE_SIZE = 16
	VK_LOGIC_OP_END_RANGE = 15
	VK_LOGIC_OP_BEGIN_RANGE = 0
	VK_LOGIC_OP_SET = 15
	VK_LOGIC_OP_NAND = 14
	VK_LOGIC_OP_OR_INVERTED = 13
	VK_LOGIC_OP_COPY_INVERTED = 12
	VK_LOGIC_OP_OR_REVERSE = 11
	VK_LOGIC_OP_INVERT = 10
	VK_LOGIC_OP_EQUIVALENT = 9
	VK_LOGIC_OP_NOR = 8
	VK_LOGIC_OP_OR = 7
	VK_LOGIC_OP_XOR = 6
	VK_LOGIC_OP_NO_OP = 5
	VK_LOGIC_OP_AND_INVERTED = 4
	VK_LOGIC_OP_COPY = 3
	VK_LOGIC_OP_AND_REVERSE = 2
	VK_LOGIC_OP_AND = 1
	VK_LOGIC_OP_CLEAR = 0
	
VK_LOGIC_OP_MAX_ENUM = VkLogicOp.VK_LOGIC_OP_MAX_ENUM
VK_LOGIC_OP_RANGE_SIZE = VkLogicOp.VK_LOGIC_OP_RANGE_SIZE
VK_LOGIC_OP_END_RANGE = VkLogicOp.VK_LOGIC_OP_END_RANGE
VK_LOGIC_OP_BEGIN_RANGE = VkLogicOp.VK_LOGIC_OP_BEGIN_RANGE
VK_LOGIC_OP_SET = VkLogicOp.VK_LOGIC_OP_SET
VK_LOGIC_OP_NAND = VkLogicOp.VK_LOGIC_OP_NAND
VK_LOGIC_OP_OR_INVERTED = VkLogicOp.VK_LOGIC_OP_OR_INVERTED
VK_LOGIC_OP_COPY_INVERTED = VkLogicOp.VK_LOGIC_OP_COPY_INVERTED
VK_LOGIC_OP_OR_REVERSE = VkLogicOp.VK_LOGIC_OP_OR_REVERSE
VK_LOGIC_OP_INVERT = VkLogicOp.VK_LOGIC_OP_INVERT
VK_LOGIC_OP_EQUIVALENT = VkLogicOp.VK_LOGIC_OP_EQUIVALENT
VK_LOGIC_OP_NOR = VkLogicOp.VK_LOGIC_OP_NOR
VK_LOGIC_OP_OR = VkLogicOp.VK_LOGIC_OP_OR
VK_LOGIC_OP_XOR = VkLogicOp.VK_LOGIC_OP_XOR
VK_LOGIC_OP_NO_OP = VkLogicOp.VK_LOGIC_OP_NO_OP
VK_LOGIC_OP_AND_INVERTED = VkLogicOp.VK_LOGIC_OP_AND_INVERTED
VK_LOGIC_OP_COPY = VkLogicOp.VK_LOGIC_OP_COPY
VK_LOGIC_OP_AND_REVERSE = VkLogicOp.VK_LOGIC_OP_AND_REVERSE
VK_LOGIC_OP_AND = VkLogicOp.VK_LOGIC_OP_AND
VK_LOGIC_OP_CLEAR = VkLogicOp.VK_LOGIC_OP_CLEAR

class VkBlendFactor:
	VK_BLEND_FACTOR_MAX_ENUM = 2147483647
	VK_BLEND_FACTOR_RANGE_SIZE = 19
	VK_BLEND_FACTOR_END_RANGE = 18
	VK_BLEND_FACTOR_BEGIN_RANGE = 0
	VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA = 18
	VK_BLEND_FACTOR_SRC1_ALPHA = 17
	VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR = 16
	VK_BLEND_FACTOR_SRC1_COLOR = 15
	VK_BLEND_FACTOR_SRC_ALPHA_SATURATE = 14
	VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA = 13
	VK_BLEND_FACTOR_CONSTANT_ALPHA = 12
	VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR = 11
	VK_BLEND_FACTOR_CONSTANT_COLOR = 10
	VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA = 9
	VK_BLEND_FACTOR_DST_ALPHA = 8
	VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA = 7
	VK_BLEND_FACTOR_SRC_ALPHA = 6
	VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR = 5
	VK_BLEND_FACTOR_DST_COLOR = 4
	VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR = 3
	VK_BLEND_FACTOR_SRC_COLOR = 2
	VK_BLEND_FACTOR_ONE = 1
	VK_BLEND_FACTOR_ZERO = 0
	
VK_BLEND_FACTOR_MAX_ENUM = VkBlendFactor.VK_BLEND_FACTOR_MAX_ENUM
VK_BLEND_FACTOR_RANGE_SIZE = VkBlendFactor.VK_BLEND_FACTOR_RANGE_SIZE
VK_BLEND_FACTOR_END_RANGE = VkBlendFactor.VK_BLEND_FACTOR_END_RANGE
VK_BLEND_FACTOR_BEGIN_RANGE = VkBlendFactor.VK_BLEND_FACTOR_BEGIN_RANGE
VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA = VkBlendFactor.VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA
VK_BLEND_FACTOR_SRC1_ALPHA = VkBlendFactor.VK_BLEND_FACTOR_SRC1_ALPHA
VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR = VkBlendFactor.VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR
VK_BLEND_FACTOR_SRC1_COLOR = VkBlendFactor.VK_BLEND_FACTOR_SRC1_COLOR
VK_BLEND_FACTOR_SRC_ALPHA_SATURATE = VkBlendFactor.VK_BLEND_FACTOR_SRC_ALPHA_SATURATE
VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA = VkBlendFactor.VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA
VK_BLEND_FACTOR_CONSTANT_ALPHA = VkBlendFactor.VK_BLEND_FACTOR_CONSTANT_ALPHA
VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR = VkBlendFactor.VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR
VK_BLEND_FACTOR_CONSTANT_COLOR = VkBlendFactor.VK_BLEND_FACTOR_CONSTANT_COLOR
VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA = VkBlendFactor.VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA
VK_BLEND_FACTOR_DST_ALPHA = VkBlendFactor.VK_BLEND_FACTOR_DST_ALPHA
VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA = VkBlendFactor.VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA
VK_BLEND_FACTOR_SRC_ALPHA = VkBlendFactor.VK_BLEND_FACTOR_SRC_ALPHA
VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR = VkBlendFactor.VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR
VK_BLEND_FACTOR_DST_COLOR = VkBlendFactor.VK_BLEND_FACTOR_DST_COLOR
VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR = VkBlendFactor.VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR
VK_BLEND_FACTOR_SRC_COLOR = VkBlendFactor.VK_BLEND_FACTOR_SRC_COLOR
VK_BLEND_FACTOR_ONE = VkBlendFactor.VK_BLEND_FACTOR_ONE
VK_BLEND_FACTOR_ZERO = VkBlendFactor.VK_BLEND_FACTOR_ZERO

class VkBlendOp:
	VK_BLEND_OP_MAX_ENUM = 2147483647
	VK_BLEND_OP_RANGE_SIZE = 5
	VK_BLEND_OP_END_RANGE = 4
	VK_BLEND_OP_BEGIN_RANGE = 0
	VK_BLEND_OP_MAX = 4
	VK_BLEND_OP_MIN = 3
	VK_BLEND_OP_REVERSE_SUBTRACT = 2
	VK_BLEND_OP_SUBTRACT = 1
	VK_BLEND_OP_ADD = 0
	
VK_BLEND_OP_MAX_ENUM = VkBlendOp.VK_BLEND_OP_MAX_ENUM
VK_BLEND_OP_RANGE_SIZE = VkBlendOp.VK_BLEND_OP_RANGE_SIZE
VK_BLEND_OP_END_RANGE = VkBlendOp.VK_BLEND_OP_END_RANGE
VK_BLEND_OP_BEGIN_RANGE = VkBlendOp.VK_BLEND_OP_BEGIN_RANGE
VK_BLEND_OP_MAX = VkBlendOp.VK_BLEND_OP_MAX
VK_BLEND_OP_MIN = VkBlendOp.VK_BLEND_OP_MIN
VK_BLEND_OP_REVERSE_SUBTRACT = VkBlendOp.VK_BLEND_OP_REVERSE_SUBTRACT
VK_BLEND_OP_SUBTRACT = VkBlendOp.VK_BLEND_OP_SUBTRACT
VK_BLEND_OP_ADD = VkBlendOp.VK_BLEND_OP_ADD

class VkDynamicState:
	VK_DYNAMIC_STATE_MAX_ENUM = 2147483647
	VK_DYNAMIC_STATE_RANGE_SIZE = 9
	VK_DYNAMIC_STATE_END_RANGE = 8
	VK_DYNAMIC_STATE_BEGIN_RANGE = 0
	VK_DYNAMIC_STATE_STENCIL_REFERENCE = 8
	VK_DYNAMIC_STATE_STENCIL_WRITE_MASK = 7
	VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK = 6
	VK_DYNAMIC_STATE_DEPTH_BOUNDS = 5
	VK_DYNAMIC_STATE_BLEND_CONSTANTS = 4
	VK_DYNAMIC_STATE_DEPTH_BIAS = 3
	VK_DYNAMIC_STATE_LINE_WIDTH = 2
	VK_DYNAMIC_STATE_SCISSOR = 1
	VK_DYNAMIC_STATE_VIEWPORT = 0
	
VK_DYNAMIC_STATE_MAX_ENUM = VkDynamicState.VK_DYNAMIC_STATE_MAX_ENUM
VK_DYNAMIC_STATE_RANGE_SIZE = VkDynamicState.VK_DYNAMIC_STATE_RANGE_SIZE
VK_DYNAMIC_STATE_END_RANGE = VkDynamicState.VK_DYNAMIC_STATE_END_RANGE
VK_DYNAMIC_STATE_BEGIN_RANGE = VkDynamicState.VK_DYNAMIC_STATE_BEGIN_RANGE
VK_DYNAMIC_STATE_STENCIL_REFERENCE = VkDynamicState.VK_DYNAMIC_STATE_STENCIL_REFERENCE
VK_DYNAMIC_STATE_STENCIL_WRITE_MASK = VkDynamicState.VK_DYNAMIC_STATE_STENCIL_WRITE_MASK
VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK = VkDynamicState.VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK
VK_DYNAMIC_STATE_DEPTH_BOUNDS = VkDynamicState.VK_DYNAMIC_STATE_DEPTH_BOUNDS
VK_DYNAMIC_STATE_BLEND_CONSTANTS = VkDynamicState.VK_DYNAMIC_STATE_BLEND_CONSTANTS
VK_DYNAMIC_STATE_DEPTH_BIAS = VkDynamicState.VK_DYNAMIC_STATE_DEPTH_BIAS
VK_DYNAMIC_STATE_LINE_WIDTH = VkDynamicState.VK_DYNAMIC_STATE_LINE_WIDTH
VK_DYNAMIC_STATE_SCISSOR = VkDynamicState.VK_DYNAMIC_STATE_SCISSOR
VK_DYNAMIC_STATE_VIEWPORT = VkDynamicState.VK_DYNAMIC_STATE_VIEWPORT

class VkFilter:
	VK_FILTER_MAX_ENUM = 2147483647
	VK_FILTER_RANGE_SIZE = 2
	VK_FILTER_END_RANGE = 1
	VK_FILTER_BEGIN_RANGE = 0
	VK_FILTER_CUBIC_IMG = 1000015000
	VK_FILTER_LINEAR = 1
	VK_FILTER_NEAREST = 0
	
VK_FILTER_MAX_ENUM = VkFilter.VK_FILTER_MAX_ENUM
VK_FILTER_RANGE_SIZE = VkFilter.VK_FILTER_RANGE_SIZE
VK_FILTER_END_RANGE = VkFilter.VK_FILTER_END_RANGE
VK_FILTER_BEGIN_RANGE = VkFilter.VK_FILTER_BEGIN_RANGE
VK_FILTER_CUBIC_IMG = VkFilter.VK_FILTER_CUBIC_IMG
VK_FILTER_LINEAR = VkFilter.VK_FILTER_LINEAR
VK_FILTER_NEAREST = VkFilter.VK_FILTER_NEAREST

class VkSamplerMipmapMode:
	VK_SAMPLER_MIPMAP_MODE_MAX_ENUM = 2147483647
	VK_SAMPLER_MIPMAP_MODE_RANGE_SIZE = 2
	VK_SAMPLER_MIPMAP_MODE_END_RANGE = 1
	VK_SAMPLER_MIPMAP_MODE_BEGIN_RANGE = 0
	VK_SAMPLER_MIPMAP_MODE_LINEAR = 1
	VK_SAMPLER_MIPMAP_MODE_NEAREST = 0
	
VK_SAMPLER_MIPMAP_MODE_MAX_ENUM = VkSamplerMipmapMode.VK_SAMPLER_MIPMAP_MODE_MAX_ENUM
VK_SAMPLER_MIPMAP_MODE_RANGE_SIZE = VkSamplerMipmapMode.VK_SAMPLER_MIPMAP_MODE_RANGE_SIZE
VK_SAMPLER_MIPMAP_MODE_END_RANGE = VkSamplerMipmapMode.VK_SAMPLER_MIPMAP_MODE_END_RANGE
VK_SAMPLER_MIPMAP_MODE_BEGIN_RANGE = VkSamplerMipmapMode.VK_SAMPLER_MIPMAP_MODE_BEGIN_RANGE
VK_SAMPLER_MIPMAP_MODE_LINEAR = VkSamplerMipmapMode.VK_SAMPLER_MIPMAP_MODE_LINEAR
VK_SAMPLER_MIPMAP_MODE_NEAREST = VkSamplerMipmapMode.VK_SAMPLER_MIPMAP_MODE_NEAREST

class VkSamplerAddressMode:
	VK_SAMPLER_ADDRESS_MODE_MAX_ENUM = 2147483647
	VK_SAMPLER_ADDRESS_MODE_RANGE_SIZE = 4
	VK_SAMPLER_ADDRESS_MODE_END_RANGE = 3
	VK_SAMPLER_ADDRESS_MODE_BEGIN_RANGE = 0
	VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE = 4
	VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER = 3
	VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE = 2
	VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT = 1
	VK_SAMPLER_ADDRESS_MODE_REPEAT = 0
	
VK_SAMPLER_ADDRESS_MODE_MAX_ENUM = VkSamplerAddressMode.VK_SAMPLER_ADDRESS_MODE_MAX_ENUM
VK_SAMPLER_ADDRESS_MODE_RANGE_SIZE = VkSamplerAddressMode.VK_SAMPLER_ADDRESS_MODE_RANGE_SIZE
VK_SAMPLER_ADDRESS_MODE_END_RANGE = VkSamplerAddressMode.VK_SAMPLER_ADDRESS_MODE_END_RANGE
VK_SAMPLER_ADDRESS_MODE_BEGIN_RANGE = VkSamplerAddressMode.VK_SAMPLER_ADDRESS_MODE_BEGIN_RANGE
VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE = VkSamplerAddressMode.VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE
VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER = VkSamplerAddressMode.VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER
VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE = VkSamplerAddressMode.VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE
VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT = VkSamplerAddressMode.VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT
VK_SAMPLER_ADDRESS_MODE_REPEAT = VkSamplerAddressMode.VK_SAMPLER_ADDRESS_MODE_REPEAT

class VkBorderColor:
	VK_BORDER_COLOR_MAX_ENUM = 2147483647
	VK_BORDER_COLOR_RANGE_SIZE = 6
	VK_BORDER_COLOR_END_RANGE = 5
	VK_BORDER_COLOR_BEGIN_RANGE = 0
	VK_BORDER_COLOR_INT_OPAQUE_WHITE = 5
	VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE = 4
	VK_BORDER_COLOR_INT_OPAQUE_BLACK = 3
	VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK = 2
	VK_BORDER_COLOR_INT_TRANSPARENT_BLACK = 1
	VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK = 0
	
VK_BORDER_COLOR_MAX_ENUM = VkBorderColor.VK_BORDER_COLOR_MAX_ENUM
VK_BORDER_COLOR_RANGE_SIZE = VkBorderColor.VK_BORDER_COLOR_RANGE_SIZE
VK_BORDER_COLOR_END_RANGE = VkBorderColor.VK_BORDER_COLOR_END_RANGE
VK_BORDER_COLOR_BEGIN_RANGE = VkBorderColor.VK_BORDER_COLOR_BEGIN_RANGE
VK_BORDER_COLOR_INT_OPAQUE_WHITE = VkBorderColor.VK_BORDER_COLOR_INT_OPAQUE_WHITE
VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE = VkBorderColor.VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE
VK_BORDER_COLOR_INT_OPAQUE_BLACK = VkBorderColor.VK_BORDER_COLOR_INT_OPAQUE_BLACK
VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK = VkBorderColor.VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK
VK_BORDER_COLOR_INT_TRANSPARENT_BLACK = VkBorderColor.VK_BORDER_COLOR_INT_TRANSPARENT_BLACK
VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK = VkBorderColor.VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK

class VkDescriptorType:
	VK_DESCRIPTOR_TYPE_MAX_ENUM = 2147483647
	VK_DESCRIPTOR_TYPE_RANGE_SIZE = 11
	VK_DESCRIPTOR_TYPE_END_RANGE = 10
	VK_DESCRIPTOR_TYPE_BEGIN_RANGE = 0
	VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT = 10
	VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC = 9
	VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC = 8
	VK_DESCRIPTOR_TYPE_STORAGE_BUFFER = 7
	VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER = 6
	VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER = 5
	VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER = 4
	VK_DESCRIPTOR_TYPE_STORAGE_IMAGE = 3
	VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE = 2
	VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER = 1
	VK_DESCRIPTOR_TYPE_SAMPLER = 0
	
VK_DESCRIPTOR_TYPE_MAX_ENUM = VkDescriptorType.VK_DESCRIPTOR_TYPE_MAX_ENUM
VK_DESCRIPTOR_TYPE_RANGE_SIZE = VkDescriptorType.VK_DESCRIPTOR_TYPE_RANGE_SIZE
VK_DESCRIPTOR_TYPE_END_RANGE = VkDescriptorType.VK_DESCRIPTOR_TYPE_END_RANGE
VK_DESCRIPTOR_TYPE_BEGIN_RANGE = VkDescriptorType.VK_DESCRIPTOR_TYPE_BEGIN_RANGE
VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT = VkDescriptorType.VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT
VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC = VkDescriptorType.VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC
VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC = VkDescriptorType.VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC
VK_DESCRIPTOR_TYPE_STORAGE_BUFFER = VkDescriptorType.VK_DESCRIPTOR_TYPE_STORAGE_BUFFER
VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER = VkDescriptorType.VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER
VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER = VkDescriptorType.VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER
VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER = VkDescriptorType.VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER
VK_DESCRIPTOR_TYPE_STORAGE_IMAGE = VkDescriptorType.VK_DESCRIPTOR_TYPE_STORAGE_IMAGE
VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE = VkDescriptorType.VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE
VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER = VkDescriptorType.VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER
VK_DESCRIPTOR_TYPE_SAMPLER = VkDescriptorType.VK_DESCRIPTOR_TYPE_SAMPLER

class VkAttachmentLoadOp:
	VK_ATTACHMENT_LOAD_OP_MAX_ENUM = 2147483647
	VK_ATTACHMENT_LOAD_OP_RANGE_SIZE = 3
	VK_ATTACHMENT_LOAD_OP_END_RANGE = 2
	VK_ATTACHMENT_LOAD_OP_BEGIN_RANGE = 0
	VK_ATTACHMENT_LOAD_OP_DONT_CARE = 2
	VK_ATTACHMENT_LOAD_OP_CLEAR = 1
	VK_ATTACHMENT_LOAD_OP_LOAD = 0
	
VK_ATTACHMENT_LOAD_OP_MAX_ENUM = VkAttachmentLoadOp.VK_ATTACHMENT_LOAD_OP_MAX_ENUM
VK_ATTACHMENT_LOAD_OP_RANGE_SIZE = VkAttachmentLoadOp.VK_ATTACHMENT_LOAD_OP_RANGE_SIZE
VK_ATTACHMENT_LOAD_OP_END_RANGE = VkAttachmentLoadOp.VK_ATTACHMENT_LOAD_OP_END_RANGE
VK_ATTACHMENT_LOAD_OP_BEGIN_RANGE = VkAttachmentLoadOp.VK_ATTACHMENT_LOAD_OP_BEGIN_RANGE
VK_ATTACHMENT_LOAD_OP_DONT_CARE = VkAttachmentLoadOp.VK_ATTACHMENT_LOAD_OP_DONT_CARE
VK_ATTACHMENT_LOAD_OP_CLEAR = VkAttachmentLoadOp.VK_ATTACHMENT_LOAD_OP_CLEAR
VK_ATTACHMENT_LOAD_OP_LOAD = VkAttachmentLoadOp.VK_ATTACHMENT_LOAD_OP_LOAD

class VkAttachmentStoreOp:
	VK_ATTACHMENT_STORE_OP_MAX_ENUM = 2147483647
	VK_ATTACHMENT_STORE_OP_RANGE_SIZE = 2
	VK_ATTACHMENT_STORE_OP_END_RANGE = 1
	VK_ATTACHMENT_STORE_OP_BEGIN_RANGE = 0
	VK_ATTACHMENT_STORE_OP_DONT_CARE = 1
	VK_ATTACHMENT_STORE_OP_STORE = 0
	
VK_ATTACHMENT_STORE_OP_MAX_ENUM = VkAttachmentStoreOp.VK_ATTACHMENT_STORE_OP_MAX_ENUM
VK_ATTACHMENT_STORE_OP_RANGE_SIZE = VkAttachmentStoreOp.VK_ATTACHMENT_STORE_OP_RANGE_SIZE
VK_ATTACHMENT_STORE_OP_END_RANGE = VkAttachmentStoreOp.VK_ATTACHMENT_STORE_OP_END_RANGE
VK_ATTACHMENT_STORE_OP_BEGIN_RANGE = VkAttachmentStoreOp.VK_ATTACHMENT_STORE_OP_BEGIN_RANGE
VK_ATTACHMENT_STORE_OP_DONT_CARE = VkAttachmentStoreOp.VK_ATTACHMENT_STORE_OP_DONT_CARE
VK_ATTACHMENT_STORE_OP_STORE = VkAttachmentStoreOp.VK_ATTACHMENT_STORE_OP_STORE

class VkPipelineBindPoint:
	VK_PIPELINE_BIND_POINT_MAX_ENUM = 2147483647
	VK_PIPELINE_BIND_POINT_RANGE_SIZE = 2
	VK_PIPELINE_BIND_POINT_END_RANGE = 1
	VK_PIPELINE_BIND_POINT_BEGIN_RANGE = 0
	VK_PIPELINE_BIND_POINT_COMPUTE = 1
	VK_PIPELINE_BIND_POINT_GRAPHICS = 0
	
VK_PIPELINE_BIND_POINT_MAX_ENUM = VkPipelineBindPoint.VK_PIPELINE_BIND_POINT_MAX_ENUM
VK_PIPELINE_BIND_POINT_RANGE_SIZE = VkPipelineBindPoint.VK_PIPELINE_BIND_POINT_RANGE_SIZE
VK_PIPELINE_BIND_POINT_END_RANGE = VkPipelineBindPoint.VK_PIPELINE_BIND_POINT_END_RANGE
VK_PIPELINE_BIND_POINT_BEGIN_RANGE = VkPipelineBindPoint.VK_PIPELINE_BIND_POINT_BEGIN_RANGE
VK_PIPELINE_BIND_POINT_COMPUTE = VkPipelineBindPoint.VK_PIPELINE_BIND_POINT_COMPUTE
VK_PIPELINE_BIND_POINT_GRAPHICS = VkPipelineBindPoint.VK_PIPELINE_BIND_POINT_GRAPHICS

class VkCommandBufferLevel:
	VK_COMMAND_BUFFER_LEVEL_MAX_ENUM = 2147483647
	VK_COMMAND_BUFFER_LEVEL_RANGE_SIZE = 2
	VK_COMMAND_BUFFER_LEVEL_END_RANGE = 1
	VK_COMMAND_BUFFER_LEVEL_BEGIN_RANGE = 0
	VK_COMMAND_BUFFER_LEVEL_SECONDARY = 1
	VK_COMMAND_BUFFER_LEVEL_PRIMARY = 0
	
VK_COMMAND_BUFFER_LEVEL_MAX_ENUM = VkCommandBufferLevel.VK_COMMAND_BUFFER_LEVEL_MAX_ENUM
VK_COMMAND_BUFFER_LEVEL_RANGE_SIZE = VkCommandBufferLevel.VK_COMMAND_BUFFER_LEVEL_RANGE_SIZE
VK_COMMAND_BUFFER_LEVEL_END_RANGE = VkCommandBufferLevel.VK_COMMAND_BUFFER_LEVEL_END_RANGE
VK_COMMAND_BUFFER_LEVEL_BEGIN_RANGE = VkCommandBufferLevel.VK_COMMAND_BUFFER_LEVEL_BEGIN_RANGE
VK_COMMAND_BUFFER_LEVEL_SECONDARY = VkCommandBufferLevel.VK_COMMAND_BUFFER_LEVEL_SECONDARY
VK_COMMAND_BUFFER_LEVEL_PRIMARY = VkCommandBufferLevel.VK_COMMAND_BUFFER_LEVEL_PRIMARY

class VkIndexType:
	VK_INDEX_TYPE_MAX_ENUM = 2147483647
	VK_INDEX_TYPE_RANGE_SIZE = 2
	VK_INDEX_TYPE_END_RANGE = 1
	VK_INDEX_TYPE_BEGIN_RANGE = 0
	VK_INDEX_TYPE_UINT32 = 1
	VK_INDEX_TYPE_UINT16 = 0
	
VK_INDEX_TYPE_MAX_ENUM = VkIndexType.VK_INDEX_TYPE_MAX_ENUM
VK_INDEX_TYPE_RANGE_SIZE = VkIndexType.VK_INDEX_TYPE_RANGE_SIZE
VK_INDEX_TYPE_END_RANGE = VkIndexType.VK_INDEX_TYPE_END_RANGE
VK_INDEX_TYPE_BEGIN_RANGE = VkIndexType.VK_INDEX_TYPE_BEGIN_RANGE
VK_INDEX_TYPE_UINT32 = VkIndexType.VK_INDEX_TYPE_UINT32
VK_INDEX_TYPE_UINT16 = VkIndexType.VK_INDEX_TYPE_UINT16

class VkSubpassContents:
	VK_SUBPASS_CONTENTS_MAX_ENUM = 2147483647
	VK_SUBPASS_CONTENTS_RANGE_SIZE = 2
	VK_SUBPASS_CONTENTS_END_RANGE = 1
	VK_SUBPASS_CONTENTS_BEGIN_RANGE = 0
	VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS = 1
	VK_SUBPASS_CONTENTS_INLINE = 0
	
VK_SUBPASS_CONTENTS_MAX_ENUM = VkSubpassContents.VK_SUBPASS_CONTENTS_MAX_ENUM
VK_SUBPASS_CONTENTS_RANGE_SIZE = VkSubpassContents.VK_SUBPASS_CONTENTS_RANGE_SIZE
VK_SUBPASS_CONTENTS_END_RANGE = VkSubpassContents.VK_SUBPASS_CONTENTS_END_RANGE
VK_SUBPASS_CONTENTS_BEGIN_RANGE = VkSubpassContents.VK_SUBPASS_CONTENTS_BEGIN_RANGE
VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS = VkSubpassContents.VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS
VK_SUBPASS_CONTENTS_INLINE = VkSubpassContents.VK_SUBPASS_CONTENTS_INLINE

class VkFormatFeatureFlagBits:
	VK_FORMAT_FEATURE_FLAG_BITS_MAX_ENUM = 2147483647
	VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG = 8192
	VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT = 4096
	VK_FORMAT_FEATURE_BLIT_DST_BIT = 2048
	VK_FORMAT_FEATURE_BLIT_SRC_BIT = 1024
	VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT = 512
	VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT = 256
	VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT = 128
	VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT = 64
	VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT = 32
	VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT = 16
	VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT = 8
	VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT = 4
	VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT = 2
	VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT = 1
	
VK_FORMAT_FEATURE_FLAG_BITS_MAX_ENUM = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_FLAG_BITS_MAX_ENUM
VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG
VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT
VK_FORMAT_FEATURE_BLIT_DST_BIT = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_BLIT_DST_BIT
VK_FORMAT_FEATURE_BLIT_SRC_BIT = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_BLIT_SRC_BIT
VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT
VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT
VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT
VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT
VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT
VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT
VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT
VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT
VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT
VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT

class VkImageUsageFlagBits:
	VK_IMAGE_USAGE_FLAG_BITS_MAX_ENUM = 2147483647
	VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT = 128
	VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT = 64
	VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT = 32
	VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT = 16
	VK_IMAGE_USAGE_STORAGE_BIT = 8
	VK_IMAGE_USAGE_SAMPLED_BIT = 4
	VK_IMAGE_USAGE_TRANSFER_DST_BIT = 2
	VK_IMAGE_USAGE_TRANSFER_SRC_BIT = 1
	
VK_IMAGE_USAGE_FLAG_BITS_MAX_ENUM = VkImageUsageFlagBits.VK_IMAGE_USAGE_FLAG_BITS_MAX_ENUM
VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT = VkImageUsageFlagBits.VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT
VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT = VkImageUsageFlagBits.VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT
VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT = VkImageUsageFlagBits.VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT
VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT = VkImageUsageFlagBits.VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT
VK_IMAGE_USAGE_STORAGE_BIT = VkImageUsageFlagBits.VK_IMAGE_USAGE_STORAGE_BIT
VK_IMAGE_USAGE_SAMPLED_BIT = VkImageUsageFlagBits.VK_IMAGE_USAGE_SAMPLED_BIT
VK_IMAGE_USAGE_TRANSFER_DST_BIT = VkImageUsageFlagBits.VK_IMAGE_USAGE_TRANSFER_DST_BIT
VK_IMAGE_USAGE_TRANSFER_SRC_BIT = VkImageUsageFlagBits.VK_IMAGE_USAGE_TRANSFER_SRC_BIT

class VkImageCreateFlagBits:
	VK_IMAGE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
	VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT = 16
	VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT = 8
	VK_IMAGE_CREATE_SPARSE_ALIASED_BIT = 4
	VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT = 2
	VK_IMAGE_CREATE_SPARSE_BINDING_BIT = 1
	
VK_IMAGE_CREATE_FLAG_BITS_MAX_ENUM = VkImageCreateFlagBits.VK_IMAGE_CREATE_FLAG_BITS_MAX_ENUM
VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT = VkImageCreateFlagBits.VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT
VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT = VkImageCreateFlagBits.VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT
VK_IMAGE_CREATE_SPARSE_ALIASED_BIT = VkImageCreateFlagBits.VK_IMAGE_CREATE_SPARSE_ALIASED_BIT
VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT = VkImageCreateFlagBits.VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT
VK_IMAGE_CREATE_SPARSE_BINDING_BIT = VkImageCreateFlagBits.VK_IMAGE_CREATE_SPARSE_BINDING_BIT

class VkSampleCountFlagBits:
	VK_SAMPLE_COUNT_FLAG_BITS_MAX_ENUM = 2147483647
	VK_SAMPLE_COUNT_64_BIT = 64
	VK_SAMPLE_COUNT_32_BIT = 32
	VK_SAMPLE_COUNT_16_BIT = 16
	VK_SAMPLE_COUNT_8_BIT = 8
	VK_SAMPLE_COUNT_4_BIT = 4
	VK_SAMPLE_COUNT_2_BIT = 2
	VK_SAMPLE_COUNT_1_BIT = 1
	
VK_SAMPLE_COUNT_FLAG_BITS_MAX_ENUM = VkSampleCountFlagBits.VK_SAMPLE_COUNT_FLAG_BITS_MAX_ENUM
VK_SAMPLE_COUNT_64_BIT = VkSampleCountFlagBits.VK_SAMPLE_COUNT_64_BIT
VK_SAMPLE_COUNT_32_BIT = VkSampleCountFlagBits.VK_SAMPLE_COUNT_32_BIT
VK_SAMPLE_COUNT_16_BIT = VkSampleCountFlagBits.VK_SAMPLE_COUNT_16_BIT
VK_SAMPLE_COUNT_8_BIT = VkSampleCountFlagBits.VK_SAMPLE_COUNT_8_BIT
VK_SAMPLE_COUNT_4_BIT = VkSampleCountFlagBits.VK_SAMPLE_COUNT_4_BIT
VK_SAMPLE_COUNT_2_BIT = VkSampleCountFlagBits.VK_SAMPLE_COUNT_2_BIT
VK_SAMPLE_COUNT_1_BIT = VkSampleCountFlagBits.VK_SAMPLE_COUNT_1_BIT

class VkQueueFlagBits:
	VK_QUEUE_FLAG_BITS_MAX_ENUM = 2147483647
	VK_QUEUE_SPARSE_BINDING_BIT = 8
	VK_QUEUE_TRANSFER_BIT = 4
	VK_QUEUE_COMPUTE_BIT = 2
	VK_QUEUE_GRAPHICS_BIT = 1
	
VK_QUEUE_FLAG_BITS_MAX_ENUM = VkQueueFlagBits.VK_QUEUE_FLAG_BITS_MAX_ENUM
VK_QUEUE_SPARSE_BINDING_BIT = VkQueueFlagBits.VK_QUEUE_SPARSE_BINDING_BIT
VK_QUEUE_TRANSFER_BIT = VkQueueFlagBits.VK_QUEUE_TRANSFER_BIT
VK_QUEUE_COMPUTE_BIT = VkQueueFlagBits.VK_QUEUE_COMPUTE_BIT
VK_QUEUE_GRAPHICS_BIT = VkQueueFlagBits.VK_QUEUE_GRAPHICS_BIT

class VkMemoryPropertyFlagBits:
	VK_MEMORY_PROPERTY_FLAG_BITS_MAX_ENUM = 2147483647
	VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT = 16
	VK_MEMORY_PROPERTY_HOST_CACHED_BIT = 8
	VK_MEMORY_PROPERTY_HOST_COHERENT_BIT = 4
	VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT = 2
	VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT = 1
	
VK_MEMORY_PROPERTY_FLAG_BITS_MAX_ENUM = VkMemoryPropertyFlagBits.VK_MEMORY_PROPERTY_FLAG_BITS_MAX_ENUM
VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT = VkMemoryPropertyFlagBits.VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT
VK_MEMORY_PROPERTY_HOST_CACHED_BIT = VkMemoryPropertyFlagBits.VK_MEMORY_PROPERTY_HOST_CACHED_BIT
VK_MEMORY_PROPERTY_HOST_COHERENT_BIT = VkMemoryPropertyFlagBits.VK_MEMORY_PROPERTY_HOST_COHERENT_BIT
VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT = VkMemoryPropertyFlagBits.VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT
VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT = VkMemoryPropertyFlagBits.VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT

class VkMemoryHeapFlagBits:
	VK_MEMORY_HEAP_FLAG_BITS_MAX_ENUM = 2147483647
	VK_MEMORY_HEAP_DEVICE_LOCAL_BIT = 1
	
VK_MEMORY_HEAP_FLAG_BITS_MAX_ENUM = VkMemoryHeapFlagBits.VK_MEMORY_HEAP_FLAG_BITS_MAX_ENUM
VK_MEMORY_HEAP_DEVICE_LOCAL_BIT = VkMemoryHeapFlagBits.VK_MEMORY_HEAP_DEVICE_LOCAL_BIT

class VkPipelineStageFlagBits:
	VK_PIPELINE_STAGE_FLAG_BITS_MAX_ENUM = 2147483647
	VK_PIPELINE_STAGE_ALL_COMMANDS_BIT = 65536
	VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT = 32768
	VK_PIPELINE_STAGE_HOST_BIT = 16384
	VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT = 8192
	VK_PIPELINE_STAGE_TRANSFER_BIT = 4096
	VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT = 2048
	VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT = 1024
	VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT = 512
	VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT = 256
	VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT = 128
	VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT = 64
	VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT = 32
	VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT = 16
	VK_PIPELINE_STAGE_VERTEX_SHADER_BIT = 8
	VK_PIPELINE_STAGE_VERTEX_INPUT_BIT = 4
	VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT = 2
	VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT = 1
	
VK_PIPELINE_STAGE_FLAG_BITS_MAX_ENUM = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_FLAG_BITS_MAX_ENUM
VK_PIPELINE_STAGE_ALL_COMMANDS_BIT = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_ALL_COMMANDS_BIT
VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT
VK_PIPELINE_STAGE_HOST_BIT = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_HOST_BIT
VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT
VK_PIPELINE_STAGE_TRANSFER_BIT = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_TRANSFER_BIT
VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT
VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT
VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT
VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT
VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT
VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT
VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT
VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT
VK_PIPELINE_STAGE_VERTEX_SHADER_BIT = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_VERTEX_SHADER_BIT
VK_PIPELINE_STAGE_VERTEX_INPUT_BIT = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_VERTEX_INPUT_BIT
VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT
VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT

class VkImageAspectFlagBits:
	VK_IMAGE_ASPECT_FLAG_BITS_MAX_ENUM = 2147483647
	VK_IMAGE_ASPECT_METADATA_BIT = 8
	VK_IMAGE_ASPECT_STENCIL_BIT = 4
	VK_IMAGE_ASPECT_DEPTH_BIT = 2
	VK_IMAGE_ASPECT_COLOR_BIT = 1
	
VK_IMAGE_ASPECT_FLAG_BITS_MAX_ENUM = VkImageAspectFlagBits.VK_IMAGE_ASPECT_FLAG_BITS_MAX_ENUM
VK_IMAGE_ASPECT_METADATA_BIT = VkImageAspectFlagBits.VK_IMAGE_ASPECT_METADATA_BIT
VK_IMAGE_ASPECT_STENCIL_BIT = VkImageAspectFlagBits.VK_IMAGE_ASPECT_STENCIL_BIT
VK_IMAGE_ASPECT_DEPTH_BIT = VkImageAspectFlagBits.VK_IMAGE_ASPECT_DEPTH_BIT
VK_IMAGE_ASPECT_COLOR_BIT = VkImageAspectFlagBits.VK_IMAGE_ASPECT_COLOR_BIT

class VkSparseImageFormatFlagBits:
	VK_SPARSE_IMAGE_FORMAT_FLAG_BITS_MAX_ENUM = 2147483647
	VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT = 4
	VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT = 2
	VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT = 1
	
VK_SPARSE_IMAGE_FORMAT_FLAG_BITS_MAX_ENUM = VkSparseImageFormatFlagBits.VK_SPARSE_IMAGE_FORMAT_FLAG_BITS_MAX_ENUM
VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT = VkSparseImageFormatFlagBits.VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT
VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT = VkSparseImageFormatFlagBits.VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT
VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT = VkSparseImageFormatFlagBits.VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT

class VkSparseMemoryBindFlagBits:
	VK_SPARSE_MEMORY_BIND_FLAG_BITS_MAX_ENUM = 2147483647
	VK_SPARSE_MEMORY_BIND_METADATA_BIT = 1
	
VK_SPARSE_MEMORY_BIND_FLAG_BITS_MAX_ENUM = VkSparseMemoryBindFlagBits.VK_SPARSE_MEMORY_BIND_FLAG_BITS_MAX_ENUM
VK_SPARSE_MEMORY_BIND_METADATA_BIT = VkSparseMemoryBindFlagBits.VK_SPARSE_MEMORY_BIND_METADATA_BIT

class VkFenceCreateFlagBits:
	VK_FENCE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
	VK_FENCE_CREATE_SIGNALED_BIT = 1
	
VK_FENCE_CREATE_FLAG_BITS_MAX_ENUM = VkFenceCreateFlagBits.VK_FENCE_CREATE_FLAG_BITS_MAX_ENUM
VK_FENCE_CREATE_SIGNALED_BIT = VkFenceCreateFlagBits.VK_FENCE_CREATE_SIGNALED_BIT

class VkQueryPipelineStatisticFlagBits:
	VK_QUERY_PIPELINE_STATISTIC_FLAG_BITS_MAX_ENUM = 2147483647
	VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT = 1024
	VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT = 512
	VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT = 256
	VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT = 128
	VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT = 64
	VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT = 32
	VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT = 16
	VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT = 8
	VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT = 4
	VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT = 2
	VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT = 1
	
VK_QUERY_PIPELINE_STATISTIC_FLAG_BITS_MAX_ENUM = VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_FLAG_BITS_MAX_ENUM
VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT = VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT
VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT = VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT
VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT = VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT
VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT = VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT
VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT = VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT
VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT = VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT
VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT = VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT
VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT = VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT
VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT = VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT
VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT = VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT
VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT = VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT

class VkQueryResultFlagBits:
	VK_QUERY_RESULT_FLAG_BITS_MAX_ENUM = 2147483647
	VK_QUERY_RESULT_PARTIAL_BIT = 8
	VK_QUERY_RESULT_WITH_AVAILABILITY_BIT = 4
	VK_QUERY_RESULT_WAIT_BIT = 2
	VK_QUERY_RESULT_64_BIT = 1
	
VK_QUERY_RESULT_FLAG_BITS_MAX_ENUM = VkQueryResultFlagBits.VK_QUERY_RESULT_FLAG_BITS_MAX_ENUM
VK_QUERY_RESULT_PARTIAL_BIT = VkQueryResultFlagBits.VK_QUERY_RESULT_PARTIAL_BIT
VK_QUERY_RESULT_WITH_AVAILABILITY_BIT = VkQueryResultFlagBits.VK_QUERY_RESULT_WITH_AVAILABILITY_BIT
VK_QUERY_RESULT_WAIT_BIT = VkQueryResultFlagBits.VK_QUERY_RESULT_WAIT_BIT
VK_QUERY_RESULT_64_BIT = VkQueryResultFlagBits.VK_QUERY_RESULT_64_BIT

class VkBufferCreateFlagBits:
	VK_BUFFER_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
	VK_BUFFER_CREATE_SPARSE_ALIASED_BIT = 4
	VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT = 2
	VK_BUFFER_CREATE_SPARSE_BINDING_BIT = 1
	
VK_BUFFER_CREATE_FLAG_BITS_MAX_ENUM = VkBufferCreateFlagBits.VK_BUFFER_CREATE_FLAG_BITS_MAX_ENUM
VK_BUFFER_CREATE_SPARSE_ALIASED_BIT = VkBufferCreateFlagBits.VK_BUFFER_CREATE_SPARSE_ALIASED_BIT
VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT = VkBufferCreateFlagBits.VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT
VK_BUFFER_CREATE_SPARSE_BINDING_BIT = VkBufferCreateFlagBits.VK_BUFFER_CREATE_SPARSE_BINDING_BIT

class VkBufferUsageFlagBits:
	VK_BUFFER_USAGE_FLAG_BITS_MAX_ENUM = 2147483647
	VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT = 256
	VK_BUFFER_USAGE_VERTEX_BUFFER_BIT = 128
	VK_BUFFER_USAGE_INDEX_BUFFER_BIT = 64
	VK_BUFFER_USAGE_STORAGE_BUFFER_BIT = 32
	VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT = 16
	VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT = 8
	VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT = 4
	VK_BUFFER_USAGE_TRANSFER_DST_BIT = 2
	VK_BUFFER_USAGE_TRANSFER_SRC_BIT = 1
	
VK_BUFFER_USAGE_FLAG_BITS_MAX_ENUM = VkBufferUsageFlagBits.VK_BUFFER_USAGE_FLAG_BITS_MAX_ENUM
VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT = VkBufferUsageFlagBits.VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT
VK_BUFFER_USAGE_VERTEX_BUFFER_BIT = VkBufferUsageFlagBits.VK_BUFFER_USAGE_VERTEX_BUFFER_BIT
VK_BUFFER_USAGE_INDEX_BUFFER_BIT = VkBufferUsageFlagBits.VK_BUFFER_USAGE_INDEX_BUFFER_BIT
VK_BUFFER_USAGE_STORAGE_BUFFER_BIT = VkBufferUsageFlagBits.VK_BUFFER_USAGE_STORAGE_BUFFER_BIT
VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT = VkBufferUsageFlagBits.VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT
VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT = VkBufferUsageFlagBits.VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT
VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT = VkBufferUsageFlagBits.VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT
VK_BUFFER_USAGE_TRANSFER_DST_BIT = VkBufferUsageFlagBits.VK_BUFFER_USAGE_TRANSFER_DST_BIT
VK_BUFFER_USAGE_TRANSFER_SRC_BIT = VkBufferUsageFlagBits.VK_BUFFER_USAGE_TRANSFER_SRC_BIT

class VkPipelineCreateFlagBits:
	VK_PIPELINE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
	VK_PIPELINE_CREATE_DERIVATIVE_BIT = 4
	VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT = 2
	VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT = 1
	
VK_PIPELINE_CREATE_FLAG_BITS_MAX_ENUM = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_FLAG_BITS_MAX_ENUM
VK_PIPELINE_CREATE_DERIVATIVE_BIT = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_DERIVATIVE_BIT
VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT
VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT

class VkShaderStageFlagBits:
	VK_SHADER_STAGE_FLAG_BITS_MAX_ENUM = 2147483647
	VK_SHADER_STAGE_ALL = 2147483647
	VK_SHADER_STAGE_ALL_GRAPHICS = 31
	VK_SHADER_STAGE_COMPUTE_BIT = 32
	VK_SHADER_STAGE_FRAGMENT_BIT = 16
	VK_SHADER_STAGE_GEOMETRY_BIT = 8
	VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT = 4
	VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT = 2
	VK_SHADER_STAGE_VERTEX_BIT = 1
	
VK_SHADER_STAGE_FLAG_BITS_MAX_ENUM = VkShaderStageFlagBits.VK_SHADER_STAGE_FLAG_BITS_MAX_ENUM
VK_SHADER_STAGE_ALL = VkShaderStageFlagBits.VK_SHADER_STAGE_ALL
VK_SHADER_STAGE_ALL_GRAPHICS = VkShaderStageFlagBits.VK_SHADER_STAGE_ALL_GRAPHICS
VK_SHADER_STAGE_COMPUTE_BIT = VkShaderStageFlagBits.VK_SHADER_STAGE_COMPUTE_BIT
VK_SHADER_STAGE_FRAGMENT_BIT = VkShaderStageFlagBits.VK_SHADER_STAGE_FRAGMENT_BIT
VK_SHADER_STAGE_GEOMETRY_BIT = VkShaderStageFlagBits.VK_SHADER_STAGE_GEOMETRY_BIT
VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT = VkShaderStageFlagBits.VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT
VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT = VkShaderStageFlagBits.VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT
VK_SHADER_STAGE_VERTEX_BIT = VkShaderStageFlagBits.VK_SHADER_STAGE_VERTEX_BIT

class VkCullModeFlagBits:
	VK_CULL_MODE_FLAG_BITS_MAX_ENUM = 2147483647
	VK_CULL_MODE_FRONT_AND_BACK = 3
	VK_CULL_MODE_BACK_BIT = 2
	VK_CULL_MODE_FRONT_BIT = 1
	VK_CULL_MODE_NONE = 0
	
VK_CULL_MODE_FLAG_BITS_MAX_ENUM = VkCullModeFlagBits.VK_CULL_MODE_FLAG_BITS_MAX_ENUM
VK_CULL_MODE_FRONT_AND_BACK = VkCullModeFlagBits.VK_CULL_MODE_FRONT_AND_BACK
VK_CULL_MODE_BACK_BIT = VkCullModeFlagBits.VK_CULL_MODE_BACK_BIT
VK_CULL_MODE_FRONT_BIT = VkCullModeFlagBits.VK_CULL_MODE_FRONT_BIT
VK_CULL_MODE_NONE = VkCullModeFlagBits.VK_CULL_MODE_NONE

class VkColorComponentFlagBits:
	VK_COLOR_COMPONENT_FLAG_BITS_MAX_ENUM = 2147483647
	VK_COLOR_COMPONENT_A_BIT = 8
	VK_COLOR_COMPONENT_B_BIT = 4
	VK_COLOR_COMPONENT_G_BIT = 2
	VK_COLOR_COMPONENT_R_BIT = 1
	
VK_COLOR_COMPONENT_FLAG_BITS_MAX_ENUM = VkColorComponentFlagBits.VK_COLOR_COMPONENT_FLAG_BITS_MAX_ENUM
VK_COLOR_COMPONENT_A_BIT = VkColorComponentFlagBits.VK_COLOR_COMPONENT_A_BIT
VK_COLOR_COMPONENT_B_BIT = VkColorComponentFlagBits.VK_COLOR_COMPONENT_B_BIT
VK_COLOR_COMPONENT_G_BIT = VkColorComponentFlagBits.VK_COLOR_COMPONENT_G_BIT
VK_COLOR_COMPONENT_R_BIT = VkColorComponentFlagBits.VK_COLOR_COMPONENT_R_BIT

class VkDescriptorPoolCreateFlagBits:
	VK_DESCRIPTOR_POOL_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
	VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT = 1
	
VK_DESCRIPTOR_POOL_CREATE_FLAG_BITS_MAX_ENUM = VkDescriptorPoolCreateFlagBits.VK_DESCRIPTOR_POOL_CREATE_FLAG_BITS_MAX_ENUM
VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT = VkDescriptorPoolCreateFlagBits.VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT

class VkAttachmentDescriptionFlagBits:
	VK_ATTACHMENT_DESCRIPTION_FLAG_BITS_MAX_ENUM = 2147483647
	VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT = 1
	
VK_ATTACHMENT_DESCRIPTION_FLAG_BITS_MAX_ENUM = VkAttachmentDescriptionFlagBits.VK_ATTACHMENT_DESCRIPTION_FLAG_BITS_MAX_ENUM
VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT = VkAttachmentDescriptionFlagBits.VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT

class VkAccessFlagBits:
	VK_ACCESS_FLAG_BITS_MAX_ENUM = 2147483647
	VK_ACCESS_MEMORY_WRITE_BIT = 65536
	VK_ACCESS_MEMORY_READ_BIT = 32768
	VK_ACCESS_HOST_WRITE_BIT = 16384
	VK_ACCESS_HOST_READ_BIT = 8192
	VK_ACCESS_TRANSFER_WRITE_BIT = 4096
	VK_ACCESS_TRANSFER_READ_BIT = 2048
	VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT = 1024
	VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT = 512
	VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT = 256
	VK_ACCESS_COLOR_ATTACHMENT_READ_BIT = 128
	VK_ACCESS_SHADER_WRITE_BIT = 64
	VK_ACCESS_SHADER_READ_BIT = 32
	VK_ACCESS_INPUT_ATTACHMENT_READ_BIT = 16
	VK_ACCESS_UNIFORM_READ_BIT = 8
	VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT = 4
	VK_ACCESS_INDEX_READ_BIT = 2
	VK_ACCESS_INDIRECT_COMMAND_READ_BIT = 1
	
VK_ACCESS_FLAG_BITS_MAX_ENUM = VkAccessFlagBits.VK_ACCESS_FLAG_BITS_MAX_ENUM
VK_ACCESS_MEMORY_WRITE_BIT = VkAccessFlagBits.VK_ACCESS_MEMORY_WRITE_BIT
VK_ACCESS_MEMORY_READ_BIT = VkAccessFlagBits.VK_ACCESS_MEMORY_READ_BIT
VK_ACCESS_HOST_WRITE_BIT = VkAccessFlagBits.VK_ACCESS_HOST_WRITE_BIT
VK_ACCESS_HOST_READ_BIT = VkAccessFlagBits.VK_ACCESS_HOST_READ_BIT
VK_ACCESS_TRANSFER_WRITE_BIT = VkAccessFlagBits.VK_ACCESS_TRANSFER_WRITE_BIT
VK_ACCESS_TRANSFER_READ_BIT = VkAccessFlagBits.VK_ACCESS_TRANSFER_READ_BIT
VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT = VkAccessFlagBits.VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT
VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT = VkAccessFlagBits.VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT
VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT = VkAccessFlagBits.VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT
VK_ACCESS_COLOR_ATTACHMENT_READ_BIT = VkAccessFlagBits.VK_ACCESS_COLOR_ATTACHMENT_READ_BIT
VK_ACCESS_SHADER_WRITE_BIT = VkAccessFlagBits.VK_ACCESS_SHADER_WRITE_BIT
VK_ACCESS_SHADER_READ_BIT = VkAccessFlagBits.VK_ACCESS_SHADER_READ_BIT
VK_ACCESS_INPUT_ATTACHMENT_READ_BIT = VkAccessFlagBits.VK_ACCESS_INPUT_ATTACHMENT_READ_BIT
VK_ACCESS_UNIFORM_READ_BIT = VkAccessFlagBits.VK_ACCESS_UNIFORM_READ_BIT
VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT = VkAccessFlagBits.VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT
VK_ACCESS_INDEX_READ_BIT = VkAccessFlagBits.VK_ACCESS_INDEX_READ_BIT
VK_ACCESS_INDIRECT_COMMAND_READ_BIT = VkAccessFlagBits.VK_ACCESS_INDIRECT_COMMAND_READ_BIT

class VkDependencyFlagBits:
	VK_DEPENDENCY_FLAG_BITS_MAX_ENUM = 2147483647
	VK_DEPENDENCY_BY_REGION_BIT = 1
	
VK_DEPENDENCY_FLAG_BITS_MAX_ENUM = VkDependencyFlagBits.VK_DEPENDENCY_FLAG_BITS_MAX_ENUM
VK_DEPENDENCY_BY_REGION_BIT = VkDependencyFlagBits.VK_DEPENDENCY_BY_REGION_BIT

class VkCommandPoolCreateFlagBits:
	VK_COMMAND_POOL_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
	VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT = 2
	VK_COMMAND_POOL_CREATE_TRANSIENT_BIT = 1
	
VK_COMMAND_POOL_CREATE_FLAG_BITS_MAX_ENUM = VkCommandPoolCreateFlagBits.VK_COMMAND_POOL_CREATE_FLAG_BITS_MAX_ENUM
VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT = VkCommandPoolCreateFlagBits.VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT
VK_COMMAND_POOL_CREATE_TRANSIENT_BIT = VkCommandPoolCreateFlagBits.VK_COMMAND_POOL_CREATE_TRANSIENT_BIT

class VkCommandPoolResetFlagBits:
	VK_COMMAND_POOL_RESET_FLAG_BITS_MAX_ENUM = 2147483647
	VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT = 1
	
VK_COMMAND_POOL_RESET_FLAG_BITS_MAX_ENUM = VkCommandPoolResetFlagBits.VK_COMMAND_POOL_RESET_FLAG_BITS_MAX_ENUM
VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT = VkCommandPoolResetFlagBits.VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT

class VkCommandBufferUsageFlagBits:
	VK_COMMAND_BUFFER_USAGE_FLAG_BITS_MAX_ENUM = 2147483647
	VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT = 4
	VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT = 2
	VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT = 1
	
VK_COMMAND_BUFFER_USAGE_FLAG_BITS_MAX_ENUM = VkCommandBufferUsageFlagBits.VK_COMMAND_BUFFER_USAGE_FLAG_BITS_MAX_ENUM
VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT = VkCommandBufferUsageFlagBits.VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT
VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT = VkCommandBufferUsageFlagBits.VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT
VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT = VkCommandBufferUsageFlagBits.VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT

class VkQueryControlFlagBits:
	VK_QUERY_CONTROL_FLAG_BITS_MAX_ENUM = 2147483647
	VK_QUERY_CONTROL_PRECISE_BIT = 1
	
VK_QUERY_CONTROL_FLAG_BITS_MAX_ENUM = VkQueryControlFlagBits.VK_QUERY_CONTROL_FLAG_BITS_MAX_ENUM
VK_QUERY_CONTROL_PRECISE_BIT = VkQueryControlFlagBits.VK_QUERY_CONTROL_PRECISE_BIT

class VkCommandBufferResetFlagBits:
	VK_COMMAND_BUFFER_RESET_FLAG_BITS_MAX_ENUM = 2147483647
	VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT = 1
	
VK_COMMAND_BUFFER_RESET_FLAG_BITS_MAX_ENUM = VkCommandBufferResetFlagBits.VK_COMMAND_BUFFER_RESET_FLAG_BITS_MAX_ENUM
VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT = VkCommandBufferResetFlagBits.VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT

class VkStencilFaceFlagBits:
	VK_STENCIL_FACE_FLAG_BITS_MAX_ENUM = 2147483647
	VK_STENCIL_FRONT_AND_BACK = 3
	VK_STENCIL_FACE_BACK_BIT = 2
	VK_STENCIL_FACE_FRONT_BIT = 1
	
VK_STENCIL_FACE_FLAG_BITS_MAX_ENUM = VkStencilFaceFlagBits.VK_STENCIL_FACE_FLAG_BITS_MAX_ENUM
VK_STENCIL_FRONT_AND_BACK = VkStencilFaceFlagBits.VK_STENCIL_FRONT_AND_BACK
VK_STENCIL_FACE_BACK_BIT = VkStencilFaceFlagBits.VK_STENCIL_FACE_BACK_BIT
VK_STENCIL_FACE_FRONT_BIT = VkStencilFaceFlagBits.VK_STENCIL_FACE_FRONT_BIT

class VkColorSpaceKHR:
	VK_COLOR_SPACE_MAX_ENUM_KHR = 2147483647
	VK_COLOR_SPACE_RANGE_SIZE_KHR = 1
	VK_COLOR_SPACE_END_RANGE_KHR = 0
	VK_COLOR_SPACE_BEGIN_RANGE_KHR = 0
	VK_COLORSPACE_SRGB_NONLINEAR_KHR = 0
	
VK_COLOR_SPACE_MAX_ENUM_KHR = VkColorSpaceKHR.VK_COLOR_SPACE_MAX_ENUM_KHR
VK_COLOR_SPACE_RANGE_SIZE_KHR = VkColorSpaceKHR.VK_COLOR_SPACE_RANGE_SIZE_KHR
VK_COLOR_SPACE_END_RANGE_KHR = VkColorSpaceKHR.VK_COLOR_SPACE_END_RANGE_KHR
VK_COLOR_SPACE_BEGIN_RANGE_KHR = VkColorSpaceKHR.VK_COLOR_SPACE_BEGIN_RANGE_KHR
VK_COLORSPACE_SRGB_NONLINEAR_KHR = VkColorSpaceKHR.VK_COLORSPACE_SRGB_NONLINEAR_KHR

class VkPresentModeKHR:
	VK_PRESENT_MODE_MAX_ENUM_KHR = 2147483647
	VK_PRESENT_MODE_RANGE_SIZE_KHR = 4
	VK_PRESENT_MODE_END_RANGE_KHR = 3
	VK_PRESENT_MODE_BEGIN_RANGE_KHR = 0
	VK_PRESENT_MODE_FIFO_RELAXED_KHR = 3
	VK_PRESENT_MODE_FIFO_KHR = 2
	VK_PRESENT_MODE_MAILBOX_KHR = 1
	VK_PRESENT_MODE_IMMEDIATE_KHR = 0
	
VK_PRESENT_MODE_MAX_ENUM_KHR = VkPresentModeKHR.VK_PRESENT_MODE_MAX_ENUM_KHR
VK_PRESENT_MODE_RANGE_SIZE_KHR = VkPresentModeKHR.VK_PRESENT_MODE_RANGE_SIZE_KHR
VK_PRESENT_MODE_END_RANGE_KHR = VkPresentModeKHR.VK_PRESENT_MODE_END_RANGE_KHR
VK_PRESENT_MODE_BEGIN_RANGE_KHR = VkPresentModeKHR.VK_PRESENT_MODE_BEGIN_RANGE_KHR
VK_PRESENT_MODE_FIFO_RELAXED_KHR = VkPresentModeKHR.VK_PRESENT_MODE_FIFO_RELAXED_KHR
VK_PRESENT_MODE_FIFO_KHR = VkPresentModeKHR.VK_PRESENT_MODE_FIFO_KHR
VK_PRESENT_MODE_MAILBOX_KHR = VkPresentModeKHR.VK_PRESENT_MODE_MAILBOX_KHR
VK_PRESENT_MODE_IMMEDIATE_KHR = VkPresentModeKHR.VK_PRESENT_MODE_IMMEDIATE_KHR

class VkSurfaceTransformFlagBitsKHR:
	VK_SURFACE_TRANSFORM_FLAG_BITS_MAX_ENUM_KHR = 2147483647
	VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR = 256
	VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR = 128
	VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR = 64
	VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR = 32
	VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR = 16
	VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR = 8
	VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR = 4
	VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR = 2
	VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR = 1
	
VK_SURFACE_TRANSFORM_FLAG_BITS_MAX_ENUM_KHR = VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_FLAG_BITS_MAX_ENUM_KHR
VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR = VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR
VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR = VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR
VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR = VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR
VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR = VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR
VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR = VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR
VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR = VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR
VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR = VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR
VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR = VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR
VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR = VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR

class VkCompositeAlphaFlagBitsKHR:
	VK_COMPOSITE_ALPHA_FLAG_BITS_MAX_ENUM_KHR = 2147483647
	VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR = 8
	VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR = 4
	VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR = 2
	VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR = 1
	
VK_COMPOSITE_ALPHA_FLAG_BITS_MAX_ENUM_KHR = VkCompositeAlphaFlagBitsKHR.VK_COMPOSITE_ALPHA_FLAG_BITS_MAX_ENUM_KHR
VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR = VkCompositeAlphaFlagBitsKHR.VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR
VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR = VkCompositeAlphaFlagBitsKHR.VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR
VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR = VkCompositeAlphaFlagBitsKHR.VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR
VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR = VkCompositeAlphaFlagBitsKHR.VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR

class VkDisplayPlaneAlphaFlagBitsKHR:
	VK_DISPLAY_PLANE_ALPHA_FLAG_BITS_MAX_ENUM_KHR = 2147483647
	VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR = 8
	VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR = 4
	VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR = 2
	VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR = 1
	
VK_DISPLAY_PLANE_ALPHA_FLAG_BITS_MAX_ENUM_KHR = VkDisplayPlaneAlphaFlagBitsKHR.VK_DISPLAY_PLANE_ALPHA_FLAG_BITS_MAX_ENUM_KHR
VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR = VkDisplayPlaneAlphaFlagBitsKHR.VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR
VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR = VkDisplayPlaneAlphaFlagBitsKHR.VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR
VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR = VkDisplayPlaneAlphaFlagBitsKHR.VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR
VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR = VkDisplayPlaneAlphaFlagBitsKHR.VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR

class VkDebugReportObjectTypeEXT:
	VK_DEBUG_REPORT_OBJECT_TYPE_MAX_ENUM_EXT = 2147483647
	VK_DEBUG_REPORT_OBJECT_TYPE_RANGE_SIZE_EXT = 29
	VK_DEBUG_REPORT_OBJECT_TYPE_END_RANGE_EXT = 28
	VK_DEBUG_REPORT_OBJECT_TYPE_BEGIN_RANGE_EXT = 0
	VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT = 28
	VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT = 27
	VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT = 26
	VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT = 25
	VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT = 24
	VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT = 23
	VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT = 22
	VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT = 21
	VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT = 20
	VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT = 19
	VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT = 18
	VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT = 17
	VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT = 16
	VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT = 15
	VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT = 14
	VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT = 13
	VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT = 12
	VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT = 11
	VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT = 10
	VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT = 9
	VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT = 8
	VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT = 7
	VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT = 6
	VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT = 5
	VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT = 4
	VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT = 3
	VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT = 2
	VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT = 1
	VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT = 0
	
VK_DEBUG_REPORT_OBJECT_TYPE_MAX_ENUM_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_MAX_ENUM_EXT
VK_DEBUG_REPORT_OBJECT_TYPE_RANGE_SIZE_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_RANGE_SIZE_EXT
VK_DEBUG_REPORT_OBJECT_TYPE_END_RANGE_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_END_RANGE_EXT
VK_DEBUG_REPORT_OBJECT_TYPE_BEGIN_RANGE_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_BEGIN_RANGE_EXT
VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT
VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT
VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT
VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT
VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT
VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT
VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT
VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT
VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT
VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT
VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT
VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT
VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT
VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT
VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT
VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT
VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT
VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT
VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT
VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT
VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT
VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT
VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT
VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT
VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT
VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT
VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT
VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT
VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT

class VkDebugReportErrorEXT:
	VK_DEBUG_REPORT_ERROR_MAX_ENUM_EXT = 2147483647
	VK_DEBUG_REPORT_ERROR_RANGE_SIZE_EXT = 2
	VK_DEBUG_REPORT_ERROR_END_RANGE_EXT = 1
	VK_DEBUG_REPORT_ERROR_BEGIN_RANGE_EXT = 0
	VK_DEBUG_REPORT_ERROR_CALLBACK_REF_EXT = 1
	VK_DEBUG_REPORT_ERROR_NONE_EXT = 0
	
VK_DEBUG_REPORT_ERROR_MAX_ENUM_EXT = VkDebugReportErrorEXT.VK_DEBUG_REPORT_ERROR_MAX_ENUM_EXT
VK_DEBUG_REPORT_ERROR_RANGE_SIZE_EXT = VkDebugReportErrorEXT.VK_DEBUG_REPORT_ERROR_RANGE_SIZE_EXT
VK_DEBUG_REPORT_ERROR_END_RANGE_EXT = VkDebugReportErrorEXT.VK_DEBUG_REPORT_ERROR_END_RANGE_EXT
VK_DEBUG_REPORT_ERROR_BEGIN_RANGE_EXT = VkDebugReportErrorEXT.VK_DEBUG_REPORT_ERROR_BEGIN_RANGE_EXT
VK_DEBUG_REPORT_ERROR_CALLBACK_REF_EXT = VkDebugReportErrorEXT.VK_DEBUG_REPORT_ERROR_CALLBACK_REF_EXT
VK_DEBUG_REPORT_ERROR_NONE_EXT = VkDebugReportErrorEXT.VK_DEBUG_REPORT_ERROR_NONE_EXT

class VkDebugReportFlagBitsEXT:
	VK_DEBUG_REPORT_FLAG_BITS_MAX_ENUM_EXT = 2147483647
	VK_DEBUG_REPORT_DEBUG_BIT_EXT = 16
	VK_DEBUG_REPORT_ERROR_BIT_EXT = 8
	VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT = 4
	VK_DEBUG_REPORT_WARNING_BIT_EXT = 2
	VK_DEBUG_REPORT_INFORMATION_BIT_EXT = 1
	
VK_DEBUG_REPORT_FLAG_BITS_MAX_ENUM_EXT = VkDebugReportFlagBitsEXT.VK_DEBUG_REPORT_FLAG_BITS_MAX_ENUM_EXT
VK_DEBUG_REPORT_DEBUG_BIT_EXT = VkDebugReportFlagBitsEXT.VK_DEBUG_REPORT_DEBUG_BIT_EXT
VK_DEBUG_REPORT_ERROR_BIT_EXT = VkDebugReportFlagBitsEXT.VK_DEBUG_REPORT_ERROR_BIT_EXT
VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT = VkDebugReportFlagBitsEXT.VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT
VK_DEBUG_REPORT_WARNING_BIT_EXT = VkDebugReportFlagBitsEXT.VK_DEBUG_REPORT_WARNING_BIT_EXT
VK_DEBUG_REPORT_INFORMATION_BIT_EXT = VkDebugReportFlagBitsEXT.VK_DEBUG_REPORT_INFORMATION_BIT_EXT


_weakkey_dict = WeakKeyDictionary()
def _castToPtr(x, _type):
	if isinstance(x, ffi.CData):
		if _type.item==ffi.typeof(x):
			return ffi.addressof(x)
		return x
	if isinstance(x, Iterable):
		if _type.item.kind=='pointer':
			ptrs = [_castToPtr(i, _type.item) for i in x]
			ret = ffi.new(_type.item.cname+'[]', ptrs)
			_weakkey_dict[ret] = tuple(ptrs)
			return ret
		else:
			return ffi.new(_type.item.cname+'[]', x)
	return ffi.cast(_type, x)

def _newStruct(ctype, **kwargs):
	_type = ffi.typeof(ctype)

	kwargs = {k:kwargs[k] for k in kwargs if kwargs[k]}
	ptrs = {k:_castToPtr(kwargs[k], dict(_type.fields)[k].type) for k in kwargs if dict(_type.fields)[k].type.kind=='pointer'}
	
	ret = ffi.new(_type.cname+'*', dict(kwargs, **ptrs))[0]

	_weakkey_dict[ret] = tuple(ptrs.values())

	return ret


def VkApplicationInfo(sType = VK_STRUCTURE_TYPE_APPLICATION_INFO, pNext = None, pApplicationName = None, applicationVersion = None, pEngineName = None, engineVersion = None, apiVersion = None, ):
	return _newStruct('VkApplicationInfo', sType = sType, pNext = pNext, pApplicationName = pApplicationName, applicationVersion = applicationVersion, pEngineName = pEngineName, engineVersion = engineVersion, apiVersion = apiVersion, )

def VkInstanceCreateInfo(sType = VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO, pNext = None, flags = None, pApplicationInfo = None, enabledLayerCount = None, ppEnabledLayerNames = None, enabledExtensionCount = None, ppEnabledExtensionNames = None, ):
	return _newStruct('VkInstanceCreateInfo', sType = sType, pNext = pNext, flags = flags, pApplicationInfo = pApplicationInfo, enabledLayerCount = enabledLayerCount, ppEnabledLayerNames = ppEnabledLayerNames, enabledExtensionCount = enabledExtensionCount, ppEnabledExtensionNames = ppEnabledExtensionNames, )

def VkAllocationCallbacks(pUserData = None, pfnAllocation = None, pfnReallocation = None, pfnFree = None, pfnInternalAllocation = None, pfnInternalFree = None, ):
	return _newStruct('VkAllocationCallbacks', pUserData = pUserData, pfnAllocation = pfnAllocation, pfnReallocation = pfnReallocation, pfnFree = pfnFree, pfnInternalAllocation = pfnInternalAllocation, pfnInternalFree = pfnInternalFree, )

def VkPhysicalDeviceFeatures(robustBufferAccess = None, fullDrawIndexUint32 = None, imageCubeArray = None, independentBlend = None, geometryShader = None, tessellationShader = None, sampleRateShading = None, dualSrcBlend = None, logicOp = None, multiDrawIndirect = None, drawIndirectFirstInstance = None, depthClamp = None, depthBiasClamp = None, fillModeNonSolid = None, depthBounds = None, wideLines = None, largePoints = None, alphaToOne = None, multiViewport = None, samplerAnisotropy = None, textureCompressionETC2 = None, textureCompressionASTC_LDR = None, textureCompressionBC = None, occlusionQueryPrecise = None, pipelineStatisticsQuery = None, vertexPipelineStoresAndAtomics = None, fragmentStoresAndAtomics = None, shaderTessellationAndGeometryPointSize = None, shaderImageGatherExtended = None, shaderStorageImageExtendedFormats = None, shaderStorageImageMultisample = None, shaderStorageImageReadWithoutFormat = None, shaderStorageImageWriteWithoutFormat = None, shaderUniformBufferArrayDynamicIndexing = None, shaderSampledImageArrayDynamicIndexing = None, shaderStorageBufferArrayDynamicIndexing = None, shaderStorageImageArrayDynamicIndexing = None, shaderClipDistance = None, shaderCullDistance = None, shaderFloat64 = None, shaderInt64 = None, shaderInt16 = None, shaderResourceResidency = None, shaderResourceMinLod = None, sparseBinding = None, sparseResidencyBuffer = None, sparseResidencyImage2D = None, sparseResidencyImage3D = None, sparseResidency2Samples = None, sparseResidency4Samples = None, sparseResidency8Samples = None, sparseResidency16Samples = None, sparseResidencyAliased = None, variableMultisampleRate = None, inheritedQueries = None, ):
	return _newStruct('VkPhysicalDeviceFeatures', robustBufferAccess = robustBufferAccess, fullDrawIndexUint32 = fullDrawIndexUint32, imageCubeArray = imageCubeArray, independentBlend = independentBlend, geometryShader = geometryShader, tessellationShader = tessellationShader, sampleRateShading = sampleRateShading, dualSrcBlend = dualSrcBlend, logicOp = logicOp, multiDrawIndirect = multiDrawIndirect, drawIndirectFirstInstance = drawIndirectFirstInstance, depthClamp = depthClamp, depthBiasClamp = depthBiasClamp, fillModeNonSolid = fillModeNonSolid, depthBounds = depthBounds, wideLines = wideLines, largePoints = largePoints, alphaToOne = alphaToOne, multiViewport = multiViewport, samplerAnisotropy = samplerAnisotropy, textureCompressionETC2 = textureCompressionETC2, textureCompressionASTC_LDR = textureCompressionASTC_LDR, textureCompressionBC = textureCompressionBC, occlusionQueryPrecise = occlusionQueryPrecise, pipelineStatisticsQuery = pipelineStatisticsQuery, vertexPipelineStoresAndAtomics = vertexPipelineStoresAndAtomics, fragmentStoresAndAtomics = fragmentStoresAndAtomics, shaderTessellationAndGeometryPointSize = shaderTessellationAndGeometryPointSize, shaderImageGatherExtended = shaderImageGatherExtended, shaderStorageImageExtendedFormats = shaderStorageImageExtendedFormats, shaderStorageImageMultisample = shaderStorageImageMultisample, shaderStorageImageReadWithoutFormat = shaderStorageImageReadWithoutFormat, shaderStorageImageWriteWithoutFormat = shaderStorageImageWriteWithoutFormat, shaderUniformBufferArrayDynamicIndexing = shaderUniformBufferArrayDynamicIndexing, shaderSampledImageArrayDynamicIndexing = shaderSampledImageArrayDynamicIndexing, shaderStorageBufferArrayDynamicIndexing = shaderStorageBufferArrayDynamicIndexing, shaderStorageImageArrayDynamicIndexing = shaderStorageImageArrayDynamicIndexing, shaderClipDistance = shaderClipDistance, shaderCullDistance = shaderCullDistance, shaderFloat64 = shaderFloat64, shaderInt64 = shaderInt64, shaderInt16 = shaderInt16, shaderResourceResidency = shaderResourceResidency, shaderResourceMinLod = shaderResourceMinLod, sparseBinding = sparseBinding, sparseResidencyBuffer = sparseResidencyBuffer, sparseResidencyImage2D = sparseResidencyImage2D, sparseResidencyImage3D = sparseResidencyImage3D, sparseResidency2Samples = sparseResidency2Samples, sparseResidency4Samples = sparseResidency4Samples, sparseResidency8Samples = sparseResidency8Samples, sparseResidency16Samples = sparseResidency16Samples, sparseResidencyAliased = sparseResidencyAliased, variableMultisampleRate = variableMultisampleRate, inheritedQueries = inheritedQueries, )

def VkFormatProperties(linearTilingFeatures = None, optimalTilingFeatures = None, bufferFeatures = None, ):
	return _newStruct('VkFormatProperties', linearTilingFeatures = linearTilingFeatures, optimalTilingFeatures = optimalTilingFeatures, bufferFeatures = bufferFeatures, )

def VkExtent3D(width = None, height = None, depth = None, ):
	return _newStruct('VkExtent3D', width = width, height = height, depth = depth, )

def VkImageFormatProperties(maxExtent = None, maxMipLevels = None, maxArrayLayers = None, sampleCounts = None, maxResourceSize = None, ):
	return _newStruct('VkImageFormatProperties', maxExtent = maxExtent, maxMipLevels = maxMipLevels, maxArrayLayers = maxArrayLayers, sampleCounts = sampleCounts, maxResourceSize = maxResourceSize, )

def VkPhysicalDeviceLimits(maxImageDimension1D = None, maxImageDimension2D = None, maxImageDimension3D = None, maxImageDimensionCube = None, maxImageArrayLayers = None, maxTexelBufferElements = None, maxUniformBufferRange = None, maxStorageBufferRange = None, maxPushConstantsSize = None, maxMemoryAllocationCount = None, maxSamplerAllocationCount = None, bufferImageGranularity = None, sparseAddressSpaceSize = None, maxBoundDescriptorSets = None, maxPerStageDescriptorSamplers = None, maxPerStageDescriptorUniformBuffers = None, maxPerStageDescriptorStorageBuffers = None, maxPerStageDescriptorSampledImages = None, maxPerStageDescriptorStorageImages = None, maxPerStageDescriptorInputAttachments = None, maxPerStageResources = None, maxDescriptorSetSamplers = None, maxDescriptorSetUniformBuffers = None, maxDescriptorSetUniformBuffersDynamic = None, maxDescriptorSetStorageBuffers = None, maxDescriptorSetStorageBuffersDynamic = None, maxDescriptorSetSampledImages = None, maxDescriptorSetStorageImages = None, maxDescriptorSetInputAttachments = None, maxVertexInputAttributes = None, maxVertexInputBindings = None, maxVertexInputAttributeOffset = None, maxVertexInputBindingStride = None, maxVertexOutputComponents = None, maxTessellationGenerationLevel = None, maxTessellationPatchSize = None, maxTessellationControlPerVertexInputComponents = None, maxTessellationControlPerVertexOutputComponents = None, maxTessellationControlPerPatchOutputComponents = None, maxTessellationControlTotalOutputComponents = None, maxTessellationEvaluationInputComponents = None, maxTessellationEvaluationOutputComponents = None, maxGeometryShaderInvocations = None, maxGeometryInputComponents = None, maxGeometryOutputComponents = None, maxGeometryOutputVertices = None, maxGeometryTotalOutputComponents = None, maxFragmentInputComponents = None, maxFragmentOutputAttachments = None, maxFragmentDualSrcAttachments = None, maxFragmentCombinedOutputResources = None, maxComputeSharedMemorySize = None, maxComputeWorkGroupCount = None, maxComputeWorkGroupInvocations = None, maxComputeWorkGroupSize = None, subPixelPrecisionBits = None, subTexelPrecisionBits = None, mipmapPrecisionBits = None, maxDrawIndexedIndexValue = None, maxDrawIndirectCount = None, maxSamplerLodBias = None, maxSamplerAnisotropy = None, maxViewports = None, maxViewportDimensions = None, viewportBoundsRange = None, viewportSubPixelBits = None, minMemoryMapAlignment = None, minTexelBufferOffsetAlignment = None, minUniformBufferOffsetAlignment = None, minStorageBufferOffsetAlignment = None, minTexelOffset = None, maxTexelOffset = None, minTexelGatherOffset = None, maxTexelGatherOffset = None, minInterpolationOffset = None, maxInterpolationOffset = None, subPixelInterpolationOffsetBits = None, maxFramebufferWidth = None, maxFramebufferHeight = None, maxFramebufferLayers = None, framebufferColorSampleCounts = None, framebufferDepthSampleCounts = None, framebufferStencilSampleCounts = None, framebufferNoAttachmentsSampleCounts = None, maxColorAttachments = None, sampledImageColorSampleCounts = None, sampledImageIntegerSampleCounts = None, sampledImageDepthSampleCounts = None, sampledImageStencilSampleCounts = None, storageImageSampleCounts = None, maxSampleMaskWords = None, timestampComputeAndGraphics = None, timestampPeriod = None, maxClipDistances = None, maxCullDistances = None, maxCombinedClipAndCullDistances = None, discreteQueuePriorities = None, pointSizeRange = None, lineWidthRange = None, pointSizeGranularity = None, lineWidthGranularity = None, strictLines = None, standardSampleLocations = None, optimalBufferCopyOffsetAlignment = None, optimalBufferCopyRowPitchAlignment = None, nonCoherentAtomSize = None, ):
	return _newStruct('VkPhysicalDeviceLimits', maxImageDimension1D = maxImageDimension1D, maxImageDimension2D = maxImageDimension2D, maxImageDimension3D = maxImageDimension3D, maxImageDimensionCube = maxImageDimensionCube, maxImageArrayLayers = maxImageArrayLayers, maxTexelBufferElements = maxTexelBufferElements, maxUniformBufferRange = maxUniformBufferRange, maxStorageBufferRange = maxStorageBufferRange, maxPushConstantsSize = maxPushConstantsSize, maxMemoryAllocationCount = maxMemoryAllocationCount, maxSamplerAllocationCount = maxSamplerAllocationCount, bufferImageGranularity = bufferImageGranularity, sparseAddressSpaceSize = sparseAddressSpaceSize, maxBoundDescriptorSets = maxBoundDescriptorSets, maxPerStageDescriptorSamplers = maxPerStageDescriptorSamplers, maxPerStageDescriptorUniformBuffers = maxPerStageDescriptorUniformBuffers, maxPerStageDescriptorStorageBuffers = maxPerStageDescriptorStorageBuffers, maxPerStageDescriptorSampledImages = maxPerStageDescriptorSampledImages, maxPerStageDescriptorStorageImages = maxPerStageDescriptorStorageImages, maxPerStageDescriptorInputAttachments = maxPerStageDescriptorInputAttachments, maxPerStageResources = maxPerStageResources, maxDescriptorSetSamplers = maxDescriptorSetSamplers, maxDescriptorSetUniformBuffers = maxDescriptorSetUniformBuffers, maxDescriptorSetUniformBuffersDynamic = maxDescriptorSetUniformBuffersDynamic, maxDescriptorSetStorageBuffers = maxDescriptorSetStorageBuffers, maxDescriptorSetStorageBuffersDynamic = maxDescriptorSetStorageBuffersDynamic, maxDescriptorSetSampledImages = maxDescriptorSetSampledImages, maxDescriptorSetStorageImages = maxDescriptorSetStorageImages, maxDescriptorSetInputAttachments = maxDescriptorSetInputAttachments, maxVertexInputAttributes = maxVertexInputAttributes, maxVertexInputBindings = maxVertexInputBindings, maxVertexInputAttributeOffset = maxVertexInputAttributeOffset, maxVertexInputBindingStride = maxVertexInputBindingStride, maxVertexOutputComponents = maxVertexOutputComponents, maxTessellationGenerationLevel = maxTessellationGenerationLevel, maxTessellationPatchSize = maxTessellationPatchSize, maxTessellationControlPerVertexInputComponents = maxTessellationControlPerVertexInputComponents, maxTessellationControlPerVertexOutputComponents = maxTessellationControlPerVertexOutputComponents, maxTessellationControlPerPatchOutputComponents = maxTessellationControlPerPatchOutputComponents, maxTessellationControlTotalOutputComponents = maxTessellationControlTotalOutputComponents, maxTessellationEvaluationInputComponents = maxTessellationEvaluationInputComponents, maxTessellationEvaluationOutputComponents = maxTessellationEvaluationOutputComponents, maxGeometryShaderInvocations = maxGeometryShaderInvocations, maxGeometryInputComponents = maxGeometryInputComponents, maxGeometryOutputComponents = maxGeometryOutputComponents, maxGeometryOutputVertices = maxGeometryOutputVertices, maxGeometryTotalOutputComponents = maxGeometryTotalOutputComponents, maxFragmentInputComponents = maxFragmentInputComponents, maxFragmentOutputAttachments = maxFragmentOutputAttachments, maxFragmentDualSrcAttachments = maxFragmentDualSrcAttachments, maxFragmentCombinedOutputResources = maxFragmentCombinedOutputResources, maxComputeSharedMemorySize = maxComputeSharedMemorySize, maxComputeWorkGroupCount = maxComputeWorkGroupCount, maxComputeWorkGroupInvocations = maxComputeWorkGroupInvocations, maxComputeWorkGroupSize = maxComputeWorkGroupSize, subPixelPrecisionBits = subPixelPrecisionBits, subTexelPrecisionBits = subTexelPrecisionBits, mipmapPrecisionBits = mipmapPrecisionBits, maxDrawIndexedIndexValue = maxDrawIndexedIndexValue, maxDrawIndirectCount = maxDrawIndirectCount, maxSamplerLodBias = maxSamplerLodBias, maxSamplerAnisotropy = maxSamplerAnisotropy, maxViewports = maxViewports, maxViewportDimensions = maxViewportDimensions, viewportBoundsRange = viewportBoundsRange, viewportSubPixelBits = viewportSubPixelBits, minMemoryMapAlignment = minMemoryMapAlignment, minTexelBufferOffsetAlignment = minTexelBufferOffsetAlignment, minUniformBufferOffsetAlignment = minUniformBufferOffsetAlignment, minStorageBufferOffsetAlignment = minStorageBufferOffsetAlignment, minTexelOffset = minTexelOffset, maxTexelOffset = maxTexelOffset, minTexelGatherOffset = minTexelGatherOffset, maxTexelGatherOffset = maxTexelGatherOffset, minInterpolationOffset = minInterpolationOffset, maxInterpolationOffset = maxInterpolationOffset, subPixelInterpolationOffsetBits = subPixelInterpolationOffsetBits, maxFramebufferWidth = maxFramebufferWidth, maxFramebufferHeight = maxFramebufferHeight, maxFramebufferLayers = maxFramebufferLayers, framebufferColorSampleCounts = framebufferColorSampleCounts, framebufferDepthSampleCounts = framebufferDepthSampleCounts, framebufferStencilSampleCounts = framebufferStencilSampleCounts, framebufferNoAttachmentsSampleCounts = framebufferNoAttachmentsSampleCounts, maxColorAttachments = maxColorAttachments, sampledImageColorSampleCounts = sampledImageColorSampleCounts, sampledImageIntegerSampleCounts = sampledImageIntegerSampleCounts, sampledImageDepthSampleCounts = sampledImageDepthSampleCounts, sampledImageStencilSampleCounts = sampledImageStencilSampleCounts, storageImageSampleCounts = storageImageSampleCounts, maxSampleMaskWords = maxSampleMaskWords, timestampComputeAndGraphics = timestampComputeAndGraphics, timestampPeriod = timestampPeriod, maxClipDistances = maxClipDistances, maxCullDistances = maxCullDistances, maxCombinedClipAndCullDistances = maxCombinedClipAndCullDistances, discreteQueuePriorities = discreteQueuePriorities, pointSizeRange = pointSizeRange, lineWidthRange = lineWidthRange, pointSizeGranularity = pointSizeGranularity, lineWidthGranularity = lineWidthGranularity, strictLines = strictLines, standardSampleLocations = standardSampleLocations, optimalBufferCopyOffsetAlignment = optimalBufferCopyOffsetAlignment, optimalBufferCopyRowPitchAlignment = optimalBufferCopyRowPitchAlignment, nonCoherentAtomSize = nonCoherentAtomSize, )

def VkPhysicalDeviceSparseProperties(residencyStandard2DBlockShape = None, residencyStandard2DMultisampleBlockShape = None, residencyStandard3DBlockShape = None, residencyAlignedMipSize = None, residencyNonResidentStrict = None, ):
	return _newStruct('VkPhysicalDeviceSparseProperties', residencyStandard2DBlockShape = residencyStandard2DBlockShape, residencyStandard2DMultisampleBlockShape = residencyStandard2DMultisampleBlockShape, residencyStandard3DBlockShape = residencyStandard3DBlockShape, residencyAlignedMipSize = residencyAlignedMipSize, residencyNonResidentStrict = residencyNonResidentStrict, )

def VkPhysicalDeviceProperties(apiVersion = None, driverVersion = None, vendorID = None, deviceID = None, deviceType = None, deviceName = None, pipelineCacheUUID = None, limits = None, sparseProperties = None, ):
	return _newStruct('VkPhysicalDeviceProperties', apiVersion = apiVersion, driverVersion = driverVersion, vendorID = vendorID, deviceID = deviceID, deviceType = deviceType, deviceName = deviceName, pipelineCacheUUID = pipelineCacheUUID, limits = limits, sparseProperties = sparseProperties, )

def VkQueueFamilyProperties(queueFlags = None, queueCount = None, timestampValidBits = None, minImageTransferGranularity = None, ):
	return _newStruct('VkQueueFamilyProperties', queueFlags = queueFlags, queueCount = queueCount, timestampValidBits = timestampValidBits, minImageTransferGranularity = minImageTransferGranularity, )

def VkMemoryType(propertyFlags = None, heapIndex = None, ):
	return _newStruct('VkMemoryType', propertyFlags = propertyFlags, heapIndex = heapIndex, )

def VkMemoryHeap(size = None, flags = None, ):
	return _newStruct('VkMemoryHeap', size = size, flags = flags, )

def VkPhysicalDeviceMemoryProperties(memoryTypeCount = None, memoryTypes = None, memoryHeapCount = None, memoryHeaps = None, ):
	return _newStruct('VkPhysicalDeviceMemoryProperties', memoryTypeCount = memoryTypeCount, memoryTypes = memoryTypes, memoryHeapCount = memoryHeapCount, memoryHeaps = memoryHeaps, )

def VkDeviceQueueCreateInfo(sType = VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO, pNext = None, flags = None, queueFamilyIndex = None, queueCount = None, pQueuePriorities = None, ):
	return _newStruct('VkDeviceQueueCreateInfo', sType = sType, pNext = pNext, flags = flags, queueFamilyIndex = queueFamilyIndex, queueCount = queueCount, pQueuePriorities = pQueuePriorities, )

def VkDeviceCreateInfo(sType = VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO, pNext = None, flags = None, queueCreateInfoCount = None, pQueueCreateInfos = None, enabledLayerCount = None, ppEnabledLayerNames = None, enabledExtensionCount = None, ppEnabledExtensionNames = None, pEnabledFeatures = None, ):
	return _newStruct('VkDeviceCreateInfo', sType = sType, pNext = pNext, flags = flags, queueCreateInfoCount = queueCreateInfoCount, pQueueCreateInfos = pQueueCreateInfos, enabledLayerCount = enabledLayerCount, ppEnabledLayerNames = ppEnabledLayerNames, enabledExtensionCount = enabledExtensionCount, ppEnabledExtensionNames = ppEnabledExtensionNames, pEnabledFeatures = pEnabledFeatures, )

def VkExtensionProperties(extensionName = None, specVersion = None, ):
	return _newStruct('VkExtensionProperties', extensionName = extensionName, specVersion = specVersion, )

def VkLayerProperties(layerName = None, specVersion = None, implementationVersion = None, description = None, ):
	return _newStruct('VkLayerProperties', layerName = layerName, specVersion = specVersion, implementationVersion = implementationVersion, description = description, )

def VkSubmitInfo(sType = VK_STRUCTURE_TYPE_SUBMIT_INFO, pNext = None, waitSemaphoreCount = None, pWaitSemaphores = None, pWaitDstStageMask = None, commandBufferCount = None, pCommandBuffers = None, signalSemaphoreCount = None, pSignalSemaphores = None, ):
	return _newStruct('VkSubmitInfo', sType = sType, pNext = pNext, waitSemaphoreCount = waitSemaphoreCount, pWaitSemaphores = pWaitSemaphores, pWaitDstStageMask = pWaitDstStageMask, commandBufferCount = commandBufferCount, pCommandBuffers = pCommandBuffers, signalSemaphoreCount = signalSemaphoreCount, pSignalSemaphores = pSignalSemaphores, )

def VkMemoryAllocateInfo(sType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO, pNext = None, allocationSize = None, memoryTypeIndex = None, ):
	return _newStruct('VkMemoryAllocateInfo', sType = sType, pNext = pNext, allocationSize = allocationSize, memoryTypeIndex = memoryTypeIndex, )

def VkMappedMemoryRange(sType = VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE, pNext = None, memory = None, offset = None, size = None, ):
	return _newStruct('VkMappedMemoryRange', sType = sType, pNext = pNext, memory = memory, offset = offset, size = size, )

def VkMemoryRequirements(size = None, alignment = None, memoryTypeBits = None, ):
	return _newStruct('VkMemoryRequirements', size = size, alignment = alignment, memoryTypeBits = memoryTypeBits, )

def VkSparseImageFormatProperties(aspectMask = None, imageGranularity = None, flags = None, ):
	return _newStruct('VkSparseImageFormatProperties', aspectMask = aspectMask, imageGranularity = imageGranularity, flags = flags, )

def VkSparseImageMemoryRequirements(formatProperties = None, imageMipTailFirstLod = None, imageMipTailSize = None, imageMipTailOffset = None, imageMipTailStride = None, ):
	return _newStruct('VkSparseImageMemoryRequirements', formatProperties = formatProperties, imageMipTailFirstLod = imageMipTailFirstLod, imageMipTailSize = imageMipTailSize, imageMipTailOffset = imageMipTailOffset, imageMipTailStride = imageMipTailStride, )

def VkSparseMemoryBind(resourceOffset = None, size = None, memory = None, memoryOffset = None, flags = None, ):
	return _newStruct('VkSparseMemoryBind', resourceOffset = resourceOffset, size = size, memory = memory, memoryOffset = memoryOffset, flags = flags, )

def VkSparseBufferMemoryBindInfo(buffer = None, bindCount = None, pBinds = None, ):
	return _newStruct('VkSparseBufferMemoryBindInfo', buffer = buffer, bindCount = bindCount, pBinds = pBinds, )

def VkSparseImageOpaqueMemoryBindInfo(image = None, bindCount = None, pBinds = None, ):
	return _newStruct('VkSparseImageOpaqueMemoryBindInfo', image = image, bindCount = bindCount, pBinds = pBinds, )

def VkImageSubresource(aspectMask = None, mipLevel = None, arrayLayer = None, ):
	return _newStruct('VkImageSubresource', aspectMask = aspectMask, mipLevel = mipLevel, arrayLayer = arrayLayer, )

def VkOffset3D(x = None, y = None, z = None, ):
	return _newStruct('VkOffset3D', x = x, y = y, z = z, )

def VkSparseImageMemoryBind(subresource = None, offset = None, extent = None, memory = None, memoryOffset = None, flags = None, ):
	return _newStruct('VkSparseImageMemoryBind', subresource = subresource, offset = offset, extent = extent, memory = memory, memoryOffset = memoryOffset, flags = flags, )

def VkSparseImageMemoryBindInfo(image = None, bindCount = None, pBinds = None, ):
	return _newStruct('VkSparseImageMemoryBindInfo', image = image, bindCount = bindCount, pBinds = pBinds, )

def VkBindSparseInfo(sType = VK_STRUCTURE_TYPE_BIND_SPARSE_INFO, pNext = None, waitSemaphoreCount = None, pWaitSemaphores = None, bufferBindCount = None, pBufferBinds = None, imageOpaqueBindCount = None, pImageOpaqueBinds = None, imageBindCount = None, pImageBinds = None, signalSemaphoreCount = None, pSignalSemaphores = None, ):
	return _newStruct('VkBindSparseInfo', sType = sType, pNext = pNext, waitSemaphoreCount = waitSemaphoreCount, pWaitSemaphores = pWaitSemaphores, bufferBindCount = bufferBindCount, pBufferBinds = pBufferBinds, imageOpaqueBindCount = imageOpaqueBindCount, pImageOpaqueBinds = pImageOpaqueBinds, imageBindCount = imageBindCount, pImageBinds = pImageBinds, signalSemaphoreCount = signalSemaphoreCount, pSignalSemaphores = pSignalSemaphores, )

def VkFenceCreateInfo(sType = VK_STRUCTURE_TYPE_FENCE_CREATE_INFO, pNext = None, flags = None, ):
	return _newStruct('VkFenceCreateInfo', sType = sType, pNext = pNext, flags = flags, )

def VkSemaphoreCreateInfo(sType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO, pNext = None, flags = None, ):
	return _newStruct('VkSemaphoreCreateInfo', sType = sType, pNext = pNext, flags = flags, )

def VkEventCreateInfo(sType = VK_STRUCTURE_TYPE_EVENT_CREATE_INFO, pNext = None, flags = None, ):
	return _newStruct('VkEventCreateInfo', sType = sType, pNext = pNext, flags = flags, )

def VkQueryPoolCreateInfo(sType = VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO, pNext = None, flags = None, queryType = None, queryCount = None, pipelineStatistics = None, ):
	return _newStruct('VkQueryPoolCreateInfo', sType = sType, pNext = pNext, flags = flags, queryType = queryType, queryCount = queryCount, pipelineStatistics = pipelineStatistics, )

def VkBufferCreateInfo(sType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO, pNext = None, flags = None, size = None, usage = None, sharingMode = None, queueFamilyIndexCount = None, pQueueFamilyIndices = None, ):
	return _newStruct('VkBufferCreateInfo', sType = sType, pNext = pNext, flags = flags, size = size, usage = usage, sharingMode = sharingMode, queueFamilyIndexCount = queueFamilyIndexCount, pQueueFamilyIndices = pQueueFamilyIndices, )

def VkBufferViewCreateInfo(sType = VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO, pNext = None, flags = None, buffer = None, format = None, offset = None, range = None, ):
	return _newStruct('VkBufferViewCreateInfo', sType = sType, pNext = pNext, flags = flags, buffer = buffer, format = format, offset = offset, range = range, )

def VkImageCreateInfo(sType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO, pNext = None, flags = None, imageType = None, format = None, extent = None, mipLevels = None, arrayLayers = None, samples = None, tiling = None, usage = None, sharingMode = None, queueFamilyIndexCount = None, pQueueFamilyIndices = None, initialLayout = None, ):
	return _newStruct('VkImageCreateInfo', sType = sType, pNext = pNext, flags = flags, imageType = imageType, format = format, extent = extent, mipLevels = mipLevels, arrayLayers = arrayLayers, samples = samples, tiling = tiling, usage = usage, sharingMode = sharingMode, queueFamilyIndexCount = queueFamilyIndexCount, pQueueFamilyIndices = pQueueFamilyIndices, initialLayout = initialLayout, )

def VkSubresourceLayout(offset = None, size = None, rowPitch = None, arrayPitch = None, depthPitch = None, ):
	return _newStruct('VkSubresourceLayout', offset = offset, size = size, rowPitch = rowPitch, arrayPitch = arrayPitch, depthPitch = depthPitch, )

def VkComponentMapping(r = None, g = None, b = None, a = None, ):
	return _newStruct('VkComponentMapping', r = r, g = g, b = b, a = a, )

def VkImageSubresourceRange(aspectMask = None, baseMipLevel = None, levelCount = None, baseArrayLayer = None, layerCount = None, ):
	return _newStruct('VkImageSubresourceRange', aspectMask = aspectMask, baseMipLevel = baseMipLevel, levelCount = levelCount, baseArrayLayer = baseArrayLayer, layerCount = layerCount, )

def VkImageViewCreateInfo(sType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO, pNext = None, flags = None, image = None, viewType = None, format = None, components = None, subresourceRange = None, ):
	return _newStruct('VkImageViewCreateInfo', sType = sType, pNext = pNext, flags = flags, image = image, viewType = viewType, format = format, components = components, subresourceRange = subresourceRange, )

def VkShaderModuleCreateInfo(sType = VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO, pNext = None, flags = None, codeSize = None, pCode = None, ):
	return _newStruct('VkShaderModuleCreateInfo', sType = sType, pNext = pNext, flags = flags, codeSize = codeSize, pCode = pCode, )

def VkPipelineCacheCreateInfo(sType = VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO, pNext = None, flags = None, initialDataSize = None, pInitialData = None, ):
	return _newStruct('VkPipelineCacheCreateInfo', sType = sType, pNext = pNext, flags = flags, initialDataSize = initialDataSize, pInitialData = pInitialData, )

def VkSpecializationMapEntry(constantID = None, offset = None, size = None, ):
	return _newStruct('VkSpecializationMapEntry', constantID = constantID, offset = offset, size = size, )

def VkSpecializationInfo(mapEntryCount = None, pMapEntries = None, dataSize = None, pData = None, ):
	return _newStruct('VkSpecializationInfo', mapEntryCount = mapEntryCount, pMapEntries = pMapEntries, dataSize = dataSize, pData = pData, )

def VkPipelineShaderStageCreateInfo(sType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO, pNext = None, flags = None, stage = None, module = None, pName = None, pSpecializationInfo = None, ):
	return _newStruct('VkPipelineShaderStageCreateInfo', sType = sType, pNext = pNext, flags = flags, stage = stage, module = module, pName = pName, pSpecializationInfo = pSpecializationInfo, )

def VkVertexInputBindingDescription(binding = None, stride = None, inputRate = None, ):
	return _newStruct('VkVertexInputBindingDescription', binding = binding, stride = stride, inputRate = inputRate, )

def VkVertexInputAttributeDescription(location = None, binding = None, format = None, offset = None, ):
	return _newStruct('VkVertexInputAttributeDescription', location = location, binding = binding, format = format, offset = offset, )

def VkPipelineVertexInputStateCreateInfo(sType = VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO, pNext = None, flags = None, vertexBindingDescriptionCount = None, pVertexBindingDescriptions = None, vertexAttributeDescriptionCount = None, pVertexAttributeDescriptions = None, ):
	return _newStruct('VkPipelineVertexInputStateCreateInfo', sType = sType, pNext = pNext, flags = flags, vertexBindingDescriptionCount = vertexBindingDescriptionCount, pVertexBindingDescriptions = pVertexBindingDescriptions, vertexAttributeDescriptionCount = vertexAttributeDescriptionCount, pVertexAttributeDescriptions = pVertexAttributeDescriptions, )

def VkPipelineInputAssemblyStateCreateInfo(sType = VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO, pNext = None, flags = None, topology = None, primitiveRestartEnable = None, ):
	return _newStruct('VkPipelineInputAssemblyStateCreateInfo', sType = sType, pNext = pNext, flags = flags, topology = topology, primitiveRestartEnable = primitiveRestartEnable, )

def VkPipelineTessellationStateCreateInfo(sType = VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO, pNext = None, flags = None, patchControlPoints = None, ):
	return _newStruct('VkPipelineTessellationStateCreateInfo', sType = sType, pNext = pNext, flags = flags, patchControlPoints = patchControlPoints, )

def VkViewport(x = None, y = None, width = None, height = None, minDepth = None, maxDepth = None, ):
	return _newStruct('VkViewport', x = x, y = y, width = width, height = height, minDepth = minDepth, maxDepth = maxDepth, )

def VkOffset2D(x = None, y = None, ):
	return _newStruct('VkOffset2D', x = x, y = y, )

def VkExtent2D(width = None, height = None, ):
	return _newStruct('VkExtent2D', width = width, height = height, )

def VkRect2D(offset = None, extent = None, ):
	return _newStruct('VkRect2D', offset = offset, extent = extent, )

def VkPipelineViewportStateCreateInfo(sType = VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO, pNext = None, flags = None, viewportCount = None, pViewports = None, scissorCount = None, pScissors = None, ):
	return _newStruct('VkPipelineViewportStateCreateInfo', sType = sType, pNext = pNext, flags = flags, viewportCount = viewportCount, pViewports = pViewports, scissorCount = scissorCount, pScissors = pScissors, )

def VkPipelineRasterizationStateCreateInfo(sType = VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO, pNext = None, flags = None, depthClampEnable = None, rasterizerDiscardEnable = None, polygonMode = None, cullMode = None, frontFace = None, depthBiasEnable = None, depthBiasConstantFactor = None, depthBiasClamp = None, depthBiasSlopeFactor = None, lineWidth = None, ):
	return _newStruct('VkPipelineRasterizationStateCreateInfo', sType = sType, pNext = pNext, flags = flags, depthClampEnable = depthClampEnable, rasterizerDiscardEnable = rasterizerDiscardEnable, polygonMode = polygonMode, cullMode = cullMode, frontFace = frontFace, depthBiasEnable = depthBiasEnable, depthBiasConstantFactor = depthBiasConstantFactor, depthBiasClamp = depthBiasClamp, depthBiasSlopeFactor = depthBiasSlopeFactor, lineWidth = lineWidth, )

def VkPipelineMultisampleStateCreateInfo(sType = VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO, pNext = None, flags = None, rasterizationSamples = None, sampleShadingEnable = None, minSampleShading = None, pSampleMask = None, alphaToCoverageEnable = None, alphaToOneEnable = None, ):
	return _newStruct('VkPipelineMultisampleStateCreateInfo', sType = sType, pNext = pNext, flags = flags, rasterizationSamples = rasterizationSamples, sampleShadingEnable = sampleShadingEnable, minSampleShading = minSampleShading, pSampleMask = pSampleMask, alphaToCoverageEnable = alphaToCoverageEnable, alphaToOneEnable = alphaToOneEnable, )

def VkStencilOpState(failOp = None, passOp = None, depthFailOp = None, compareOp = None, compareMask = None, writeMask = None, reference = None, ):
	return _newStruct('VkStencilOpState', failOp = failOp, passOp = passOp, depthFailOp = depthFailOp, compareOp = compareOp, compareMask = compareMask, writeMask = writeMask, reference = reference, )

def VkPipelineDepthStencilStateCreateInfo(sType = VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO, pNext = None, flags = None, depthTestEnable = None, depthWriteEnable = None, depthCompareOp = None, depthBoundsTestEnable = None, stencilTestEnable = None, front = None, back = None, minDepthBounds = None, maxDepthBounds = None, ):
	return _newStruct('VkPipelineDepthStencilStateCreateInfo', sType = sType, pNext = pNext, flags = flags, depthTestEnable = depthTestEnable, depthWriteEnable = depthWriteEnable, depthCompareOp = depthCompareOp, depthBoundsTestEnable = depthBoundsTestEnable, stencilTestEnable = stencilTestEnable, front = front, back = back, minDepthBounds = minDepthBounds, maxDepthBounds = maxDepthBounds, )

def VkPipelineColorBlendAttachmentState(blendEnable = None, srcColorBlendFactor = None, dstColorBlendFactor = None, colorBlendOp = None, srcAlphaBlendFactor = None, dstAlphaBlendFactor = None, alphaBlendOp = None, colorWriteMask = None, ):
	return _newStruct('VkPipelineColorBlendAttachmentState', blendEnable = blendEnable, srcColorBlendFactor = srcColorBlendFactor, dstColorBlendFactor = dstColorBlendFactor, colorBlendOp = colorBlendOp, srcAlphaBlendFactor = srcAlphaBlendFactor, dstAlphaBlendFactor = dstAlphaBlendFactor, alphaBlendOp = alphaBlendOp, colorWriteMask = colorWriteMask, )

def VkPipelineColorBlendStateCreateInfo(sType = VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO, pNext = None, flags = None, logicOpEnable = None, logicOp = None, attachmentCount = None, pAttachments = None, blendConstants = None, ):
	return _newStruct('VkPipelineColorBlendStateCreateInfo', sType = sType, pNext = pNext, flags = flags, logicOpEnable = logicOpEnable, logicOp = logicOp, attachmentCount = attachmentCount, pAttachments = pAttachments, blendConstants = blendConstants, )

def VkPipelineDynamicStateCreateInfo(sType = VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO, pNext = None, flags = None, dynamicStateCount = None, pDynamicStates = None, ):
	return _newStruct('VkPipelineDynamicStateCreateInfo', sType = sType, pNext = pNext, flags = flags, dynamicStateCount = dynamicStateCount, pDynamicStates = pDynamicStates, )

def VkGraphicsPipelineCreateInfo(sType = VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO, pNext = None, flags = None, stageCount = None, pStages = None, pVertexInputState = None, pInputAssemblyState = None, pTessellationState = None, pViewportState = None, pRasterizationState = None, pMultisampleState = None, pDepthStencilState = None, pColorBlendState = None, pDynamicState = None, layout = None, renderPass = None, subpass = None, basePipelineHandle = None, basePipelineIndex = None, ):
	return _newStruct('VkGraphicsPipelineCreateInfo', sType = sType, pNext = pNext, flags = flags, stageCount = stageCount, pStages = pStages, pVertexInputState = pVertexInputState, pInputAssemblyState = pInputAssemblyState, pTessellationState = pTessellationState, pViewportState = pViewportState, pRasterizationState = pRasterizationState, pMultisampleState = pMultisampleState, pDepthStencilState = pDepthStencilState, pColorBlendState = pColorBlendState, pDynamicState = pDynamicState, layout = layout, renderPass = renderPass, subpass = subpass, basePipelineHandle = basePipelineHandle, basePipelineIndex = basePipelineIndex, )

def VkComputePipelineCreateInfo(sType = VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO, pNext = None, flags = None, stage = None, layout = None, basePipelineHandle = None, basePipelineIndex = None, ):
	return _newStruct('VkComputePipelineCreateInfo', sType = sType, pNext = pNext, flags = flags, stage = stage, layout = layout, basePipelineHandle = basePipelineHandle, basePipelineIndex = basePipelineIndex, )

def VkPushConstantRange(stageFlags = None, offset = None, size = None, ):
	return _newStruct('VkPushConstantRange', stageFlags = stageFlags, offset = offset, size = size, )

def VkPipelineLayoutCreateInfo(sType = VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO, pNext = None, flags = None, setLayoutCount = None, pSetLayouts = None, pushConstantRangeCount = None, pPushConstantRanges = None, ):
	return _newStruct('VkPipelineLayoutCreateInfo', sType = sType, pNext = pNext, flags = flags, setLayoutCount = setLayoutCount, pSetLayouts = pSetLayouts, pushConstantRangeCount = pushConstantRangeCount, pPushConstantRanges = pPushConstantRanges, )

def VkSamplerCreateInfo(sType = VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO, pNext = None, flags = None, magFilter = None, minFilter = None, mipmapMode = None, addressModeU = None, addressModeV = None, addressModeW = None, mipLodBias = None, anisotropyEnable = None, maxAnisotropy = None, compareEnable = None, compareOp = None, minLod = None, maxLod = None, borderColor = None, unnormalizedCoordinates = None, ):
	return _newStruct('VkSamplerCreateInfo', sType = sType, pNext = pNext, flags = flags, magFilter = magFilter, minFilter = minFilter, mipmapMode = mipmapMode, addressModeU = addressModeU, addressModeV = addressModeV, addressModeW = addressModeW, mipLodBias = mipLodBias, anisotropyEnable = anisotropyEnable, maxAnisotropy = maxAnisotropy, compareEnable = compareEnable, compareOp = compareOp, minLod = minLod, maxLod = maxLod, borderColor = borderColor, unnormalizedCoordinates = unnormalizedCoordinates, )

def VkDescriptorSetLayoutBinding(binding = None, descriptorType = None, descriptorCount = None, stageFlags = None, pImmutableSamplers = None, ):
	return _newStruct('VkDescriptorSetLayoutBinding', binding = binding, descriptorType = descriptorType, descriptorCount = descriptorCount, stageFlags = stageFlags, pImmutableSamplers = pImmutableSamplers, )

def VkDescriptorSetLayoutCreateInfo(sType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO, pNext = None, flags = None, bindingCount = None, pBindings = None, ):
	return _newStruct('VkDescriptorSetLayoutCreateInfo', sType = sType, pNext = pNext, flags = flags, bindingCount = bindingCount, pBindings = pBindings, )

def VkDescriptorPoolSize(type = None, descriptorCount = None, ):
	return _newStruct('VkDescriptorPoolSize', type = type, descriptorCount = descriptorCount, )

def VkDescriptorPoolCreateInfo(sType = VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO, pNext = None, flags = None, maxSets = None, poolSizeCount = None, pPoolSizes = None, ):
	return _newStruct('VkDescriptorPoolCreateInfo', sType = sType, pNext = pNext, flags = flags, maxSets = maxSets, poolSizeCount = poolSizeCount, pPoolSizes = pPoolSizes, )

def VkDescriptorSetAllocateInfo(sType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO, pNext = None, descriptorPool = None, descriptorSetCount = None, pSetLayouts = None, ):
	return _newStruct('VkDescriptorSetAllocateInfo', sType = sType, pNext = pNext, descriptorPool = descriptorPool, descriptorSetCount = descriptorSetCount, pSetLayouts = pSetLayouts, )

def VkDescriptorImageInfo(sampler = None, imageView = None, imageLayout = None, ):
	return _newStruct('VkDescriptorImageInfo', sampler = sampler, imageView = imageView, imageLayout = imageLayout, )

def VkDescriptorBufferInfo(buffer = None, offset = None, range = None, ):
	return _newStruct('VkDescriptorBufferInfo', buffer = buffer, offset = offset, range = range, )

def VkWriteDescriptorSet(sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET, pNext = None, dstSet = None, dstBinding = None, dstArrayElement = None, descriptorCount = None, descriptorType = None, pImageInfo = None, pBufferInfo = None, pTexelBufferView = None, ):
	return _newStruct('VkWriteDescriptorSet', sType = sType, pNext = pNext, dstSet = dstSet, dstBinding = dstBinding, dstArrayElement = dstArrayElement, descriptorCount = descriptorCount, descriptorType = descriptorType, pImageInfo = pImageInfo, pBufferInfo = pBufferInfo, pTexelBufferView = pTexelBufferView, )

def VkCopyDescriptorSet(sType = VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET, pNext = None, srcSet = None, srcBinding = None, srcArrayElement = None, dstSet = None, dstBinding = None, dstArrayElement = None, descriptorCount = None, ):
	return _newStruct('VkCopyDescriptorSet', sType = sType, pNext = pNext, srcSet = srcSet, srcBinding = srcBinding, srcArrayElement = srcArrayElement, dstSet = dstSet, dstBinding = dstBinding, dstArrayElement = dstArrayElement, descriptorCount = descriptorCount, )

def VkFramebufferCreateInfo(sType = VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO, pNext = None, flags = None, renderPass = None, attachmentCount = None, pAttachments = None, width = None, height = None, layers = None, ):
	return _newStruct('VkFramebufferCreateInfo', sType = sType, pNext = pNext, flags = flags, renderPass = renderPass, attachmentCount = attachmentCount, pAttachments = pAttachments, width = width, height = height, layers = layers, )

def VkAttachmentDescription(flags = None, format = None, samples = None, loadOp = None, storeOp = None, stencilLoadOp = None, stencilStoreOp = None, initialLayout = None, finalLayout = None, ):
	return _newStruct('VkAttachmentDescription', flags = flags, format = format, samples = samples, loadOp = loadOp, storeOp = storeOp, stencilLoadOp = stencilLoadOp, stencilStoreOp = stencilStoreOp, initialLayout = initialLayout, finalLayout = finalLayout, )

def VkAttachmentReference(attachment = None, layout = None, ):
	return _newStruct('VkAttachmentReference', attachment = attachment, layout = layout, )

def VkSubpassDescription(flags = None, pipelineBindPoint = None, inputAttachmentCount = None, pInputAttachments = None, colorAttachmentCount = None, pColorAttachments = None, pResolveAttachments = None, pDepthStencilAttachment = None, preserveAttachmentCount = None, pPreserveAttachments = None, ):
	return _newStruct('VkSubpassDescription', flags = flags, pipelineBindPoint = pipelineBindPoint, inputAttachmentCount = inputAttachmentCount, pInputAttachments = pInputAttachments, colorAttachmentCount = colorAttachmentCount, pColorAttachments = pColorAttachments, pResolveAttachments = pResolveAttachments, pDepthStencilAttachment = pDepthStencilAttachment, preserveAttachmentCount = preserveAttachmentCount, pPreserveAttachments = pPreserveAttachments, )

def VkSubpassDependency(srcSubpass = None, dstSubpass = None, srcStageMask = None, dstStageMask = None, srcAccessMask = None, dstAccessMask = None, dependencyFlags = None, ):
	return _newStruct('VkSubpassDependency', srcSubpass = srcSubpass, dstSubpass = dstSubpass, srcStageMask = srcStageMask, dstStageMask = dstStageMask, srcAccessMask = srcAccessMask, dstAccessMask = dstAccessMask, dependencyFlags = dependencyFlags, )

def VkRenderPassCreateInfo(sType = VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO, pNext = None, flags = None, attachmentCount = None, pAttachments = None, subpassCount = None, pSubpasses = None, dependencyCount = None, pDependencies = None, ):
	return _newStruct('VkRenderPassCreateInfo', sType = sType, pNext = pNext, flags = flags, attachmentCount = attachmentCount, pAttachments = pAttachments, subpassCount = subpassCount, pSubpasses = pSubpasses, dependencyCount = dependencyCount, pDependencies = pDependencies, )

def VkCommandPoolCreateInfo(sType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO, pNext = None, flags = None, queueFamilyIndex = None, ):
	return _newStruct('VkCommandPoolCreateInfo', sType = sType, pNext = pNext, flags = flags, queueFamilyIndex = queueFamilyIndex, )

def VkCommandBufferAllocateInfo(sType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO, pNext = None, commandPool = None, level = None, commandBufferCount = None, ):
	return _newStruct('VkCommandBufferAllocateInfo', sType = sType, pNext = pNext, commandPool = commandPool, level = level, commandBufferCount = commandBufferCount, )

def VkCommandBufferInheritanceInfo(sType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO, pNext = None, renderPass = None, subpass = None, framebuffer = None, occlusionQueryEnable = None, queryFlags = None, pipelineStatistics = None, ):
	return _newStruct('VkCommandBufferInheritanceInfo', sType = sType, pNext = pNext, renderPass = renderPass, subpass = subpass, framebuffer = framebuffer, occlusionQueryEnable = occlusionQueryEnable, queryFlags = queryFlags, pipelineStatistics = pipelineStatistics, )

def VkCommandBufferBeginInfo(sType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO, pNext = None, flags = None, pInheritanceInfo = None, ):
	return _newStruct('VkCommandBufferBeginInfo', sType = sType, pNext = pNext, flags = flags, pInheritanceInfo = pInheritanceInfo, )

def VkBufferCopy(srcOffset = None, dstOffset = None, size = None, ):
	return _newStruct('VkBufferCopy', srcOffset = srcOffset, dstOffset = dstOffset, size = size, )

def VkImageSubresourceLayers(aspectMask = None, mipLevel = None, baseArrayLayer = None, layerCount = None, ):
	return _newStruct('VkImageSubresourceLayers', aspectMask = aspectMask, mipLevel = mipLevel, baseArrayLayer = baseArrayLayer, layerCount = layerCount, )

def VkImageCopy(srcSubresource = None, srcOffset = None, dstSubresource = None, dstOffset = None, extent = None, ):
	return _newStruct('VkImageCopy', srcSubresource = srcSubresource, srcOffset = srcOffset, dstSubresource = dstSubresource, dstOffset = dstOffset, extent = extent, )

def VkImageBlit(srcSubresource = None, srcOffsets = None, dstSubresource = None, dstOffsets = None, ):
	return _newStruct('VkImageBlit', srcSubresource = srcSubresource, srcOffsets = srcOffsets, dstSubresource = dstSubresource, dstOffsets = dstOffsets, )

def VkBufferImageCopy(bufferOffset = None, bufferRowLength = None, bufferImageHeight = None, imageSubresource = None, imageOffset = None, imageExtent = None, ):
	return _newStruct('VkBufferImageCopy', bufferOffset = bufferOffset, bufferRowLength = bufferRowLength, bufferImageHeight = bufferImageHeight, imageSubresource = imageSubresource, imageOffset = imageOffset, imageExtent = imageExtent, )

def VkClearColorValue(float32 = None, int32 = None, uint32 = None, ):
	return _newStruct('VkClearColorValue', float32 = float32, int32 = int32, uint32 = uint32, )

def VkClearDepthStencilValue(depth = None, stencil = None, ):
	return _newStruct('VkClearDepthStencilValue', depth = depth, stencil = stencil, )

def VkClearValue(color = None, depthStencil = None, ):
	return _newStruct('VkClearValue', color = color, depthStencil = depthStencil, )

def VkClearAttachment(aspectMask = None, colorAttachment = None, clearValue = None, ):
	return _newStruct('VkClearAttachment', aspectMask = aspectMask, colorAttachment = colorAttachment, clearValue = clearValue, )

def VkClearRect(rect = None, baseArrayLayer = None, layerCount = None, ):
	return _newStruct('VkClearRect', rect = rect, baseArrayLayer = baseArrayLayer, layerCount = layerCount, )

def VkImageResolve(srcSubresource = None, srcOffset = None, dstSubresource = None, dstOffset = None, extent = None, ):
	return _newStruct('VkImageResolve', srcSubresource = srcSubresource, srcOffset = srcOffset, dstSubresource = dstSubresource, dstOffset = dstOffset, extent = extent, )

def VkMemoryBarrier(sType = VK_STRUCTURE_TYPE_MEMORY_BARRIER, pNext = None, srcAccessMask = None, dstAccessMask = None, ):
	return _newStruct('VkMemoryBarrier', sType = sType, pNext = pNext, srcAccessMask = srcAccessMask, dstAccessMask = dstAccessMask, )

def VkBufferMemoryBarrier(sType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER, pNext = None, srcAccessMask = None, dstAccessMask = None, srcQueueFamilyIndex = None, dstQueueFamilyIndex = None, buffer = None, offset = None, size = None, ):
	return _newStruct('VkBufferMemoryBarrier', sType = sType, pNext = pNext, srcAccessMask = srcAccessMask, dstAccessMask = dstAccessMask, srcQueueFamilyIndex = srcQueueFamilyIndex, dstQueueFamilyIndex = dstQueueFamilyIndex, buffer = buffer, offset = offset, size = size, )

def VkImageMemoryBarrier(sType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER, pNext = None, srcAccessMask = None, dstAccessMask = None, oldLayout = None, newLayout = None, srcQueueFamilyIndex = None, dstQueueFamilyIndex = None, image = None, subresourceRange = None, ):
	return _newStruct('VkImageMemoryBarrier', sType = sType, pNext = pNext, srcAccessMask = srcAccessMask, dstAccessMask = dstAccessMask, oldLayout = oldLayout, newLayout = newLayout, srcQueueFamilyIndex = srcQueueFamilyIndex, dstQueueFamilyIndex = dstQueueFamilyIndex, image = image, subresourceRange = subresourceRange, )

def VkRenderPassBeginInfo(sType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO, pNext = None, renderPass = None, framebuffer = None, renderArea = None, clearValueCount = None, pClearValues = None, ):
	return _newStruct('VkRenderPassBeginInfo', sType = sType, pNext = pNext, renderPass = renderPass, framebuffer = framebuffer, renderArea = renderArea, clearValueCount = clearValueCount, pClearValues = pClearValues, )

def VkDispatchIndirectCommand(x = None, y = None, z = None, ):
	return _newStruct('VkDispatchIndirectCommand', x = x, y = y, z = z, )

def VkDrawIndexedIndirectCommand(indexCount = None, instanceCount = None, firstIndex = None, vertexOffset = None, firstInstance = None, ):
	return _newStruct('VkDrawIndexedIndirectCommand', indexCount = indexCount, instanceCount = instanceCount, firstIndex = firstIndex, vertexOffset = vertexOffset, firstInstance = firstInstance, )

def VkDrawIndirectCommand(vertexCount = None, instanceCount = None, firstVertex = None, firstInstance = None, ):
	return _newStruct('VkDrawIndirectCommand', vertexCount = vertexCount, instanceCount = instanceCount, firstVertex = firstVertex, firstInstance = firstInstance, )

def VkSurfaceCapabilitiesKHR(minImageCount = None, maxImageCount = None, currentExtent = None, minImageExtent = None, maxImageExtent = None, maxImageArrayLayers = None, supportedTransforms = None, currentTransform = None, supportedCompositeAlpha = None, supportedUsageFlags = None, ):
	return _newStruct('VkSurfaceCapabilitiesKHR', minImageCount = minImageCount, maxImageCount = maxImageCount, currentExtent = currentExtent, minImageExtent = minImageExtent, maxImageExtent = maxImageExtent, maxImageArrayLayers = maxImageArrayLayers, supportedTransforms = supportedTransforms, currentTransform = currentTransform, supportedCompositeAlpha = supportedCompositeAlpha, supportedUsageFlags = supportedUsageFlags, )

def VkSurfaceFormatKHR(format = None, colorSpace = None, ):
	return _newStruct('VkSurfaceFormatKHR', format = format, colorSpace = colorSpace, )

def VkSwapchainCreateInfoKHR(sType = VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR, pNext = None, flags = None, surface = None, minImageCount = None, imageFormat = None, imageColorSpace = None, imageExtent = None, imageArrayLayers = None, imageUsage = None, imageSharingMode = None, queueFamilyIndexCount = None, pQueueFamilyIndices = None, preTransform = None, compositeAlpha = None, presentMode = None, clipped = None, oldSwapchain = None, ):
	return _newStruct('VkSwapchainCreateInfoKHR', sType = sType, pNext = pNext, flags = flags, surface = surface, minImageCount = minImageCount, imageFormat = imageFormat, imageColorSpace = imageColorSpace, imageExtent = imageExtent, imageArrayLayers = imageArrayLayers, imageUsage = imageUsage, imageSharingMode = imageSharingMode, queueFamilyIndexCount = queueFamilyIndexCount, pQueueFamilyIndices = pQueueFamilyIndices, preTransform = preTransform, compositeAlpha = compositeAlpha, presentMode = presentMode, clipped = clipped, oldSwapchain = oldSwapchain, )

def VkPresentInfoKHR(sType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR, pNext = None, waitSemaphoreCount = None, pWaitSemaphores = None, swapchainCount = None, pSwapchains = None, pImageIndices = None, pResults = None, ):
	return _newStruct('VkPresentInfoKHR', sType = sType, pNext = pNext, waitSemaphoreCount = waitSemaphoreCount, pWaitSemaphores = pWaitSemaphores, swapchainCount = swapchainCount, pSwapchains = pSwapchains, pImageIndices = pImageIndices, pResults = pResults, )

def VkDisplayPropertiesKHR(display = None, displayName = None, physicalDimensions = None, physicalResolution = None, supportedTransforms = None, planeReorderPossible = None, persistentContent = None, ):
	return _newStruct('VkDisplayPropertiesKHR', display = display, displayName = displayName, physicalDimensions = physicalDimensions, physicalResolution = physicalResolution, supportedTransforms = supportedTransforms, planeReorderPossible = planeReorderPossible, persistentContent = persistentContent, )

def VkDisplayModeParametersKHR(visibleRegion = None, refreshRate = None, ):
	return _newStruct('VkDisplayModeParametersKHR', visibleRegion = visibleRegion, refreshRate = refreshRate, )

def VkDisplayModePropertiesKHR(displayMode = None, parameters = None, ):
	return _newStruct('VkDisplayModePropertiesKHR', displayMode = displayMode, parameters = parameters, )

def VkDisplayModeCreateInfoKHR(sType = VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR, pNext = None, flags = None, parameters = None, ):
	return _newStruct('VkDisplayModeCreateInfoKHR', sType = sType, pNext = pNext, flags = flags, parameters = parameters, )

def VkDisplayPlaneCapabilitiesKHR(supportedAlpha = None, minSrcPosition = None, maxSrcPosition = None, minSrcExtent = None, maxSrcExtent = None, minDstPosition = None, maxDstPosition = None, minDstExtent = None, maxDstExtent = None, ):
	return _newStruct('VkDisplayPlaneCapabilitiesKHR', supportedAlpha = supportedAlpha, minSrcPosition = minSrcPosition, maxSrcPosition = maxSrcPosition, minSrcExtent = minSrcExtent, maxSrcExtent = maxSrcExtent, minDstPosition = minDstPosition, maxDstPosition = maxDstPosition, minDstExtent = minDstExtent, maxDstExtent = maxDstExtent, )

def VkDisplayPlanePropertiesKHR(currentDisplay = None, currentStackIndex = None, ):
	return _newStruct('VkDisplayPlanePropertiesKHR', currentDisplay = currentDisplay, currentStackIndex = currentStackIndex, )

def VkDisplaySurfaceCreateInfoKHR(sType = VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR, pNext = None, flags = None, displayMode = None, planeIndex = None, planeStackIndex = None, transform = None, globalAlpha = None, alphaMode = None, imageExtent = None, ):
	return _newStruct('VkDisplaySurfaceCreateInfoKHR', sType = sType, pNext = pNext, flags = flags, displayMode = displayMode, planeIndex = planeIndex, planeStackIndex = planeStackIndex, transform = transform, globalAlpha = globalAlpha, alphaMode = alphaMode, imageExtent = imageExtent, )

def VkDisplayPresentInfoKHR(sType = VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR, pNext = None, srcRect = None, dstRect = None, persistent = None, ):
	return _newStruct('VkDisplayPresentInfoKHR', sType = sType, pNext = pNext, srcRect = srcRect, dstRect = dstRect, persistent = persistent, )

def VkDebugReportCallbackCreateInfoEXT(sType = VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT, pNext = None, flags = None, pfnCallback = None, pUserData = None, ):
	return _newStruct('VkDebugReportCallbackCreateInfoEXT', sType = sType, pNext = pNext, flags = flags, pfnCallback = pfnCallback, pUserData = pUserData, )

def VkXlibSurfaceCreateInfoKHR(sType = VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR, pNext = None, flags = None, dpy = None, window = None, ):
	return _newStruct('VkXlibSurfaceCreateInfoKHR', sType = sType, pNext = pNext, flags = flags, dpy = dpy, window = window, )

def VkXcbSurfaceCreateInfoKHR(sType = VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR, pNext = None, flags = None, connection = None, window = None, ):
	return _newStruct('VkXcbSurfaceCreateInfoKHR', sType = sType, pNext = pNext, flags = flags, connection = connection, window = window, )

def VkWaylandSurfaceCreateInfoKHR(sType = VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR, pNext = None, flags = None, display = None, surface = None, ):
	return _newStruct('VkWaylandSurfaceCreateInfoKHR', sType = sType, pNext = pNext, flags = flags, display = display, surface = surface, )

def VkMirSurfaceCreateInfoKHR(sType = VK_STRUCTURE_TYPE_MIR_SURFACE_CREATE_INFO_KHR, pNext = None, flags = None, connection = None, mirSurface = None, ):
	return _newStruct('VkMirSurfaceCreateInfoKHR', sType = sType, pNext = pNext, flags = flags, connection = connection, mirSurface = mirSurface, )

def VkAndroidSurfaceCreateInfoKHR(sType = VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR, pNext = None, flags = None, window = None, ):
	return _newStruct('VkAndroidSurfaceCreateInfoKHR', sType = sType, pNext = pNext, flags = flags, window = window, )

def VkWin32SurfaceCreateInfoKHR(sType = VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR, pNext = None, flags = None, hinstance = None, hwnd = None, ):
	return _newStruct('VkWin32SurfaceCreateInfoKHR', sType = sType, pNext = pNext, flags = flags, hinstance = hinstance, hwnd = hwnd, )

class VkException(Exception):
	pass

class VkError(Exception):
	pass

class VkNotReadyException(VkException):
	pass

class VkTimeoutException(VkException):
	pass

class VkEventSetException(VkException):
	pass

class VkEventResetException(VkException):
	pass

class VkIncompleteException(VkException):
	pass

class VkOutOfHostMemoryError(VkError):
	pass

class VkOutOfDeviceMemoryError(VkError):
	pass

class VkInitializationFailedError(VkError):
	pass

class VkDeviceLostError(VkError):
	pass

class VkMemoryMapFailedError(VkError):
	pass

class VkLayerNotPresentError(VkError):
	pass

class VkExtensionNotPresentError(VkError):
	pass

class VkFeatureNotPresentError(VkError):
	pass

class VkIncompatibleDriverError(VkError):
	pass

class VkTooManyObjectsError(VkError):
	pass

class VkFormatNotSupportedError(VkError):
	pass

class VkSurfaceLostKHRError(VkError):
	pass

class VkNativeWindowInUseKHRError(VkError):
	pass

class VkSuboptimalKHRException(VkException):
	pass

class VkOutOfDateKHRError(VkError):
	pass

class VkIncompatibleDisplayKHRError(VkError):
	pass

class VkValidationFailedEXTError(VkError):
	pass

class VkInvalidShaderNVError(VkError):
	pass


def _raiseException(ret):
	exceptions = {
			VK_NOT_READY:VkNotReadyException,
			VK_TIMEOUT:VkTimeoutException,
			VK_EVENT_SET:VkEventSetException,
			VK_EVENT_RESET:VkEventResetException,
			VK_INCOMPLETE:VkIncompleteException,
			VK_ERROR_OUT_OF_HOST_MEMORY:VkOutOfHostMemoryError,
			VK_ERROR_OUT_OF_DEVICE_MEMORY:VkOutOfDeviceMemoryError,
			VK_ERROR_INITIALIZATION_FAILED:VkInitializationFailedError,
			VK_ERROR_DEVICE_LOST:VkDeviceLostError,
			VK_ERROR_MEMORY_MAP_FAILED:VkMemoryMapFailedError,
			VK_ERROR_LAYER_NOT_PRESENT:VkLayerNotPresentError,
			VK_ERROR_EXTENSION_NOT_PRESENT:VkExtensionNotPresentError,
			VK_ERROR_FEATURE_NOT_PRESENT:VkFeatureNotPresentError,
			VK_ERROR_INCOMPATIBLE_DRIVER:VkIncompatibleDriverError,
			VK_ERROR_TOO_MANY_OBJECTS:VkTooManyObjectsError,
			VK_ERROR_FORMAT_NOT_SUPPORTED:VkFormatNotSupportedError,
			VK_ERROR_SURFACE_LOST_KHR:VkSurfaceLostKHRError,
			VK_ERROR_NATIVE_WINDOW_IN_USE_KHR:VkNativeWindowInUseKHRError,
			VK_SUBOPTIMAL_KHR:VkSuboptimalKHRException,
			VK_ERROR_OUT_OF_DATE_KHR:VkOutOfDateKHRError,
			VK_ERROR_INCOMPATIBLE_DISPLAY_KHR:VkIncompatibleDisplayKHRError,
			VK_ERROR_VALIDATION_FAILED_EXT:VkValidationFailedEXTError,
			VK_ERROR_INVALID_SHADER_NV:VkInvalidShaderNVError,
		}
	    
	if ret!=0:
		raise exceptions[ret]

def _callApi(fn, *args):
	def _(x, _type):
		if x is None:
			return ffi.NULL
		if _type.kind=='pointer':
			return _castToPtr(x, _type)
		return x

	return fn(*(_(i, j) for i, j in zip(args, ffi.typeof(fn).args)))


if hasattr(_lib, 'vkCreateInstance'):
	def vkCreateInstance(pCreateInfo, pAllocator, ):
		pInstance = ffi.new('struct VkInstance_T * *')
		ret = _callApi(_lib.vkCreateInstance, pCreateInfo, pAllocator, pInstance, )
		_raiseException(ret)
		return pInstance[0]

if hasattr(_lib, 'vkDestroyInstance'):
	def vkDestroyInstance(instance, pAllocator, ):
		ret = _callApi(_lib.vkDestroyInstance, instance, pAllocator, )


if hasattr(_lib, 'vkEnumeratePhysicalDevices'):
	def vkEnumeratePhysicalDevices(instance, ):
		pPhysicalDeviceCount = ffi.new('unsigned int *')
		ret = _callApi(_lib.vkEnumeratePhysicalDevices, instance, pPhysicalDeviceCount, ffi.NULL)
		_raiseException(ret)
		pPhysicalDevices = ffi.new('struct VkPhysicalDevice_T *[]', pPhysicalDeviceCount[0])
		ret = _callApi(_lib.vkEnumeratePhysicalDevices, instance, pPhysicalDeviceCount, pPhysicalDevices, )
		_raiseException(ret)
		return pPhysicalDevices

if hasattr(_lib, 'vkGetPhysicalDeviceFeatures'):
	def vkGetPhysicalDeviceFeatures(physicalDevice, ):
		pFeatures = ffi.new('VkPhysicalDeviceFeatures *')
		ret = _callApi(_lib.vkGetPhysicalDeviceFeatures, physicalDevice, pFeatures, )
		return pFeatures[0]

if hasattr(_lib, 'vkGetPhysicalDeviceFormatProperties'):
	def vkGetPhysicalDeviceFormatProperties(physicalDevice, format, ):
		pFormatProperties = ffi.new('VkFormatProperties *')
		ret = _callApi(_lib.vkGetPhysicalDeviceFormatProperties, physicalDevice, format, pFormatProperties, )
		return pFormatProperties[0]

if hasattr(_lib, 'vkGetPhysicalDeviceImageFormatProperties'):
	def vkGetPhysicalDeviceImageFormatProperties(physicalDevice, format, type, tiling, usage, flags, ):
		pImageFormatProperties = ffi.new('VkImageFormatProperties *')
		ret = _callApi(_lib.vkGetPhysicalDeviceImageFormatProperties, physicalDevice, format, type, tiling, usage, flags, pImageFormatProperties, )
		_raiseException(ret)
		return pImageFormatProperties[0]

if hasattr(_lib, 'vkGetPhysicalDeviceProperties'):
	def vkGetPhysicalDeviceProperties(physicalDevice, ):
		pProperties = ffi.new('VkPhysicalDeviceProperties *')
		ret = _callApi(_lib.vkGetPhysicalDeviceProperties, physicalDevice, pProperties, )
		return pProperties[0]

if hasattr(_lib, 'vkGetPhysicalDeviceQueueFamilyProperties'):
	def vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, ):
		pQueueFamilyPropertyCount = ffi.new('unsigned int *')
		ret = _callApi(_lib.vkGetPhysicalDeviceQueueFamilyProperties, physicalDevice, pQueueFamilyPropertyCount, ffi.NULL)
		pQueueFamilyProperties = ffi.new('VkQueueFamilyProperties[]', pQueueFamilyPropertyCount[0])
		ret = _callApi(_lib.vkGetPhysicalDeviceQueueFamilyProperties, physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties, )
		return pQueueFamilyProperties

if hasattr(_lib, 'vkGetPhysicalDeviceMemoryProperties'):
	def vkGetPhysicalDeviceMemoryProperties(physicalDevice, ):
		pMemoryProperties = ffi.new('VkPhysicalDeviceMemoryProperties *')
		ret = _callApi(_lib.vkGetPhysicalDeviceMemoryProperties, physicalDevice, pMemoryProperties, )
		return pMemoryProperties[0]

if hasattr(_lib, 'vkGetInstanceProcAddr'):
	def vkGetInstanceProcAddr(instance, pName, ):
		ret = _callApi(_lib.vkGetInstanceProcAddr, instance, pName, )
		return ret

if hasattr(_lib, 'vkGetDeviceProcAddr'):
	def vkGetDeviceProcAddr(device, pName, ):
		ret = _callApi(_lib.vkGetDeviceProcAddr, device, pName, )
		return ret

if hasattr(_lib, 'vkCreateDevice'):
	def vkCreateDevice(physicalDevice, pCreateInfo, pAllocator, ):
		pDevice = ffi.new('struct VkDevice_T * *')
		ret = _callApi(_lib.vkCreateDevice, physicalDevice, pCreateInfo, pAllocator, pDevice, )
		_raiseException(ret)
		return pDevice[0]

if hasattr(_lib, 'vkDestroyDevice'):
	def vkDestroyDevice(device, pAllocator, ):
		ret = _callApi(_lib.vkDestroyDevice, device, pAllocator, )


if hasattr(_lib, 'vkEnumerateInstanceExtensionProperties'):
	def vkEnumerateInstanceExtensionProperties(pLayerName, ):
		pPropertyCount = ffi.new('unsigned int *')
		ret = _callApi(_lib.vkEnumerateInstanceExtensionProperties, pLayerName, pPropertyCount, ffi.NULL)
		_raiseException(ret)
		pProperties = ffi.new('VkExtensionProperties[]', pPropertyCount[0])
		ret = _callApi(_lib.vkEnumerateInstanceExtensionProperties, pLayerName, pPropertyCount, pProperties, )
		_raiseException(ret)
		return pProperties

if hasattr(_lib, 'vkEnumerateDeviceExtensionProperties'):
	def vkEnumerateDeviceExtensionProperties(physicalDevice, pLayerName, ):
		pPropertyCount = ffi.new('unsigned int *')
		ret = _callApi(_lib.vkEnumerateDeviceExtensionProperties, physicalDevice, pLayerName, pPropertyCount, ffi.NULL)
		_raiseException(ret)
		pProperties = ffi.new('VkExtensionProperties[]', pPropertyCount[0])
		ret = _callApi(_lib.vkEnumerateDeviceExtensionProperties, physicalDevice, pLayerName, pPropertyCount, pProperties, )
		_raiseException(ret)
		return pProperties

if hasattr(_lib, 'vkEnumerateInstanceLayerProperties'):
	def vkEnumerateInstanceLayerProperties():
		pPropertyCount = ffi.new('unsigned int *')
		ret = _callApi(_lib.vkEnumerateInstanceLayerProperties, pPropertyCount, ffi.NULL)
		_raiseException(ret)
		pProperties = ffi.new('VkLayerProperties[]', pPropertyCount[0])
		ret = _callApi(_lib.vkEnumerateInstanceLayerProperties, pPropertyCount, pProperties, )
		_raiseException(ret)
		return pProperties

if hasattr(_lib, 'vkEnumerateDeviceLayerProperties'):
	def vkEnumerateDeviceLayerProperties(physicalDevice, ):
		pPropertyCount = ffi.new('unsigned int *')
		ret = _callApi(_lib.vkEnumerateDeviceLayerProperties, physicalDevice, pPropertyCount, ffi.NULL)
		_raiseException(ret)
		pProperties = ffi.new('VkLayerProperties[]', pPropertyCount[0])
		ret = _callApi(_lib.vkEnumerateDeviceLayerProperties, physicalDevice, pPropertyCount, pProperties, )
		_raiseException(ret)
		return pProperties

if hasattr(_lib, 'vkGetDeviceQueue'):
	def vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, ):
		pQueue = ffi.new('struct VkQueue_T * *')
		ret = _callApi(_lib.vkGetDeviceQueue, device, queueFamilyIndex, queueIndex, pQueue, )
		return pQueue[0]

if hasattr(_lib, 'vkQueueSubmit'):
	def vkQueueSubmit(queue, submitCount, pSubmits, fence, ):
		ret = _callApi(_lib.vkQueueSubmit, queue, submitCount, pSubmits, fence, )
		_raiseException(ret)


if hasattr(_lib, 'vkQueueWaitIdle'):
	def vkQueueWaitIdle(queue, ):
		ret = _callApi(_lib.vkQueueWaitIdle, queue, )
		_raiseException(ret)


if hasattr(_lib, 'vkDeviceWaitIdle'):
	def vkDeviceWaitIdle(device, ):
		ret = _callApi(_lib.vkDeviceWaitIdle, device, )
		_raiseException(ret)


if hasattr(_lib, 'vkAllocateMemory'):
	def vkAllocateMemory(device, pAllocateInfo, pAllocator, ):
		pMemory = ffi.new('struct VkDeviceMemory_T * *')
		ret = _callApi(_lib.vkAllocateMemory, device, pAllocateInfo, pAllocator, pMemory, )
		_raiseException(ret)
		return pMemory[0]

if hasattr(_lib, 'vkFreeMemory'):
	def vkFreeMemory(device, memory, pAllocator, ):
		ret = _callApi(_lib.vkFreeMemory, device, memory, pAllocator, )


if hasattr(_lib, 'vkMapMemory'):
	def vkMapMemory(device, memory, offset, size, flags, ):
		ppData = ffi.new('void * *')
		ret = _callApi(_lib.vkMapMemory, device, memory, offset, size, flags, ppData, )
		_raiseException(ret)
		return ppData[0]

if hasattr(_lib, 'vkUnmapMemory'):
	def vkUnmapMemory(device, memory, ):
		ret = _callApi(_lib.vkUnmapMemory, device, memory, )


if hasattr(_lib, 'vkFlushMappedMemoryRanges'):
	def vkFlushMappedMemoryRanges(device, memoryRangeCount, pMemoryRanges, ):
		ret = _callApi(_lib.vkFlushMappedMemoryRanges, device, memoryRangeCount, pMemoryRanges, )
		_raiseException(ret)


if hasattr(_lib, 'vkInvalidateMappedMemoryRanges'):
	def vkInvalidateMappedMemoryRanges(device, memoryRangeCount, pMemoryRanges, ):
		ret = _callApi(_lib.vkInvalidateMappedMemoryRanges, device, memoryRangeCount, pMemoryRanges, )
		_raiseException(ret)


if hasattr(_lib, 'vkGetDeviceMemoryCommitment'):
	def vkGetDeviceMemoryCommitment(device, memory, ):
		pCommittedMemoryInBytes = ffi.new('unsigned long *')
		ret = _callApi(_lib.vkGetDeviceMemoryCommitment, device, memory, pCommittedMemoryInBytes, )
		return pCommittedMemoryInBytes[0]

if hasattr(_lib, 'vkBindBufferMemory'):
	def vkBindBufferMemory(device, buffer, memory, memoryOffset, ):
		ret = _callApi(_lib.vkBindBufferMemory, device, buffer, memory, memoryOffset, )
		_raiseException(ret)


if hasattr(_lib, 'vkBindImageMemory'):
	def vkBindImageMemory(device, image, memory, memoryOffset, ):
		ret = _callApi(_lib.vkBindImageMemory, device, image, memory, memoryOffset, )
		_raiseException(ret)


if hasattr(_lib, 'vkGetBufferMemoryRequirements'):
	def vkGetBufferMemoryRequirements(device, buffer, ):
		pMemoryRequirements = ffi.new('VkMemoryRequirements *')
		ret = _callApi(_lib.vkGetBufferMemoryRequirements, device, buffer, pMemoryRequirements, )
		return pMemoryRequirements[0]

if hasattr(_lib, 'vkGetImageMemoryRequirements'):
	def vkGetImageMemoryRequirements(device, image, ):
		pMemoryRequirements = ffi.new('VkMemoryRequirements *')
		ret = _callApi(_lib.vkGetImageMemoryRequirements, device, image, pMemoryRequirements, )
		return pMemoryRequirements[0]

if hasattr(_lib, 'vkGetImageSparseMemoryRequirements'):
	def vkGetImageSparseMemoryRequirements(device, image, ):
		pSparseMemoryRequirementCount = ffi.new('unsigned int *')
		ret = _callApi(_lib.vkGetImageSparseMemoryRequirements, device, image, pSparseMemoryRequirementCount, ffi.NULL)
		pSparseMemoryRequirements = ffi.new('VkSparseImageMemoryRequirements[]', pSparseMemoryRequirementCount[0])
		ret = _callApi(_lib.vkGetImageSparseMemoryRequirements, device, image, pSparseMemoryRequirementCount, pSparseMemoryRequirements, )
		return pSparseMemoryRequirements

if hasattr(_lib, 'vkGetPhysicalDeviceSparseImageFormatProperties'):
	def vkGetPhysicalDeviceSparseImageFormatProperties(physicalDevice, format, type, samples, usage, tiling, ):
		pPropertyCount = ffi.new('unsigned int *')
		ret = _callApi(_lib.vkGetPhysicalDeviceSparseImageFormatProperties, physicalDevice, format, type, samples, usage, tiling, pPropertyCount, ffi.NULL)
		pProperties = ffi.new('VkSparseImageFormatProperties[]', pPropertyCount[0])
		ret = _callApi(_lib.vkGetPhysicalDeviceSparseImageFormatProperties, physicalDevice, format, type, samples, usage, tiling, pPropertyCount, pProperties, )
		return pProperties

if hasattr(_lib, 'vkQueueBindSparse'):
	def vkQueueBindSparse(queue, bindInfoCount, pBindInfo, fence, ):
		ret = _callApi(_lib.vkQueueBindSparse, queue, bindInfoCount, pBindInfo, fence, )
		_raiseException(ret)


if hasattr(_lib, 'vkCreateFence'):
	def vkCreateFence(device, pCreateInfo, pAllocator, ):
		pFence = ffi.new('struct VkFence_T * *')
		ret = _callApi(_lib.vkCreateFence, device, pCreateInfo, pAllocator, pFence, )
		_raiseException(ret)
		return pFence[0]

if hasattr(_lib, 'vkDestroyFence'):
	def vkDestroyFence(device, fence, pAllocator, ):
		ret = _callApi(_lib.vkDestroyFence, device, fence, pAllocator, )


if hasattr(_lib, 'vkResetFences'):
	def vkResetFences(device, fenceCount, pFences, ):
		ret = _callApi(_lib.vkResetFences, device, fenceCount, pFences, )
		_raiseException(ret)


if hasattr(_lib, 'vkGetFenceStatus'):
	def vkGetFenceStatus(device, fence, ):
		ret = _callApi(_lib.vkGetFenceStatus, device, fence, )
		_raiseException(ret)


if hasattr(_lib, 'vkWaitForFences'):
	def vkWaitForFences(device, fenceCount, pFences, waitAll, timeout, ):
		ret = _callApi(_lib.vkWaitForFences, device, fenceCount, pFences, waitAll, timeout, )
		_raiseException(ret)


if hasattr(_lib, 'vkCreateSemaphore'):
	def vkCreateSemaphore(device, pCreateInfo, pAllocator, ):
		pSemaphore = ffi.new('struct VkSemaphore_T * *')
		ret = _callApi(_lib.vkCreateSemaphore, device, pCreateInfo, pAllocator, pSemaphore, )
		_raiseException(ret)
		return pSemaphore[0]

if hasattr(_lib, 'vkDestroySemaphore'):
	def vkDestroySemaphore(device, semaphore, pAllocator, ):
		ret = _callApi(_lib.vkDestroySemaphore, device, semaphore, pAllocator, )


if hasattr(_lib, 'vkCreateEvent'):
	def vkCreateEvent(device, pCreateInfo, pAllocator, ):
		pEvent = ffi.new('struct VkEvent_T * *')
		ret = _callApi(_lib.vkCreateEvent, device, pCreateInfo, pAllocator, pEvent, )
		_raiseException(ret)
		return pEvent[0]

if hasattr(_lib, 'vkDestroyEvent'):
	def vkDestroyEvent(device, event, pAllocator, ):
		ret = _callApi(_lib.vkDestroyEvent, device, event, pAllocator, )


if hasattr(_lib, 'vkGetEventStatus'):
	def vkGetEventStatus(device, event, ):
		ret = _callApi(_lib.vkGetEventStatus, device, event, )
		_raiseException(ret)


if hasattr(_lib, 'vkSetEvent'):
	def vkSetEvent(device, event, ):
		ret = _callApi(_lib.vkSetEvent, device, event, )
		_raiseException(ret)


if hasattr(_lib, 'vkResetEvent'):
	def vkResetEvent(device, event, ):
		ret = _callApi(_lib.vkResetEvent, device, event, )
		_raiseException(ret)


if hasattr(_lib, 'vkCreateQueryPool'):
	def vkCreateQueryPool(device, pCreateInfo, pAllocator, ):
		pQueryPool = ffi.new('struct VkQueryPool_T * *')
		ret = _callApi(_lib.vkCreateQueryPool, device, pCreateInfo, pAllocator, pQueryPool, )
		_raiseException(ret)
		return pQueryPool[0]

if hasattr(_lib, 'vkDestroyQueryPool'):
	def vkDestroyQueryPool(device, queryPool, pAllocator, ):
		ret = _callApi(_lib.vkDestroyQueryPool, device, queryPool, pAllocator, )


if hasattr(_lib, 'vkGetQueryPoolResults'):
	def vkGetQueryPoolResults(device, queryPool, firstQuery, queryCount, dataSize, pData, stride, flags, ):
		ret = _callApi(_lib.vkGetQueryPoolResults, device, queryPool, firstQuery, queryCount, dataSize, pData, stride, flags, )
		_raiseException(ret)


if hasattr(_lib, 'vkCreateBuffer'):
	def vkCreateBuffer(device, pCreateInfo, pAllocator, ):
		pBuffer = ffi.new('struct VkBuffer_T * *')
		ret = _callApi(_lib.vkCreateBuffer, device, pCreateInfo, pAllocator, pBuffer, )
		_raiseException(ret)
		return pBuffer[0]

if hasattr(_lib, 'vkDestroyBuffer'):
	def vkDestroyBuffer(device, buffer, pAllocator, ):
		ret = _callApi(_lib.vkDestroyBuffer, device, buffer, pAllocator, )


if hasattr(_lib, 'vkCreateBufferView'):
	def vkCreateBufferView(device, pCreateInfo, pAllocator, ):
		pView = ffi.new('struct VkBufferView_T * *')
		ret = _callApi(_lib.vkCreateBufferView, device, pCreateInfo, pAllocator, pView, )
		_raiseException(ret)
		return pView[0]

if hasattr(_lib, 'vkDestroyBufferView'):
	def vkDestroyBufferView(device, bufferView, pAllocator, ):
		ret = _callApi(_lib.vkDestroyBufferView, device, bufferView, pAllocator, )


if hasattr(_lib, 'vkCreateImage'):
	def vkCreateImage(device, pCreateInfo, pAllocator, ):
		pImage = ffi.new('struct VkImage_T * *')
		ret = _callApi(_lib.vkCreateImage, device, pCreateInfo, pAllocator, pImage, )
		_raiseException(ret)
		return pImage[0]

if hasattr(_lib, 'vkDestroyImage'):
	def vkDestroyImage(device, image, pAllocator, ):
		ret = _callApi(_lib.vkDestroyImage, device, image, pAllocator, )


if hasattr(_lib, 'vkGetImageSubresourceLayout'):
	def vkGetImageSubresourceLayout(device, image, pSubresource, ):
		pLayout = ffi.new('VkSubresourceLayout *')
		ret = _callApi(_lib.vkGetImageSubresourceLayout, device, image, pSubresource, pLayout, )
		return pLayout[0]

if hasattr(_lib, 'vkCreateImageView'):
	def vkCreateImageView(device, pCreateInfo, pAllocator, ):
		pView = ffi.new('struct VkImageView_T * *')
		ret = _callApi(_lib.vkCreateImageView, device, pCreateInfo, pAllocator, pView, )
		_raiseException(ret)
		return pView[0]

if hasattr(_lib, 'vkDestroyImageView'):
	def vkDestroyImageView(device, imageView, pAllocator, ):
		ret = _callApi(_lib.vkDestroyImageView, device, imageView, pAllocator, )


if hasattr(_lib, 'vkCreateShaderModule'):
	def vkCreateShaderModule(device, pCreateInfo, pAllocator, ):
		pShaderModule = ffi.new('struct VkShaderModule_T * *')
		ret = _callApi(_lib.vkCreateShaderModule, device, pCreateInfo, pAllocator, pShaderModule, )
		_raiseException(ret)
		return pShaderModule[0]

if hasattr(_lib, 'vkDestroyShaderModule'):
	def vkDestroyShaderModule(device, shaderModule, pAllocator, ):
		ret = _callApi(_lib.vkDestroyShaderModule, device, shaderModule, pAllocator, )


if hasattr(_lib, 'vkCreatePipelineCache'):
	def vkCreatePipelineCache(device, pCreateInfo, pAllocator, ):
		pPipelineCache = ffi.new('struct VkPipelineCache_T * *')
		ret = _callApi(_lib.vkCreatePipelineCache, device, pCreateInfo, pAllocator, pPipelineCache, )
		_raiseException(ret)
		return pPipelineCache[0]

if hasattr(_lib, 'vkDestroyPipelineCache'):
	def vkDestroyPipelineCache(device, pipelineCache, pAllocator, ):
		ret = _callApi(_lib.vkDestroyPipelineCache, device, pipelineCache, pAllocator, )


if hasattr(_lib, 'vkGetPipelineCacheData'):
	def vkGetPipelineCacheData(device, pipelineCache, pDataSize, pData, ):
		ret = _callApi(_lib.vkGetPipelineCacheData, device, pipelineCache, pDataSize, pData, )
		_raiseException(ret)


if hasattr(_lib, 'vkMergePipelineCaches'):
	def vkMergePipelineCaches(device, dstCache, srcCacheCount, pSrcCaches, ):
		ret = _callApi(_lib.vkMergePipelineCaches, device, dstCache, srcCacheCount, pSrcCaches, )
		_raiseException(ret)


if hasattr(_lib, 'vkCreateGraphicsPipelines'):
	def vkCreateGraphicsPipelines(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines, ):
		ret = _callApi(_lib.vkCreateGraphicsPipelines, device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines, )
		_raiseException(ret)


if hasattr(_lib, 'vkCreateComputePipelines'):
	def vkCreateComputePipelines(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines, ):
		ret = _callApi(_lib.vkCreateComputePipelines, device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines, )
		_raiseException(ret)


if hasattr(_lib, 'vkDestroyPipeline'):
	def vkDestroyPipeline(device, pipeline, pAllocator, ):
		ret = _callApi(_lib.vkDestroyPipeline, device, pipeline, pAllocator, )


if hasattr(_lib, 'vkCreatePipelineLayout'):
	def vkCreatePipelineLayout(device, pCreateInfo, pAllocator, ):
		pPipelineLayout = ffi.new('struct VkPipelineLayout_T * *')
		ret = _callApi(_lib.vkCreatePipelineLayout, device, pCreateInfo, pAllocator, pPipelineLayout, )
		_raiseException(ret)
		return pPipelineLayout[0]

if hasattr(_lib, 'vkDestroyPipelineLayout'):
	def vkDestroyPipelineLayout(device, pipelineLayout, pAllocator, ):
		ret = _callApi(_lib.vkDestroyPipelineLayout, device, pipelineLayout, pAllocator, )


if hasattr(_lib, 'vkCreateSampler'):
	def vkCreateSampler(device, pCreateInfo, pAllocator, ):
		pSampler = ffi.new('struct VkSampler_T * *')
		ret = _callApi(_lib.vkCreateSampler, device, pCreateInfo, pAllocator, pSampler, )
		_raiseException(ret)
		return pSampler[0]

if hasattr(_lib, 'vkDestroySampler'):
	def vkDestroySampler(device, sampler, pAllocator, ):
		ret = _callApi(_lib.vkDestroySampler, device, sampler, pAllocator, )


if hasattr(_lib, 'vkCreateDescriptorSetLayout'):
	def vkCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, ):
		pSetLayout = ffi.new('struct VkDescriptorSetLayout_T * *')
		ret = _callApi(_lib.vkCreateDescriptorSetLayout, device, pCreateInfo, pAllocator, pSetLayout, )
		_raiseException(ret)
		return pSetLayout[0]

if hasattr(_lib, 'vkDestroyDescriptorSetLayout'):
	def vkDestroyDescriptorSetLayout(device, descriptorSetLayout, pAllocator, ):
		ret = _callApi(_lib.vkDestroyDescriptorSetLayout, device, descriptorSetLayout, pAllocator, )


if hasattr(_lib, 'vkCreateDescriptorPool'):
	def vkCreateDescriptorPool(device, pCreateInfo, pAllocator, ):
		pDescriptorPool = ffi.new('struct VkDescriptorPool_T * *')
		ret = _callApi(_lib.vkCreateDescriptorPool, device, pCreateInfo, pAllocator, pDescriptorPool, )
		_raiseException(ret)
		return pDescriptorPool[0]

if hasattr(_lib, 'vkDestroyDescriptorPool'):
	def vkDestroyDescriptorPool(device, descriptorPool, pAllocator, ):
		ret = _callApi(_lib.vkDestroyDescriptorPool, device, descriptorPool, pAllocator, )


if hasattr(_lib, 'vkResetDescriptorPool'):
	def vkResetDescriptorPool(device, descriptorPool, flags, ):
		ret = _callApi(_lib.vkResetDescriptorPool, device, descriptorPool, flags, )
		_raiseException(ret)


if hasattr(_lib, 'vkAllocateDescriptorSets'):
	def vkAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets, ):
		ret = _callApi(_lib.vkAllocateDescriptorSets, device, pAllocateInfo, pDescriptorSets, )
		_raiseException(ret)


if hasattr(_lib, 'vkFreeDescriptorSets'):
	def vkFreeDescriptorSets(device, descriptorPool, descriptorSetCount, pDescriptorSets, ):
		ret = _callApi(_lib.vkFreeDescriptorSets, device, descriptorPool, descriptorSetCount, pDescriptorSets, )
		_raiseException(ret)


if hasattr(_lib, 'vkUpdateDescriptorSets'):
	def vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies, ):
		ret = _callApi(_lib.vkUpdateDescriptorSets, device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies, )


if hasattr(_lib, 'vkCreateFramebuffer'):
	def vkCreateFramebuffer(device, pCreateInfo, pAllocator, ):
		pFramebuffer = ffi.new('struct VkFramebuffer_T * *')
		ret = _callApi(_lib.vkCreateFramebuffer, device, pCreateInfo, pAllocator, pFramebuffer, )
		_raiseException(ret)
		return pFramebuffer[0]

if hasattr(_lib, 'vkDestroyFramebuffer'):
	def vkDestroyFramebuffer(device, framebuffer, pAllocator, ):
		ret = _callApi(_lib.vkDestroyFramebuffer, device, framebuffer, pAllocator, )


if hasattr(_lib, 'vkCreateRenderPass'):
	def vkCreateRenderPass(device, pCreateInfo, pAllocator, ):
		pRenderPass = ffi.new('struct VkRenderPass_T * *')
		ret = _callApi(_lib.vkCreateRenderPass, device, pCreateInfo, pAllocator, pRenderPass, )
		_raiseException(ret)
		return pRenderPass[0]

if hasattr(_lib, 'vkDestroyRenderPass'):
	def vkDestroyRenderPass(device, renderPass, pAllocator, ):
		ret = _callApi(_lib.vkDestroyRenderPass, device, renderPass, pAllocator, )


if hasattr(_lib, 'vkGetRenderAreaGranularity'):
	def vkGetRenderAreaGranularity(device, renderPass, ):
		pGranularity = ffi.new('VkExtent2D *')
		ret = _callApi(_lib.vkGetRenderAreaGranularity, device, renderPass, pGranularity, )
		return pGranularity[0]

if hasattr(_lib, 'vkCreateCommandPool'):
	def vkCreateCommandPool(device, pCreateInfo, pAllocator, ):
		pCommandPool = ffi.new('struct VkCommandPool_T * *')
		ret = _callApi(_lib.vkCreateCommandPool, device, pCreateInfo, pAllocator, pCommandPool, )
		_raiseException(ret)
		return pCommandPool[0]

if hasattr(_lib, 'vkDestroyCommandPool'):
	def vkDestroyCommandPool(device, commandPool, pAllocator, ):
		ret = _callApi(_lib.vkDestroyCommandPool, device, commandPool, pAllocator, )


if hasattr(_lib, 'vkResetCommandPool'):
	def vkResetCommandPool(device, commandPool, flags, ):
		ret = _callApi(_lib.vkResetCommandPool, device, commandPool, flags, )
		_raiseException(ret)


if hasattr(_lib, 'vkAllocateCommandBuffers'):
	def vkAllocateCommandBuffers(device, pAllocateInfo, ):
		pCommandBuffers = ffi.new('struct VkCommandBuffer_T * *')
		ret = _callApi(_lib.vkAllocateCommandBuffers, device, pAllocateInfo, pCommandBuffers, )
		_raiseException(ret)
		return pCommandBuffers

if hasattr(_lib, 'vkFreeCommandBuffers'):
	def vkFreeCommandBuffers(device, commandPool, commandBufferCount, pCommandBuffers, ):
		ret = _callApi(_lib.vkFreeCommandBuffers, device, commandPool, commandBufferCount, pCommandBuffers, )


if hasattr(_lib, 'vkBeginCommandBuffer'):
	def vkBeginCommandBuffer(commandBuffer, pBeginInfo, ):
		ret = _callApi(_lib.vkBeginCommandBuffer, commandBuffer, pBeginInfo, )
		_raiseException(ret)


if hasattr(_lib, 'vkEndCommandBuffer'):
	def vkEndCommandBuffer(commandBuffer, ):
		ret = _callApi(_lib.vkEndCommandBuffer, commandBuffer, )
		_raiseException(ret)


if hasattr(_lib, 'vkResetCommandBuffer'):
	def vkResetCommandBuffer(commandBuffer, flags, ):
		ret = _callApi(_lib.vkResetCommandBuffer, commandBuffer, flags, )
		_raiseException(ret)


if hasattr(_lib, 'vkCmdBindPipeline'):
	def vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline, ):
		ret = _callApi(_lib.vkCmdBindPipeline, commandBuffer, pipelineBindPoint, pipeline, )


if hasattr(_lib, 'vkCmdSetViewport'):
	def vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports, ):
		ret = _callApi(_lib.vkCmdSetViewport, commandBuffer, firstViewport, viewportCount, pViewports, )


if hasattr(_lib, 'vkCmdSetScissor'):
	def vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors, ):
		ret = _callApi(_lib.vkCmdSetScissor, commandBuffer, firstScissor, scissorCount, pScissors, )


if hasattr(_lib, 'vkCmdSetLineWidth'):
	def vkCmdSetLineWidth(commandBuffer, lineWidth, ):
		ret = _callApi(_lib.vkCmdSetLineWidth, commandBuffer, lineWidth, )


if hasattr(_lib, 'vkCmdSetDepthBias'):
	def vkCmdSetDepthBias(commandBuffer, depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor, ):
		ret = _callApi(_lib.vkCmdSetDepthBias, commandBuffer, depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor, )


if hasattr(_lib, 'vkCmdSetBlendConstants'):
	def vkCmdSetBlendConstants(commandBuffer, blendConstants, ):
		ret = _callApi(_lib.vkCmdSetBlendConstants, commandBuffer, blendConstants, )


if hasattr(_lib, 'vkCmdSetDepthBounds'):
	def vkCmdSetDepthBounds(commandBuffer, minDepthBounds, maxDepthBounds, ):
		ret = _callApi(_lib.vkCmdSetDepthBounds, commandBuffer, minDepthBounds, maxDepthBounds, )


if hasattr(_lib, 'vkCmdSetStencilCompareMask'):
	def vkCmdSetStencilCompareMask(commandBuffer, faceMask, compareMask, ):
		ret = _callApi(_lib.vkCmdSetStencilCompareMask, commandBuffer, faceMask, compareMask, )


if hasattr(_lib, 'vkCmdSetStencilWriteMask'):
	def vkCmdSetStencilWriteMask(commandBuffer, faceMask, writeMask, ):
		ret = _callApi(_lib.vkCmdSetStencilWriteMask, commandBuffer, faceMask, writeMask, )


if hasattr(_lib, 'vkCmdSetStencilReference'):
	def vkCmdSetStencilReference(commandBuffer, faceMask, reference, ):
		ret = _callApi(_lib.vkCmdSetStencilReference, commandBuffer, faceMask, reference, )


if hasattr(_lib, 'vkCmdBindDescriptorSets'):
	def vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets, ):
		ret = _callApi(_lib.vkCmdBindDescriptorSets, commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets, )


if hasattr(_lib, 'vkCmdBindIndexBuffer'):
	def vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType, ):
		ret = _callApi(_lib.vkCmdBindIndexBuffer, commandBuffer, buffer, offset, indexType, )


if hasattr(_lib, 'vkCmdBindVertexBuffers'):
	def vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, ):
		ret = _callApi(_lib.vkCmdBindVertexBuffers, commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, )


if hasattr(_lib, 'vkCmdDraw'):
	def vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance, ):
		ret = _callApi(_lib.vkCmdDraw, commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance, )


if hasattr(_lib, 'vkCmdDrawIndexed'):
	def vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance, ):
		ret = _callApi(_lib.vkCmdDrawIndexed, commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance, )


if hasattr(_lib, 'vkCmdDrawIndirect'):
	def vkCmdDrawIndirect(commandBuffer, buffer, offset, drawCount, stride, ):
		ret = _callApi(_lib.vkCmdDrawIndirect, commandBuffer, buffer, offset, drawCount, stride, )


if hasattr(_lib, 'vkCmdDrawIndexedIndirect'):
	def vkCmdDrawIndexedIndirect(commandBuffer, buffer, offset, drawCount, stride, ):
		ret = _callApi(_lib.vkCmdDrawIndexedIndirect, commandBuffer, buffer, offset, drawCount, stride, )


if hasattr(_lib, 'vkCmdDispatch'):
	def vkCmdDispatch(commandBuffer, x, y, z, ):
		ret = _callApi(_lib.vkCmdDispatch, commandBuffer, x, y, z, )


if hasattr(_lib, 'vkCmdDispatchIndirect'):
	def vkCmdDispatchIndirect(commandBuffer, buffer, offset, ):
		ret = _callApi(_lib.vkCmdDispatchIndirect, commandBuffer, buffer, offset, )


if hasattr(_lib, 'vkCmdCopyBuffer'):
	def vkCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions, ):
		ret = _callApi(_lib.vkCmdCopyBuffer, commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions, )


if hasattr(_lib, 'vkCmdCopyImage'):
	def vkCmdCopyImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, ):
		ret = _callApi(_lib.vkCmdCopyImage, commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, )


if hasattr(_lib, 'vkCmdBlitImage'):
	def vkCmdBlitImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter, ):
		ret = _callApi(_lib.vkCmdBlitImage, commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter, )


if hasattr(_lib, 'vkCmdCopyBufferToImage'):
	def vkCmdCopyBufferToImage(commandBuffer, srcBuffer, dstImage, dstImageLayout, regionCount, pRegions, ):
		ret = _callApi(_lib.vkCmdCopyBufferToImage, commandBuffer, srcBuffer, dstImage, dstImageLayout, regionCount, pRegions, )


if hasattr(_lib, 'vkCmdCopyImageToBuffer'):
	def vkCmdCopyImageToBuffer(commandBuffer, srcImage, srcImageLayout, dstBuffer, regionCount, pRegions, ):
		ret = _callApi(_lib.vkCmdCopyImageToBuffer, commandBuffer, srcImage, srcImageLayout, dstBuffer, regionCount, pRegions, )


if hasattr(_lib, 'vkCmdUpdateBuffer'):
	def vkCmdUpdateBuffer(commandBuffer, dstBuffer, dstOffset, dataSize, pData, ):
		ret = _callApi(_lib.vkCmdUpdateBuffer, commandBuffer, dstBuffer, dstOffset, dataSize, pData, )


if hasattr(_lib, 'vkCmdFillBuffer'):
	def vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data, ):
		ret = _callApi(_lib.vkCmdFillBuffer, commandBuffer, dstBuffer, dstOffset, size, data, )


if hasattr(_lib, 'vkCmdClearColorImage'):
	def vkCmdClearColorImage(commandBuffer, image, imageLayout, pColor, rangeCount, pRanges, ):
		ret = _callApi(_lib.vkCmdClearColorImage, commandBuffer, image, imageLayout, pColor, rangeCount, pRanges, )


if hasattr(_lib, 'vkCmdClearDepthStencilImage'):
	def vkCmdClearDepthStencilImage(commandBuffer, image, imageLayout, pDepthStencil, rangeCount, pRanges, ):
		ret = _callApi(_lib.vkCmdClearDepthStencilImage, commandBuffer, image, imageLayout, pDepthStencil, rangeCount, pRanges, )


if hasattr(_lib, 'vkCmdClearAttachments'):
	def vkCmdClearAttachments(commandBuffer, attachmentCount, pAttachments, rectCount, pRects, ):
		ret = _callApi(_lib.vkCmdClearAttachments, commandBuffer, attachmentCount, pAttachments, rectCount, pRects, )


if hasattr(_lib, 'vkCmdResolveImage'):
	def vkCmdResolveImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, ):
		ret = _callApi(_lib.vkCmdResolveImage, commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, )


if hasattr(_lib, 'vkCmdSetEvent'):
	def vkCmdSetEvent(commandBuffer, event, stageMask, ):
		ret = _callApi(_lib.vkCmdSetEvent, commandBuffer, event, stageMask, )


if hasattr(_lib, 'vkCmdResetEvent'):
	def vkCmdResetEvent(commandBuffer, event, stageMask, ):
		ret = _callApi(_lib.vkCmdResetEvent, commandBuffer, event, stageMask, )


if hasattr(_lib, 'vkCmdWaitEvents'):
	def vkCmdWaitEvents(commandBuffer, eventCount, pEvents, srcStageMask, dstStageMask, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers, ):
		ret = _callApi(_lib.vkCmdWaitEvents, commandBuffer, eventCount, pEvents, srcStageMask, dstStageMask, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers, )


if hasattr(_lib, 'vkCmdPipelineBarrier'):
	def vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers, ):
		ret = _callApi(_lib.vkCmdPipelineBarrier, commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers, )


if hasattr(_lib, 'vkCmdBeginQuery'):
	def vkCmdBeginQuery(commandBuffer, queryPool, query, flags, ):
		ret = _callApi(_lib.vkCmdBeginQuery, commandBuffer, queryPool, query, flags, )


if hasattr(_lib, 'vkCmdEndQuery'):
	def vkCmdEndQuery(commandBuffer, queryPool, query, ):
		ret = _callApi(_lib.vkCmdEndQuery, commandBuffer, queryPool, query, )


if hasattr(_lib, 'vkCmdResetQueryPool'):
	def vkCmdResetQueryPool(commandBuffer, queryPool, firstQuery, queryCount, ):
		ret = _callApi(_lib.vkCmdResetQueryPool, commandBuffer, queryPool, firstQuery, queryCount, )


if hasattr(_lib, 'vkCmdWriteTimestamp'):
	def vkCmdWriteTimestamp(commandBuffer, pipelineStage, queryPool, query, ):
		ret = _callApi(_lib.vkCmdWriteTimestamp, commandBuffer, pipelineStage, queryPool, query, )


if hasattr(_lib, 'vkCmdCopyQueryPoolResults'):
	def vkCmdCopyQueryPoolResults(commandBuffer, queryPool, firstQuery, queryCount, dstBuffer, dstOffset, stride, flags, ):
		ret = _callApi(_lib.vkCmdCopyQueryPoolResults, commandBuffer, queryPool, firstQuery, queryCount, dstBuffer, dstOffset, stride, flags, )


if hasattr(_lib, 'vkCmdPushConstants'):
	def vkCmdPushConstants(commandBuffer, layout, stageFlags, offset, size, pValues, ):
		ret = _callApi(_lib.vkCmdPushConstants, commandBuffer, layout, stageFlags, offset, size, pValues, )


if hasattr(_lib, 'vkCmdBeginRenderPass'):
	def vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents, ):
		ret = _callApi(_lib.vkCmdBeginRenderPass, commandBuffer, pRenderPassBegin, contents, )


if hasattr(_lib, 'vkCmdNextSubpass'):
	def vkCmdNextSubpass(commandBuffer, contents, ):
		ret = _callApi(_lib.vkCmdNextSubpass, commandBuffer, contents, )


if hasattr(_lib, 'vkCmdEndRenderPass'):
	def vkCmdEndRenderPass(commandBuffer, ):
		ret = _callApi(_lib.vkCmdEndRenderPass, commandBuffer, )


if hasattr(_lib, 'vkCmdExecuteCommands'):
	def vkCmdExecuteCommands(commandBuffer, commandBufferCount, pCommandBuffers, ):
		ret = _callApi(_lib.vkCmdExecuteCommands, commandBuffer, commandBufferCount, pCommandBuffers, )




def vkGetInstanceProcAddr(instance, pName, ):

	ret = _callApi(_lib.vkGetInstanceProcAddr, instance, pName, )
	return ret

def vkGetDeviceProcAddr(device, pName, ):

	ret = _callApi(_lib.vkGetDeviceProcAddr, device, pName, )
	return ret

VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_EXTENSION_NAME = "VK_KHR_sampler_mirror_clamp_to_edge"
VK_KHR_SURFACE_EXTENSION_NAME = "VK_KHR_surface"
VK_KHR_sampler_mirror_clamp_to_edge = 1
VK_KHR_SWAPCHAIN_EXTENSION_NAME = "VK_KHR_swapchain"

def VK_MAKE_VERSION(major, minor, patch):
	return (((major) << 22) | ((minor) << 12) | (patch))

VULKAN_H_ = 1
VK_ATTACHMENT_UNUSED = -1

def VK_VERSION_PATCH(version):
	return version&0xfff

VK_WHOLE_SIZE = -1
VK_UUID_SIZE = 16
VK_REMAINING_MIP_LEVELS = -1
VK_MAX_MEMORY_TYPES = 32
VK_FALSE = 0
VK_KHR_SURFACE_SPEC_VERSION = 25
VK_KHR_display_swapchain = 1
VK_TRUE = 1
VK_NV_GLSL_SHADER_SPEC_VERSION = 1
VK_NV_GLSL_SHADER_EXTENSION_NAME = "VK_NV_glsl_shader"
VK_EXT_debug_report = 1
VK_EXT_DEBUG_REPORT_SPEC_VERSION = 2
VK_KHR_display = 1
VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT
VK_KHR_surface = 1
VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_SPEC_VERSION = 1
VK_API_VERSION = VK_MAKE_VERSION(1, 0, 5)
VK_MAX_EXTENSION_NAME_SIZE = 256

def VK_VERSION_MINOR(version):
	return (version>>12)&0x3ff

VK_QUEUE_FAMILY_IGNORED = -1

def VK_VERSION_MAJOR(version):
	return version>>22

VK_KHR_DISPLAY_SWAPCHAIN_SPEC_VERSION = 9
VK_LOD_CLAMP_NONE = 1000.0
VK_KHR_DISPLAY_SPEC_VERSION = 21
VK_NULL_HANDLE = 0
VK_MAX_PHYSICAL_DEVICE_NAME_SIZE = 256
VK_REMAINING_ARRAY_LAYERS = -1
VK_KHR_SWAPCHAIN_SPEC_VERSION = 67
VK_VERSION_1_0 = 1
VK_MAX_DESCRIPTION_SIZE = 256
VK_KHR_DISPLAY_SWAPCHAIN_EXTENSION_NAME = "VK_KHR_display_swapchain"
VK_KHR_swapchain = 1
VK_EXT_DEBUG_REPORT_EXTENSION_NAME = "VK_EXT_debug_report"
VK_MAX_MEMORY_HEAPS = 16
VK_SUBPASS_EXTERNAL = -1
VK_NV_glsl_shader = 1
VK_KHR_DISPLAY_EXTENSION_NAME = "VK_KHR_display"


VK_KHR_xlib_surface = 1
VK_KHR_XLIB_SURFACE_SPEC_VERSION = 6
VK_KHR_XLIB_SURFACE_EXTENSION_NAME = "VK_KHR_xlib_surface"

VK_KHR_xcb_surface = 1
VK_KHR_XCB_SURFACE_SPEC_VERSION = 6
VK_KHR_XCB_SURFACE_EXTENSION_NAME = "VK_KHR_xcb_surface"

VK_KHR_wayland_surface = 1
VK_KHR_WAYLAND_SURFACE_SPEC_VERSION = 5
VK_KHR_WAYLAND_SURFACE_EXTENSION_NAME = "VK_KHR_wayland_surface"

VK_KHR_mir_surface = 1
VK_KHR_MIR_SURFACE_SPEC_VERSION = 4
VK_KHR_MIR_SURFACE_EXTENSION_NAME = "VK_KHR_mir_surface"

VK_KHR_android_surface = 1
VK_KHR_ANDROID_SURFACE_SPEC_VERSION = 6
VK_KHR_ANDROID_SURFACE_EXTENSION_NAME = "VK_KHR_android_surface"

VK_KHR_win32_surface = 1
VK_KHR_WIN32_SURFACE_SPEC_VERSION = 5
VK_KHR_WIN32_SURFACE_EXTENSION_NAME = "VK_KHR_win32_surface"